soldiers:

  - type: STR_SOLDIER
    tags:
      SOLDIER_WOUND_TIME_MULTIPLIER: 33 #Space Marines recover from wounds faster thanks to their superhuman physiology; 1/3rd normal time.


  - type: STR_GK_LV1
    tags:
      SOLDIER_WOUND_TIME_MULTIPLIER: 33 #Grey Knights recover from wounds faster thanks to their superhuman physiology; 1/3rd normal time.

  - type: STR_GK_LV2
    tags:
      SOLDIER_WOUND_TIME_MULTIPLIER: 33

  - type: STR_GK_LV3
    tags:
      SOLDIER_WOUND_TIME_MULTIPLIER: 33

  - type: STR_GK_LV4
    tags:
      SOLDIER_WOUND_TIME_MULTIPLIER: 33

  - type: STR_GK_LV5
    tags:
      SOLDIER_WOUND_TIME_MULTIPLIER: 33


  - type: STR_PRIMARISLV1
    tags:
      SOLDIER_WOUND_TIME_MULTIPLIER: 25 #Primaris Space Marines recover from wounds even faster than normal Space Marines; 1/4th normal time.

  - type: STR_PRIMARISLV2
    tags:
      SOLDIER_WOUND_TIME_MULTIPLIER: 25

  - type: STR_PRIMARISLV3
    tags:
      SOLDIER_WOUND_TIME_MULTIPLIER: 25

  - type: STR_PRIMARISLV4
    tags:
      SOLDIER_WOUND_TIME_MULTIPLIER: 25

  - type: STR_PRIMARISLV5
    tags:
      SOLDIER_WOUND_TIME_MULTIPLIER: 25

items:
# Holocaust: Grey Knight exclusive armor-ignoring spell that does melta type damage and ignites
  - type: STR_HOLOCAUST_TOME
    weight: 10
    invWidth: 2
    invHeight: 2
    #Visuals
    vaporColorSurface: 13 #white fire
    vaporDensitySurface: 6
    vaporProbabilitySurface: 100
    bigSprite: { mod: 40k, index: 33 } #big book
    bulletSprite: { mod: 40k, index: 5 }
    fireSound: { mod: 40k, index: 706 }
    hitSound: { mod: 40k, index: 12 }
    hitAnimation: { mod: 40k, index: 88 } #XFIRE
    #Attack parameters
    accuracyAuto: 50
    accuracyMultiplier: #psi has a slight influence
      flatHundred: 0.8
      psi: 0.004
    tuAuto: 25
    costUse:
      energy: 40 #exhausting
      stun: 20
    battleType: 1
    twoHanded: false
    arcingShot: false
    autoRange: 10
    maxRange: 20
    powerRangeReduction: 5.0 #power drops off rapidly with distance
    powerRangeThreshold: 11.0
    autoShots: 6
    confAuto:
      name: STR_HOLOCAUST_SPELL
    power: 20
    damageBonus:
      psi: 0.005
    damageType: 11 #melta
    damageAlter:
      RandomType: 6
      FireBlastCalc: false
      IgnoreOverKill: false #incinerates completely, leaving no trace
      FireThreshold: 0
      ToHealth: 1.0
      ToArmor: 1.0 #melts armor
      ToTile: 0.3
      ToItem: 0.3
      ToWound: 0.05
      RandomWound: false
      ToMorale: 40.0 #spiritual fire scours the soul
      ArmorEffectiveness: 0.0 #armor is no protection against these spiritual fires
    blastRadius: 2
    clipSize: -1
    bulletSpeed: 50
    explosionSpeed: 10
    recover: false
    flatRate: true
    fixedWeapon: true
    specialUseEmptyHand: true

  - type: STR_ELDAR_LIGHT_PLAYER #Version of the Eldar Lightning spell that the player's Farseer users
    weight: 0
    bigSprite: { mod: 40k, index: 316}
    fireSound: [{ mod: 40k, index: 854},{ mod: 40k, index: 855},{ mod: 40k, index: 856},{ mod: 40k, index: 857}]
    power: 10
    damageBonus: #player version scales with psi power
      psi: 0.005
    damageType: 5
    accuracyAimed: 90
    accuracyMultiplier: #psi has a slight influence
      flatHundred: 0.8
      psi: 0.005
    confAimed:
      shots: 1
      name: STR_LH
    tuAimed: 50
    battleType: 1
    damageAlter: #LIGHT
      RandomType: 2 #TFTD [50% - 150%]
      ArmorEffectiveness: 0.0
      ToArmorPre: 0.0
      ToArmor: 0.0
      ToHealth: 2.0
      ToStun: 0.2
    invWidth: 2
    invHeight: 3
    clipSize: -1
    bulletSprite: { mod: 40k, index: 17}
    blastRadius: 1
    explosionHitSound: { mod: 40k, index: 864}
    hitAnimation: { mod: 40k, index: 152}
    twoHanded: false
    skillApplied: false
    strengthApplied: false
    recover: false
    fixedWeapon: true
    specialIconSprite: 6
    specialUseEmptyHand: false

  - type: INV_NULL_STORM_TROOPER_BACKPACK_FLAMER #flamer backpack
    weight: 0
    invWidth: 3
    invHeight: 3
    bigSprite: 296 #null_grenadier_backpack; placeholder
    defaultInventorySlot: STR_BACK_PACK
    fixedWeapon: true
    recover: false
    tags:
      ITEM_CHANGES_SPRITE_WITH_ARMOR: 1

extended:
  tags: # Remember to add tag definitions to same file as item/armor rulesets!
    RuleItem:
#vampiric on kill; weapons
      TAG_HP_RETURNED_ON_KILL: int
      TAG_ENERGY_RETURNED_ON_KILL: int
      TAG_TIME_RETURNED_ON_KILL: int
      TAG_MORALE_RETURNED_ON_KILL: int
      TAG_STUN_RETURNED_ON_KILL: int
#vampiric on damage; weapons
      YTAG_DAMAGE_RETURNED_AS_HP: int
      YTAG_DAMAGE_RETURNED_AS_ENERGY: int
      YTAG_DAMAGE_RETURNED_AS_TIME: int
      YTAG_DAMAGE_RETURNED_AS_MORALE: int
      YTAG_DAMAGE_RETURNED_AS_STUN: int
      YTAG_DAMAGE_RETURNED_RESIST_TYPE: int
#vampiric on damage; armors
    RuleArmor:
      YTAG_DAMAGE_RETURNED_AS_HP_BUFF: int
      YTAG_DAMAGE_RETURNED_AS_ENERGY_BUFF: int
      YTAG_DAMAGE_RETURNED_AS_TIME_BUFF: int
      YTAG_DAMAGE_RETURNED_AS_MORALE_BUFF: int
      YTAG_DAMAGE_RETURNED_AS_STUN_BUFF: int
      YTAG_DAMAGE_RETURNED_RESIST_TYPE_ARMOR: int
  scripts:
    damageUnit:
      - offset: 3
        code: |
          var ptre BattleUnit attackingUnit;
          var ptre BattleItem attackingItem;
          var ptr RuleItem itemRuleset;
          var ptr RuleArmor attackerArmor;
          var int hpReturnedCoefficient;
          var int energyReturnedCoefficient;
          var int timeReturnedCoefficient;
          var int moraleReturnedCoefficient;
          var int stunReturnedCoefficient;
          var int damageReturnedResistType;
          var int hpDamageDone;
          var int hpTarget;
          var int statAttacker;
          var int statMaxAttacker;
          var int hpReturned;
          var int energyReturned;
          var int timeReturned;
          var int moraleReturned;
          var int stunReturned;
          var int temp;

          var int KillHPReturnedValue;
          var int KillEnergyReturnedValue;
          var int KillTimeReturnedValue;
          var int KillMoraleReturnedValue;
          var int KillStunReturnedValue;

          var int numWounds;

          # debug_log "Drain On Hit/Kill: Script Start";
          damaging_item.getRuleItem itemRuleset;
          #set tag values
          itemRuleset.getTag hpReturnedCoefficient Tag.YTAG_DAMAGE_RETURNED_AS_HP;
          itemRuleset.getTag energyReturnedCoefficient Tag.YTAG_DAMAGE_RETURNED_AS_ENERGY;
          itemRuleset.getTag timeReturnedCoefficient Tag.YTAG_DAMAGE_RETURNED_AS_TIME;
          itemRuleset.getTag moraleReturnedCoefficient Tag.YTAG_DAMAGE_RETURNED_AS_MORALE;
          itemRuleset.getTag stunReturnedCoefficient Tag.YTAG_DAMAGE_RETURNED_AS_STUN;

          itemRuleset.getTag KillHPReturnedValue Tag.TAG_HP_RETURNED_ON_KILL;
          itemRuleset.getTag KillEnergyReturnedValue Tag.TAG_ENERGY_RETURNED_ON_KILL;
          itemRuleset.getTag KillTimeReturnedValue Tag.TAG_TIME_RETURNED_ON_KILL;
          itemRuleset.getTag KillMoraleReturnedValue Tag.TAG_MORALE_RETURNED_ON_KILL;
          itemRuleset.getTag KillStunReturnedValue Tag.TAG_STUN_RETURNED_ON_KILL;


          # check weapon for resist type
          itemRuleset.getTag damageReturnedResistType Tag.YTAG_DAMAGE_RETURNED_RESIST_TYPE;

          # debug_log "Drain On Hit/Kill: Armor Check";
          # following only if armor provides bonus
          damaging_item.getOwner attackingUnit;
          attackingUnit.getRuleArmor attackerArmor;
          if eq damageReturnedResistType 0;
            attackerArmor.getTag damageReturnedResistType Tag.YTAG_DAMAGE_RETURNED_RESIST_TYPE_ARMOR;
            attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_HP_BUFF;
            add hpReturnedCoefficient temp;
            attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_ENERGY_BUFF;
            add energyReturnedCoefficient temp;
            attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_TIME_BUFF;
            add timeReturnedCoefficient temp;
            attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_MORALE_BUFF;
            add moraleReturnedCoefficient temp;
            attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_STUN_BUFF;
            add stunReturnedCoefficient temp;
          else;
            attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_RESIST_TYPE_ARMOR;
            if eq temp damageReturnedResistType;
              attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_HP_BUFF;
              add hpReturnedCoefficient temp;
              attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_ENERGY_BUFF;
              add energyReturnedCoefficient temp;
              attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_TIME_BUFF;
              add timeReturnedCoefficient temp;
              attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_MORALE_BUFF;
              add moraleReturnedCoefficient temp;
              attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_STUN_BUFF;
              add stunReturnedCoefficient temp;
            end;
          end;

          # following only if extra held items are to provide bonus
          attackingUnit.getLeftHandWeapon attackingItem;

          if and neq attackingItem null neq attackingItem damaging_item;
            attackingItem.getRuleItem itemRuleset;
            itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_RESIST_TYPE;

            if eq damageReturnedResistType 0;
              set damageReturnedResistType temp;
            end;

            if eq damageReturnedResistType temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_HP;
              add hpReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_ENERGY;
              add energyReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_TIME;
              add timeReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_MORALE;
              add moraleReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_STUN;
              add stunReturnedCoefficient temp;
            end;
          end;

          attackingUnit.getRightHandWeapon attackingItem;

          if and neq attackingItem null neq attackingItem damaging_item;
            attackingItem.getRuleItem itemRuleset;
            itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_RESIST_TYPE;

            if eq damageReturnedResistType 0;
              set damageReturnedResistType temp;
            end;

            if eq damageReturnedResistType temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_HP;
              add hpReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_ENERGY;
              add energyReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_TIME;
              add timeReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_MORALE;
              add moraleReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_STUN;
              add stunReturnedCoefficient temp;
            end;
          end;

          # check if target not immune to vampirism
          # debug_log "Drain On Hit/Kill: Immunity Check" damageReturnedResistType;
          set temp 100;
          unit.reduceByResistance temp damageReturnedResistType;
          if eq temp 0;
            return;
          end;

          # check if attacker has req. vampiric coeffs
          # debug_log "Drain On Hit/Kill: Coefficient Check";
          if and eq hpReturnedCoefficient 0 eq energyReturnedCoefficient 0 eq timeReturnedCoefficient 0 eq moraleReturnedCoefficient 0 eq stunReturnedCoefficient 0;
            return;
          else;

            # set amount of HP drained, and that it can't be higher than target's total
            unit.getHealth hpTarget;
            set hpDamageDone to_health;
            limit_upper hpDamageDone hpTarget;
            set hpReturned hpDamageDone;
            set energyReturned hpDamageDone;
            set timeReturned hpDamageDone;
            set moraleReturned hpDamageDone;
            set stunReturned hpDamageDone;

            # multiply damage returned to attacker as drain with coefs; muldiv is a*b/c
            muldiv hpReturned hpReturnedCoefficient 100;
            muldiv energyReturned energyReturnedCoefficient 100;
            muldiv timeReturned timeReturnedCoefficient 100;
            muldiv moraleReturned moraleReturnedCoefficient 100;
            muldiv stunReturned stunReturnedCoefficient 100;

            # onKill only yields benefits if the target is dead; i.e. current Health is equal to or less than 0.
            # debug_log "Drain On Hit/Kill: Pre-Kill Check; Damage Done:" hpDamageDone;
            # debug_log "Drain On Hit/Kill: Pre-Kill Check; Target HP:" hpTarget;
            if ge hpDamageDone hpTarget;
              # debug_log "Drain On Hit/Kill: Kill Check Successful";
              itemRuleset.getTag temp Tag.TAG_HP_RETURNED_ON_KILL;
              add KillHPReturnedValue temp;
              # debug_log "Drain On Hit/Kill: KillHPReturnedValue" KillHPReturnedValue;
              itemRuleset.getTag temp Tag.TAG_ENERGY_RETURNED_ON_KILL;
              add KillEnergyReturnedValue temp;
              # debug_log "Drain On Hit/Kill: KillEnergyReturnedValue" KillEnergyReturnedValue;
              itemRuleset.getTag temp Tag.TAG_TIME_RETURNED_ON_KILL;
              add KillTimeReturnedValue temp;
              # debug_log "Drain On Hit/Kill: KillTimeReturnedValue" KillTimeReturnedValue;
              itemRuleset.getTag temp Tag.TAG_MORALE_RETURNED_ON_KILL;
              add KillMoraleReturnedValue temp;
              # debug_log "Drain On Hit/Kill: KillMoraleReturnedValue" KillMoraleReturnedValue;
              itemRuleset.getTag temp Tag.TAG_STUN_RETURNED_ON_KILL;
              add KillStunReturnedValue temp;
              # debug_log "Drain On Hit/Kill: KillStunReturnedValue" KillStunReturnedValue;
            end;

            # factor in specified resistance
            unit.reduceByResistance hpReturned damageReturnedResistType;
            unit.reduceByResistance energyReturned damageReturnedResistType;
            unit.reduceByResistance timeReturned damageReturnedResistType;
            unit.reduceByResistance moraleReturned damageReturnedResistType;
            unit.reduceByResistance stunReturned damageReturnedResistType;
            # debug_log "Drain On Hit/Kill: hpReturned after resistances" hpReturned;

            # set the appropriate stats, respecting the maximum values
            attackingUnit.getHealth statAttacker;
            attackingUnit.getHealthMax statMaxAttacker;
            add hpReturned statAttacker;
            # debug_log "Drain On Hit/Kill: hpReturned pre-kill" hpReturned;
            add hpReturned KillHPReturnedValue;
            # debug_log "Drain On Hit/Kill: hpReturned post-kill" hpReturned;
            set temp hpReturned;
            sub temp statMaxAttacker; #calculate the excess healing if any
            attackingUnit.getFatalwoundsTotal numWounds;
            # debug_log "Drain On Hit/Kill: Total number of wounds:" numWounds;
            #excess healing removes 1 fatal wound per 5 health regained above the unit's maximum hit points
            if and gt temp 0 gt numWounds 0;
              div temp 5;
              loop var i 6; #cycle through the body parts
                # debug_log "Drain On Hit/Kill: Body Part Loop #:" i;
                # debug_log "Drain On Hit/Kill: Number of Heals:" temp;
                attackingUnit.getFatalwounds numWounds i; #check the number of wounds in this bodypart
                # debug_log "Drain On Hit/Kill: Number of wounds in bodypart:" numWounds;
                if gt numWounds 0; #if there are any wounds in this body part, remove as many as we can
                  if gt numWounds temp; #if there are more wounds than heals in this body part, subtract the heals from the wounds and zero out heals
                    set numWounds temp;
                    set temp 0;
                    # debug_log "Drain On Hit/Kill: Wounds Greater Than Heals: Number of wounds in bodypart:" numWounds;
                    # debug_log "Drain On Hit/Kill: Wounds Greater Than Heals: Number of Heals:" temp;
                  end;
                  if le numWounds temp; #if there are more wounds than heals in this body part, subtract the heals from the wounds and zero out heals
                    sub temp numWounds; #if there are more heals than wounds in this body part, subtract the wounds from the heals and zero out wounds
                    # debug_log "Drain On Hit/Kill: Wounds Less Than/Equal to Heals: Number of wounds in bodypart:" numWounds;
                    # debug_log "Drain On Hit/Kill: Wounds Less Than/Equal to Heals: Number of Heals:" temp;
                  end;
                  mul numWounds -1; #set the wound count to negative
                  # debug_log "Drain On Hit/Kill: Wounds to Heal:" numWounds;
                  attackingUnit.setFatalwounds i numWounds; #remove the wounds
                  attackingUnit.getFatalwoundsTotal numWounds; #recalculate wounds
                  # debug_log "Drain On Hit/Kill: Total number of wounds remaining:" numWounds;
                end;
              end;
              #if or le numWounds 0 le temp 0; #if there are no fatal wounds remaining, or we're out of heals, end this loop early
              #  end;
            end;
            #cap the healing to the unit's maximum Health
            limit_upper hpReturned statMaxAttacker;
            # debug_log "Drain On Hit/Kill: hpReturned post-cap" hpReturned;
            attackingUnit.setHealth hpReturned;

            attackingUnit.getEnergy statAttacker;
            attackingUnit.getEnergyMax statMaxAttacker;
            add energyReturned statAttacker;
            add energyReturned KillEnergyReturnedValue;
            limit_upper energyReturned statMaxAttacker;
            attackingUnit.setEnergy energyReturned;

            attackingUnit.getTimeUnits statAttacker;
            attackingUnit.getTimeUnitsMax statMaxAttacker;
            add timeReturned statAttacker;
            add timeReturned KillTimeReturnedValue;
            limit_upper timeReturned statMaxAttacker;
            attackingUnit.setTimeUnits timeReturned;

            # special case, morale return is influenced by bravery
            #if neq moraleReturned 0;
            #  attackingUnit.reduceByBravery moraleReturned;
            #end;
            attackingUnit.getMorale statAttacker;
            add moraleReturned statAttacker;
            add moraleReturned KillMoraleReturnedValue;
            limit_upper moraleReturned 100;
            attackingUnit.setMorale moraleReturned;

            attackingUnit.getStun statAttacker;
            sub statAttacker stunReturned;
            sub statAttacker KillStunReturnedValue;
            limit_lower stunReturned 0;
            attackingUnit.setStun statAttacker;
          end;

          return;