# items:
#  - type: STR_LASGUN_LUCIUS
#    confAuto:
#      shots: 1
#      spendPerShot: 4
#      name: STR_POWER_SHOT
#    compatibleAmmo:
#      - STR_LASGUN_CLIP
#    tags:
#      ITEM_AUTO_FLAT_POWER_BONUS: 20

extended:
  tags:
    RuleItem:
      ITEM_SNAP_FLAT_POWER_BONUS: int  # value added to Snap power as a flat number
      ITEM_SNAP_FLAT_POWER_BONUS_PERCENT: int  # value added to Snap power as a % multipler
      ITEM_SNAP_ACCURACY_POWER_BONUS: int  # percent of the user's Firing Accuracy that applies to Snap power as a flat damage bonus; used for precision weapons like sniper rifles
      ITEM_SNAP_ACCURACY_POWER_BONUS_PERCENT: int  # percent of the user's Firing Accuracy that applies to Snap power as a multiplier; used for precision weapons like sniper rifles

      ITEM_AUTO_FLAT_POWER_BONUS: int  # value added to Auto power as a flat number
      ITEM_AUTO_FLAT_POWER_BONUS_PERCENT: int  # value added to Auto power as a % multipler
      ITEM_AUTO_ACCURACY_POWER_BONUS: int  # percent of the user's Firing Accuracy that applies to Auto power as a flat damage bonus; used for precision weapons like sniper rifles
      ITEM_AUTO_ACCURACY_POWER_BONUS_PERCENT: int  # percent of the user's Firing Accuracy that applies to Auto power as a multiplier; used for precision weapons like sniper rifles

      ITEM_AIMED_FLAT_POWER_BONUS: int  # value added to Aimed power as a flat number
      ITEM_AIMED_FLAT_POWER_BONUS_PERCENT: int  # value added to Aimed power as a % multipler
      ITEM_AIMED_ACCURACY_POWER_BONUS: int  # percent of the user's Firing Accuracy that applies to Aimed power as a flat damage bonus; used for precision weapons like sniper rifles
      ITEM_AIMED_ACCURACY_POWER_BONUS_PERCENT: int  # percent of the user's Firing Accuracy that applies to Aimed power as a multiplier; used for precision weapons like sniper rifles

      ITEM_MELEE_POWER_BONUS: int

      ITEM_SNEAKY_BONUS: int #bonus damage as a % if this unit has gone at least 1 turn without being spotted.
      ITEM_SIDE_DAMAGE_BONUS: int #bonus damage as a % if this unit hits the target from the side
      ITEM_REAR_DAMAGE_BONUS: int #bonus damage as a % if this unit hits the target from the rear

  scripts:
    hitUnit:  # increase power if bonus exists for fire mode
      - new: ROSIGMA_hU_highpower_shot
        offset: 20
        code: |
          var int weaponPower;
          var int powerBonus;
          var int flatBonus;
          var int flatBonusPercent;
          var int accuracyBonus;
          var int accuracyBonusPercent;
          var int flatBonusPercentBonus;
          var int accuracyBonusPercentBonus;
          var int temp;
          var int temp2;
          var ptr RuleItem rItem;
          var ptr BattleItem ammoItem;

          attacker.getFaction temp;
          unit.getFaction temp2;
          if eq temp temp2;
            # debug_log "ROSIGMA_hU_highpower_shot, offset 20: Aborting. Target is friendly." unit;
            return power part side;
          end;

          weapon_item.getRuleItem rItem;

          if eq battle_action battle_action_snapshot;
            rItem.getTag flatBonus Tag.ITEM_SNAP_FLAT_POWER_BONUS;
            rItem.getTag flatBonusPercent Tag.ITEM_SNAP_FLAT_POWER_BONUS_PERCENT;
            rItem.getTag accuracyBonus Tag.ITEM_SNAP_ACCURACY_POWER_BONUS;
            rItem.getTag accuracyBonusPercent Tag.ITEM_SNAP_ACCURACY_POWER_BONUS_PERCENT;
          end;

          if eq battle_action battle_action_autoshoot;
            rItem.getTag flatBonus Tag.ITEM_AUTO_FLAT_POWER_BONUS;
            rItem.getTag flatBonusPercent Tag.ITEM_AUTO_FLAT_POWER_BONUS_PERCENT;
            rItem.getTag accuracyBonus Tag.ITEM_AUTO_ACCURACY_POWER_BONUS;
            rItem.getTag accuracyBonusPercent Tag.ITEM_AUTO_ACCURACY_POWER_BONUS_PERCENT;
          end;

          if eq battle_action battle_action_aimshoot;
            rItem.getTag flatBonus Tag.ITEM_AIMED_FLAT_POWER_BONUS;
            rItem.getTag flatBonusPercent Tag.ITEM_AIMED_FLAT_POWER_BONUS_PERCENT;
            rItem.getTag accuracyBonus Tag.ITEM_AIMED_ACCURACY_POWER_BONUS;
            rItem.getTag accuracyBonusPercent Tag.ITEM_AIMED_ACCURACY_POWER_BONUS_PERCENT;
          end;

          if eq battle_action battle_action_hit;
            rItem.getTag flatBonus Tag.ITEM_MELEE_POWER_BONUS;
          end;

          if and eq flatBonus 0 eq flatBonusPercent 0 eq accuracyBonus 0 eq accuracyBonusPercent 0;
            # debug_log "ROSIGMA_hU_highpower_shot, line 59: No relevant variables detected; aborting.";
            return power part side;
          end;

          # debug_log "ROSIGMA_hU_highpower_shot: Initial Power" power;

          if gt flatBonusPercent 0; # flat multiplier
            # debug_log "ROSIGMA_hU_highpower_shot: flatBonusPercent initial:" flatBonusPercent;
            set flatBonusPercentBonus power;
            muldiv flatBonusPercentBonus flatBonusPercent 100;
            add powerBonus flatBonusPercentBonus;
            # debug_log "ROSIGMA_hU_highpower_shot: powerBonus after flatBonusPercent:" powerBonus;
          end;

          if gt accuracyBonusPercent 0; # accuracy adjusted multiplier
            # debug_log "ROSIGMA_hU_highpower_shot: accuracyBonusPercent initial:" accuracyBonusPercent;
            attacker.Stats.getFiring temp; # get attacker's firing accuracy
            # debug_log "ROSIGMA_hU_highpower_shot: accuracyBonusPercent Attacker's firing accuracy:" temp;
            muldiv accuracyBonusPercent temp 100;
            # debug_log "ROSIGMA_hU_highpower_shot: accuracyBonusPercent multiplier:" accuracyBonusPercent;
            set accuracyBonusPercentBonus power;
            muldiv accuracyBonusPercentBonus accuracyBonusPercent 100;
            add powerBonus accuracyBonusPercentBonus;
            # debug_log "ROSIGMA_hU_highpower_shot: powerBonus after accuracyBonusPercent." powerBonus;
          end;

          if gt accuracyBonus 0; # add the accuracy based flat amount
            # debug_log "ROSIGMA_hU_highpower_shot: accuracyBonus initial:" accuracyBonus;
            attacker.Stats.getFiring temp; # get attacker's firing accuracy
            # debug_log "ROSIGMA_hU_highpower_shot: accuracyBonus Attacker's firing accuracy:" temp;
            muldiv accuracyBonus temp 100;
            # debug_log "ROSIGMA_hU_highpower_shot: accuracyBonus power bonus." accuracyBonus;
            add powerBonus accuracyBonus;
            # debug_log "ROSIGMA_hU_highpower_shot: powerBonus after adding accuracyBonus." powerBonus;
          end;

          if gt flatBonus 0; # add the flat bonus
            # debug_log "ROSIGMA_hU_highpower_shot: flatBonus." flatBonus;
            add powerBonus flatBonus;
            # debug_log "ROSIGMA_hU_highpower_shot: powerBonus after adding flatBonus." powerBonus;
          end;

          add power powerBonus;

          # debug_log "ROSIGMA_hU_highpower_shot: Final Power" power;

          return power part side;

      - new: ROSIGMA_hU_sneaky_shot
        offset: 21
        code: |
          var int weaponPower;
          var int sneakyBonus;
          var int temp;
          var int unitFaction;
          var ptr RuleItem rItem;
          var ptr BattleItem ammoItem;

          attacker.getFaction temp;
          unit.getFaction unitFaction;
          if eq temp unitFaction;
            # debug_log "ROSIGMA_hU_sneaky_shot, offset 21: Aborting. Target is friendly." unit;
            return power part side;
          end;

          damaging_item.getRuleItem rItem;
          rItem.getTag sneakyBonus Tag.ITEM_SNEAKY_BONUS;
          if lt sneakyBonus 1;
            # debug_log "ROSIGMA_hU_sneaky_shot, offset 21: Aborting. Damaging item don't have a sneakyBonus.";
            return power part side;
          end;

          # debug_log "ROSIGMA_hU_sneaky_shot, offset 21: Initial power:" power;
          attacker.isVisible temp;
          if gt temp 0;
            # debug_log "ROSIGMA_hU_sneaky_shot, offset 21: Aborting. Unit is visible:" temp;
            return power part side;
          end;

          muldiv power sneakyBonus 100; # we deal powerBonus % more damage relative to the base power;
          # debug_log "ROSIGMA_hU_sneaky_shot, offset 21: Success. Unit not visible. Temp:" temp;
          # debug_log "ROSIGMA_hU_sneaky_shot, offset 21: Success. New power:" power;

          if eq unitFaction FACTION_PLAYER;
            battle_game.flashMessage "STR_SCRIPT_SNEAK_ATTACK";
          end;

          return power part side;

      - new: ROSIGMA_hU_facing_bonus_damage
        offset: 22
        code: |
          var int facingBonus;
          var int temp;
          var int temp2;
          var ptr RuleItem rItem;

          if or eq side SIDE_FRONT eq side SIDE_UNDER; #no relevant facings; abort.
            # debug_log "ROSIGMA_hU_facing_bonus_damage, offset 22: Aborting. No relevant facing. Side:" side;
            return power part side;
          end;

          attacker.getFaction temp;
          unit.getFaction temp2;
          if eq temp temp2;
            # debug_log "ROSIGMA_hU_facing_bonus_damage, offset 22: Aborting. Target is friendly." unit;
            return power part side;
          end;

          damaging_item.getRuleItem rItem;
          if or eq side SIDE_LEFT neq side SIDE_RIGHT;
            rItem.getTag facingBonus Tag.ITEM_SIDE_DAMAGE_BONUS;
            if lt facingBonus 1;
              # debug_log "ROSIGMA_hU_facing_bonus_damage, offset 22: Aborting. Side damage without side damage bonus. Side:" side;
              return power part side;
            end;
          else;
            rItem.getTag facingBonus Tag.ITEM_REAR_DAMAGE_BONUS;
          end;

          if lt facingBonus 1;
            # debug_log "ROSIGMA_hU_facing_bonus_damage, offset 22: Aborting. No facing bonus damage. Side:" side;
            return power part side;
          end;
          # debug_log "ROSIGMA_hU_facing_bonus_damage, offset 22: Initial power:" power;

          muldiv power facingBonus 100; # we deal powerBonus % more damage relative to the base power;
          # debug_log "ROSIGMA_hU_facing_bonus_damage, offset 22: Success. Facing:" side;
          # debug_log "ROSIGMA_hU_facing_bonus_damage, offset 22: Success. New power:" power;

          return power part side;