extended:
  tagsFile: Ruleset/tags_ROSIGMA.rul

  tags:
    RuleArmor:
      UNIT_IS_REINFORCEMENT_GENERATOR: int # 0-100; percentile; value defines the % probability of reinforcements each turn
      REINFORCEMENTS_PER_TURN: int # 0-100; value defines the number of reinforcement spawners this unit will activate each turn.
      REINFORCEMENTS_MINIMUM_PER_TURN: int # 0-100; value defines the min number of reinforcements this unit will activate
      REINFORCEMENTS_MAXIMUM_PER_TURN: int # 0-100; value defines the max number of reinforcements this unit will activate
      REINFORCEMENTS_SPAWN_COOLDOWN: int # Defines the number of turns before it spawns again; overrides percentile chance
      REINFORCEMENT_GENERATOR_ID: int # the ID number of the reinforcement generator
      REINFORCEMENT_TURN_DELAY: int # 0+; how many full turns this reinforcement generator remains dormant for
      REINFORCEMENT_TURN_DURATION: int # 0+; after this turn the reinforcement spawner will no longer regenerate
      REINFORCEMENT_LIMIT_CAPACITY: int # 0+; determines how many spawns this unit adds to the total reinforcement limit, and whether it is subject to the reinforcement limit
    BattleUnit:
      UNIT_REINFORCEMENTS_SPAWN_COOLDOWN_REMAINING: int # Unit's current cooldown count.

    RuleItem:
      ITEM_IS_REINFORCEMENT_SPAWNER: int #0-1; binary; value defines whether these reinforcement scripts prime these items if they're on a reinforcement unit

    BattleGame:
      REINFORCEMENT_LIMIT_POOL: int #0+; for those reinforcement units with a defined REINFORCEMENT_LIMIT_CAPACITY, determines the total number of reinforcements that can be spawned by them between all such units.

  scripts:
    createUnit:
      - new: ROSIGMA_nTU_reinforcement_set_initial_limit_pool
        offset: 2
        code: |
          var ptr RuleArmor rArmor;
          var int temp;
          var int reinforcementCapacity;

          unit.getRuleArmor rArmor;
          rArmor.getTag reinforcementCapacity Tag.UNIT_IS_REINFORCEMENT_GENERATOR;

          if eq turn 0; # we don't care about Turn 0 and less; abort.
            unit.getRuleArmor rArmor;
            rArmor.getTag reinforcementCapacity Tag.REINFORCEMENT_LIMIT_CAPACITY;
            if gt reinforcementCapacity 0;
              # debug_log "ROSIGMA_nTU_reinforcement_set_initial_limit_pool | offset: 2 | Unit spawn. Pre-addition Reinforcement Capacity. reinforcementCapacity:" reinforcementCapacity;
              battle_game.getTag temp Tag.REINFORCEMENT_LIMIT_POOL;
              # debug_log "ROSIGMA_nTU_reinforcement_set_initial_limit_pool | offset: 2 | Unit spawn. Unit Reinforcement Capacity to be added. temp:" temp;
              add temp reinforcementCapacity;
              battle_game.setTag Tag.REINFORCEMENT_LIMIT_POOL temp; #reset resurrection power
              # debug_log "ROSIGMA_nTU_reinforcement_set_initial_limit_pool | offset: 2 | Unit spawn. Setting initial reinforcement limit then aborting. REINFORCEMENT_LIMIT_POOL:" temp;
              return;
            end;
          end;

          return;

    newTurnUnit:
      - new: ROSIGMA_nTU_reinforcement_units
        offset: 10
        code: |
          var int temp;
          var int temp2;
          var int turnCount;
          var int reinforcementProb;
          var int reinforcementLimit;
          var int reinforcementCooldown;
          var int reinforcementCapacity;
          var int unitID;
          var int numInventoryItems;
          var ptr RuleUnit rUnit;
          var ptr RuleItem rItem;
          var ptr RuleArmor rArmor;
          var ptre BattleItem someItem;

          unit.getHealth temp;
          if le temp 0; # dead unit
            # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Aborting. Unit not alive: " unit;
            return;
          end;

          if eq turn 0; # set initial reinforcement limit pool on T0
            unit.getRuleArmor rArmor;
            rArmor.getTag reinforcementCapacity Tag.REINFORCEMENT_LIMIT_CAPACITY;
            if gt reinforcementCapacity 0;
              # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Turn 0. Pre-addition Reinforcement Capacity. reinforcementCapacity:" reinforcementCapacity;
              battle_game.getTag temp Tag.REINFORCEMENT_LIMIT_POOL;
              # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Turn 0. Unit Reinforcement Capacity to be added. temp:" temp;
              add temp reinforcementCapacity;
              battle_game.setTag Tag.REINFORCEMENT_LIMIT_POOL temp; #reset resurrection power
              # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Turn 0. Setting initial reinforcement limit then aborting. REINFORCEMENT_LIMIT_POOL:" temp;
              return;
            end;
          end;

          unit.getFaction temp;
          battle_game.getTurnSide temp2;
          if neq temp temp2;
            # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Aborting. Not subject unit's turn: " unit;
            return;
          end;

          unit.getRuleArmor rArmor;
          rArmor.getTag reinforcementProb Tag.UNIT_IS_REINFORCEMENT_GENERATOR;
          if lt reinforcementProb 1;
            # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Aborting. Unit not Reinforcement Generator. unit:" unit;
            return;
          end;
          # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | UNIT_IS_REINFORCEMENT_GENERATOR. unit:" unit;
          # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | UNIT_IS_REINFORCEMENT_GENERATOR. reinforcementProb:" reinforcementProb;

          rArmor.getTag temp Tag.REINFORCEMENT_TURN_DELAY;
          battle_game.getTurn turnCount;
          if lt temp2 temp;
            # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Aborting. Current turn is lower than REINFORCEMENT_TURN_DELAY. turn:" temp2;
            # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Aborting. Current turn is lower than REINFORCEMENT_TURN_DELAY. REINFORCEMENT_TURN_DELAY:" temp;
            return;
          end;

          rArmor.getTag reinforcementCooldown Tag.REINFORCEMENTS_SPAWN_COOLDOWN;
          # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | REINFORCEMENTS_SPAWN_COOLDOWN value. reinforcementCooldown:" reinforcementCooldown;
          if lt reinforcementCooldown 1; # if we don't use fixed cooldowns, roll to determine spawn instead.
            battle_game.randomRange temp2 1 100; #randomizer
            if lt reinforcementProb temp2;
              # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Aborting. Random roll is higher than UNIT_IS_REINFORCEMENT_GENERATOR value. temp2:" temp2;
              return;
            end;
          else;
            unit.getTag temp Tag.UNIT_REINFORCEMENTS_SPAWN_COOLDOWN_REMAINING;
            if gt temp 1;
              sub temp 1;
              unit.setTag Tag.UNIT_REINFORCEMENTS_SPAWN_COOLDOWN_REMAINING temp;
              # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Aborting. Reinforcement unit on cooldown. Cooldown remaining:" temp;
              return;
            else;
              unit.setTag Tag.UNIT_REINFORCEMENTS_SPAWN_COOLDOWN_REMAINING reinforcementCooldown;
              # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | UNIT_REINFORCEMENTS_SPAWN_COOLDOWN_REMAINING set to:" reinforcementCooldown;
            end;
          end;

          rArmor.getTag reinforcementCapacity Tag.REINFORCEMENT_LIMIT_CAPACITY;
          battle_game.getTag temp Tag.REINFORCEMENT_LIMIT_POOL;
          if and gt reinforcementCapacity 0 lt temp 1;
            # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Aborting. Unit has REINFORCEMENT_LIMIT_CAPACITY and REINFORCEMENT_LIMIT_POOL is depleted. temp:" temp;
            return;
          end;

          unit.getInventoryItem.size numInventoryItems;
          # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | numInventoryItems" numInventoryItems;
          if lt numInventoryItems 1;
            rArmor.getTag temp Tag.REINFORCEMENT_TURN_DURATION;
            if or lt turnCount temp le temp 0;
              # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Reinforcement unit has no spawner items remaining; respawning. numInventoryItems:" numInventoryItems;

              rArmor.getTag unitID Tag.REINFORCEMENT_GENERATOR_ID;
              if eq unitID 1;
                rules.getRuleUnit rUnit "STR_NECRON_PORTAL";
              else eq unitID 2;
                rules.getRuleUnit rUnit "STR_TYRANID_BUGHOLE_SMALL";
              else eq unitID 3;
                rules.getRuleUnit rUnit "STR_TYRANID_BUGHOLE_LARGE";
              else eq unitID 4;
                rules.getRuleUnit rUnit "STR_TYRANID_BUGHOLE_ARMORED";
              end;
              unit.setSpawnUnit rUnit;
              unit.setSpawnUnitFaction FACTION_HOSTILE;
              unit.setSpawnUnitInstantRespawn 1;
              return;
            end;
            # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Aborting. Reinforcement duration exceeded by turnCount. Turn Duration:" temp;
            # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Aborting. Reinforcement duration exceeded by turnCount. Turn Count:" turnCount;
            return;
          end;

          rArmor.getTag reinforcementLimit Tag.REINFORCEMENTS_PER_TURN;

          rArmor.getTag temp Tag.REINFORCEMENTS_MINIMUM_PER_TURN; #override REINFORCEMENTS_PER_TURN if we have a min AND max
          rArmor.getTag temp2 Tag.REINFORCEMENTS_MAXIMUM_PER_TURN;
          if and gt temp 0 gt temp2 0;
            battle_game.randomRange reinforcementLimit temp temp2;
          end;

          loop var i numInventoryItems;
            unit.getInventoryItem someItem i;
            if lt i 2; #only set this on the first pass
              someItem.getTag temp Tag.ITEM_IS_REINFORCEMENT_SPAWNER; # get the bomb timer
            end;
            someItem.isFuseEnabled temp2; # don't bother if the fuse is already active
            # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Priming Loop Number:" i;
            # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Current item in inventory:" someItem;
            # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Is fuse enabled?:" temp2;
            # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Reinforcement Limit Counter:" reinforcementLimit;
            if and ge temp 1 lt temp2 1 gt reinforcementLimit 0;
              #someItem.setFuseEnabled 1;
              sub reinforcementLimit 1;
              someItem.setFuseTimer 0;
              battle_game.getTag temp Tag.REINFORCEMENT_LIMIT_POOL;
              sub temp 1;
              battle_game.setTag Tag.REINFORCEMENT_LIMIT_POOL temp;
              # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | New Reinforcement Limit:" temp;
              # debug_log "ROSIGMA_nTU_reinforcement_units | offset: 10 | Successful. Reinforcment Item Triggered. Bomb Item:" someItem;
            end;
          end;


          return;

items:
  - &REINFORCEMENT_SPAWNER_TEMPLATE
    type: STR_REINFORCEMENT_TEMPLATE
    spawnUnitFaction: 1
    invWidth: 0
    invHeight: 0
    battleType: 4
    recover: false
    hiddenOnMinimap: true
    tags:
      ITEM_IS_REINFORCEMENT_SPAWNER: 1

  - &REINFORCEMENT_SPAWNER_TEMPLATE_TYRANID
    type: STR_TYRANID_BUGHOLE_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE
    spawnUnit: STR_HORMAGAUNT
    hitSound: 2123  # sizzlebamf
    hitAnimation: 1210
    explosionSpeed: -2
    isExplodingInHands: true
    powerForAnimation: 20

  - type: STR_TYRANID_BUGHOLE_HORMAGAUNT_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_TYRANID
    spawnUnit: STR_HORMAGAUNT

  - type: STR_TYRANID_BUGHOLE_TERMAGANT_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_TYRANID
    spawnUnit: STR_TERMAGANT

  - type: STR_TYRANID_BUGHOLE_DEVOURER_TERMAGANT_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_TYRANID
    spawnUnit: STR_DEVOURER_TERMAGANT

  - type: STR_TYRANID_BUGHOLE_TYRANID_WARRIOR_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_TYRANID
    spawnUnit: STR_TYRANID_WARRIOR

  - type: STR_TYRANID_BUGHOLE_RIPPERSWARM_1_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_TYRANID
    spawnUnit: STR_RIPPERSWARM_1

  - type: STR_TYRANID_BUGHOLE_STR_RIPPERSWARM_4_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_TYRANID
    spawnUnit: STR_RIPPERSWARM_4

  - type: STR_TYRANID_BUGHOLE_STR_BIOVORE_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_TYRANID
    spawnUnit: STR_BIOVORE

  - type: STR_TYRANID_BUGHOLE_STR_SPOREMINE_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_TYRANID
    spawnUnit: STR_SPOREMINE

  - type: STR_TYRANID_BUGHOLE_STR_CARNI_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_TYRANID
    spawnUnit: STR_CARNI_TERRORIST

  - type: STR_TYRANID_BUGHOLE_STR_TYRANID_PRIME_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_TYRANID
    spawnUnit: STR_TYRANID_PRIME

  - type: STR_TYRANID_BUGHOLE_STR_GENESTEALER_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_TYRANID
    spawnUnit: STR_GENESTEALER


  - &REINFORCEMENT_SPAWNER_TEMPLATE_NECRON
    type: STR_NECRON_PORTAL_WARRIOR_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE
    spawnUnit: STR_NECRON_WARRIOR
    hitSound: 2123  # sizzlebamf
    explosionHitSound: {mod: 40k, index: 790}  # vortexpull
    hitAnimation: 1080
    power: 80
    damageType: 9  # generates a smoke screen; Necrons like this now that they actually have thermal vision
    damageAlter:
      RandomType: 6
      ToTime: 0.5
      ToEnergy: 0.5
      ToStun: 0.5
      ToHealth: 0.0
      ToWound: 0.0
      FixRadius: 3
    powerForAnimation: 5
    isExplodingInHands: true

  - type: STR_NECRON_PORTAL_SCARAB_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_NECRON
    spawnUnit: STR_NECRON_SCARAB1

  - type: STR_NECRON_PORTAL_FLAYED_ONE_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_NECRON
    spawnUnit: STR_NECRON_FLAYED_ONE

  - type: STR_NECRON_PORTAL_IMMORTAL_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_NECRON
    spawnUnit: STR_NECRON_IMORTAL

  - type: STR_NECRON_PORTAL_DEATHMARK_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_NECRON
    spawnUnit: STR_NECRON_DEATHMARK

  - type: STR_NECRON_PORTAL_LYCHGUARD_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_NECRON
    spawnUnit: STR_NECRON_LYCHGUARD

  - type: STR_NECRON_PORTAL_LYCHGUARD_SPAWNER
    refNode: *REINFORCEMENT_SPAWNER_TEMPLATE_NECRON
    spawnUnit: STR_NECRON_LYCHGUARD
