armors:
  - type: STR_BIOMANCER
    specialWeapon: STR_MEND_WOUNDS_SPELL
    builtInWeapons:
      - STR_BIOMANCER_STAFF
#      - STR_HEALING_TOUCH

items:
  - type: STR_MEND_WOUNDS_SPELL
    hidePower: true
    weight: 0
    battleType: 1  # wanted 9 but powerRangeReduction doesn't work because there is no projectile
    hitSound: {mod: 40k, index: 743}
    hitAnimation: {mod: 40k, index: 96}
    tuAimed: 30
    accuracyAimed: 200
    accuracyMultiplier:
      flatHundred: 1.0
    # psiAttackName: STR_MEND_WOUNDS
    # LOSRequired: true
    confAimed:
      name: STR_MEND_WOUNDS_SPELL
    damageType: 1  # this and power so it runs properly
    dropoff: 0
    power: 0
    damageBonus:
      psi: 0.01
    costAimed:
      health: 20  # we regenerate
      energy: 10
      stun: 10
      morale: 10
    damageAlter:
      ResistType: 0  # SUPPORT
      RandomType: 6
      ToStun: 0.0
      ToTime: 0.0
      ToEnergy: 0.0
      ToHealth: 0.0
      ArmorEffectiveness: 0.0
      ToArmor: 0
      ToWound: 0
      ToTile: 0
      ToItem: 0
      ToMorale: 0
      RandomWound: false
    recover: false
    fixedWeapon: true
    specialIconSprite: {mod: 40k, index: 105}
    specialUseEmptyHand: true
    clipSize: -1
    # targetMatrix: 5  # friendly + neutral
    powerRangeThreshold: 10  # doesn't work for psi because there is no projectile
    powerRangeReduction: 5
    maxRange: 20
    tags:
      ITEM_MENDS_WOUNDS: 1
      ITEM_MEND_HARMS_ENEMIES: 1
      ITEM_IS_PSYCHIC_POWER: 1
      ITEM_MEND_HEAL_CAP_PERCENT: 50
      ITEM_MEND_STUN_PERCENT: 50
      ITEM_MEND_ENERGY_PERCENT: 100
      ITEM_MEND_TIME_PERCENT: 50
      ITEM_PSYCHIC_POWER_MODIFIER: 5

extended:
  tags:
    RuleItem:
      ITEM_MENDS_WOUNDS: int
      ITEM_MEND_HEAL_CAP_PERCENT: int  # max % this heals up to
      ITEM_MEND_HARMS_ENEMIES: int
      ITEM_MEND_STUN_PERCENT: int  # percent of rolled power removed from target stun
      ITEM_MEND_ENERGY_PERCENT: int  # percent of rolled power removed from target energy
      ITEM_MEND_TIME_PERCENT: int  # percent of rolled power removed from target TU
    RuleArmor:
      ARMOR_REGENERATES_WOUNDS: int  # do we regenerate wounds? If so, how many?
      ARMOR_REGENERATES_HEALTH: int  # does this armor regenerate health? Yes/no
      ARMOR_HEALTH_REGENERATE_DYNAMIC_CEILING_PERCENT: int # is the max health % we can regenerate proportionate to our lost health?
      ARMOR_HEALTH_REGENERATE_CEILING_PERCENT: int  # the max % of our health we can regenerate up to
      ARMOR_HEALTH_REGENERATE_FLAT_AMOUNT: int # regenerate this fixed amount of health each turn
      ARMOR_HEALTH_REGENERATE_PERCENTAGE_AMOUNT_CURRENT_HP: int #regenerate this % of our current HP
      ARMOR_HEALTH_REGENERATE_PERCENTAGE_AMOUNT_MAX_HP: int #regenerate this % of our max HP
      ARMOR_PSI_REGENERATE_DIVISOR: int  # what we divide our psi by; lower is better; recommend at least 1000.
      ARMOR_HEALTH_PER_WOUND_REGENERATED: int
      ARMOR_WOUND_TIME_MULTIPLIER: int  # what percent do we multiply our wound recovery time by?
    BattleUnit:
      UNIT_LOWEST_HEALTH: int  #the lowest HP we have reached on this mission

  scripts:
    createUnit:
      - new: ROSIGMA_cU_armor_regenerates_health
        offset: 1
        code: |
          var int temp;
          var ptr RuleArmor armorRule;

          unit.getRuleArmor armorRule;
          armorRule.getTag temp Tag.ARMOR_REGENERATES_HEALTH;
          if lt temp 1;
            return;
          end;

          unit.getHealth temp;
          unit.setTag Tag.UNIT_LOWEST_HEALTH temp;
          # debug_log "ROSIGMA_cU_armor_regenerates_health, offset 1: initial UNIT_LOWEST_HEALTH set for unit:" unit;

          return;

    newTurnUnit:
      - new: ROSIGMA_nTU_armor_regenerates_health
        offset: 1
        code: |
          var int temp;
          var int temp2;
          var int healthCap;
          var int currentHealth;
          var int regenPercent;
          var int regenDivisor;
          var int maxHealth;
          var int maxPercent;
          var int totalWounds;
          var int unitFaction;
          var ptr RuleArmor armorRule;

          if eq turn 0;
            unit.getHealth currentHealth;
            unit.setTag Tag.UNIT_LOWEST_HEALTH currentHealth;
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: initial UNIT_LOWEST_HEALTH set for unit:" unit;
          end;

          unit.getFaction unitFaction;
          if neq side unitFaction; # don't reset on others' turns
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: Not the unit's turn. Aborting. side:" side;
            return;
          end;

          unit.getRuleArmor armorRule;
          armorRule.getTag temp Tag.ARMOR_REGENERATES_HEALTH;
          if lt temp 1;
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: ARMOR_REGENERATES_HEALTH is false. Aborting. temp:" temp;
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: ARMOR_REGENERATES_HEALTH is false. Aborting. unit:" unit;
            return;
          end;

          unit.getHealth currentHealth;
          unit.getHealthMax maxHealth;
          # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: maxHealth amount:" maxHealth;
          armorRule.getTag maxPercent Tag.ARMOR_HEALTH_REGENERATE_DYNAMIC_CEILING_PERCENT;
          if gt maxPercent 0;
            set temp maxHealth;
            unit.getTag temp2 Tag.UNIT_LOWEST_HEALTH;
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: UNIT_LOWEST_HEALTH currently:" temp2;
            sub temp temp2;
            muldiv temp maxPercent 100;
            add temp2 temp;
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: ARMOR_HEALTH_REGENERATE_DYNAMIC_CEILING_PERCENT set to:" temp2;
          else;
            armorRule.getTag maxPercent Tag.ARMOR_HEALTH_REGENERATE_CEILING_PERCENT;
            set temp2 maxHealth;
            muldiv temp2 maxPercent 100;
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: ARMOR_HEALTH_REGENERATE_CEILING_PERCENT set to:" temp2;
          end;
          set healthCap temp2;
          if gt currentHealth healthCap; # don't bother if our current health exceeds the maximum health we can regenerate up to
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: Aborting; current health above healthCap:" healthCap;
            return;
          end;

          armorRule.getTag regenPercent Tag.ARMOR_HEALTH_REGENERATE_PERCENTAGE_AMOUNT_MAX_HP;
          if gt regenPercent 0;
            set temp maxHealth;
            muldiv temp regenPercent 100;
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: ARMOR_HEALTH_REGENERATE_PERCENTAGE_AMOUNT_MAX_HP health increment:" temp;
            set temp2 currentHealth;
            add temp2 temp;
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: ARMOR_HEALTH_REGENERATE_PERCENTAGE_AMOUNT_MAX_HP health final:" temp2;
          else;
            armorRule.getTag regenPercent Tag.ARMOR_HEALTH_REGENERATE_PERCENTAGE_AMOUNT_CURRENT_HP;
            if gt regenPercent 0;
              set temp currentHealth;
              muldiv temp regenPercent 100;
              # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: ARMOR_HEALTH_REGENERATE_PERCENTAGE_AMOUNT_CURRENT_HP health increment:" temp;
              set temp2 currentHealth;
              add temp2 temp;
              # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: ARMOR_HEALTH_REGENERATE_PERCENTAGE_AMOUNT_CURRENT_HP health final:" temp2;
            end;
          end;

          armorRule.getTag temp Tag.ARMOR_HEALTH_REGENERATE_FLAT_AMOUNT;
          # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: ARMOR_HEALTH_REGENERATE_FLAT_AMOUNT health increment:" temp;
          if gt temp 0;
            add temp2 temp;
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: ARMOR_HEALTH_REGENERATE_FLAT_AMOUNT health final:" temp2;
            return;
          end;

          armorRule.getTag regenDivisor Tag.ARMOR_PSI_REGENERATE_DIVISOR;
          if gt regenDivisor 0;
            unit.Stats.getPsiSkill temp; # regeneration equals psi divided by regenDivisor;
            unit.Stats.getPsiStrength temp2;
            muldiv temp temp2 regenDivisor;
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: Psi Regenerate amount:" temp;
            set temp2 currentHealth;
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: Current health amount:" temp2;
            add temp2 temp;
            # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: Post Regenerate amount:" temp2;
            return;
          end;

          limit_upper temp2 healthCap; #set health
          # debug_log "ROSIGMA_nTU_armor_regenerates_health, offset 1: ROSIGMA_nTU_armor_regenerates_health final health regen:" temp2;
          unit.setHealth temp2;

          return;

      - new: ROSIGMA_nTU_armor_regenerates_wounds
        offset: 2
        code: |
          var int temp;
          var int temp2;
          var int regenDivisor;
          var int maxHealth;
          var int totalWounds;
          var int regenPerWound;
          var int unitFaction;
          var int woundRecovery;
          var ptr RuleArmor armorRule;

          unit.getFaction unitFaction;
          if neq side unitFaction; # don't reset on others' turns
            # debug_log "ROSIGMA_nTU_armor_regenerates_wounds, offset 1: Not the unit's turn. Aborting. side:" side;
            return;
          end;

          unit.getFatalwoundsTotal totalWounds;
          if lt totalWounds 1;
            # debug_log "ROSIGMA_nTU_armor_regenerates_wounds, offset 1: No wounds to regenerate. Aborting. temp:" temp;
            return;
          end;

          unit.getRuleArmor armorRule;
          armorRule.getTag woundRecovery Tag.ARMOR_REGENERATES_WOUNDS; # we check the armor for this tag to avoid having to cycle through items every time we damage something
          if eq woundRecovery 0;
            # debug_log "ROSIGMA_nTU_armor_regenerates_wounds, offset 1: No ARMOR_REGENERATES_WOUNDS Tag. Aborting. temp:" temp;
            return;
          end;

          armorRule.getTag regenDivisor Tag.ARMOR_PSI_REGENERATE_DIVISOR;
          if gt regenDivisor 1;
            unit.Stats.getPsiSkill temp;
            unit.Stats.getPsiStrength temp2;
            muldiv temp temp2 regenDivisor;
            add woundRecovery temp;
            # debug_log "ROSIGMA_nTU_armor_regenerates_wounds, offset 1: Wound recovery from psi:" temp;
            # debug_log "ROSIGMA_nTU_armor_regenerates_wounds, offset 1: Total wound recovery:" woundRecovery;
          end;

          armorRule.getTag regenPerWound Tag.ARMOR_HEALTH_PER_WOUND_REGENERATED;
          # debug_log "ROSIGMA_nTU_armor_regenerates_wounds, offset 1: Healing unit. Total HP regenerated per wound: regenPerWound:" regenPerWound;
          if gt regenPerWound 0; # calculate if we regenerate wounds
            set temp2 woundRecovery;
            limit_upper temp2 totalWounds; # cap the multiplier to the total number of wounds
            mul temp2 regenPerWound; # multiply the lesser of wounds to heal or total number of wounds by regeneration value per wound.
            unit.addHealth temp2;
            # debug_log "ROSIGMA_nTU_armor_regenerates_wounds, offset 1: Healing unit. Regenerated extra health due to wounds recovered: totalWounds:" temp2;
          end;

          begin;
            var int numWounds 0;
            var int healWounds woundRecovery;
            loop var i 6; # cycle through the body parts
              # debug_log "ROSIGMA_nTU_armor_regenerates_wounds, offset 1: Healing ally. Body Part Loop i#:" i;
              # debug_log "ROSIGMA_nTU_armor_regenerates_wounds, offset 1: Healing ally. Number of Heals, healWounds:" healWounds;
              unit.getFatalwounds numWounds i; # check the number of wounds in this bodypart
              # debug_log "ROSIGMA_nTU_armor_regenerates_wounds, offset 1: Healing ally. Number of wounds in bodypart, numWounds:" numWounds;
              if and gt numWounds 0 gt healWounds 0; # if there are any wounds in this body part and any heals remaining, remove as many as we can
                set temp numWounds; # save the initial number of wounds
                sub numWounds healWounds; # remove wounds equal to our heal wound count
                sub healWounds temp; # decrement the number of heals by the initial number of wounds
                limit_lower numWounds 0; # ensure wounds do not go below 0
                limit_lower healWounds 0; # ensure heals do not  go below 0
                # debug_log "ROSIGMA_nTU_armor_regenerates_wounds, offset 1: Healing ally. Remaining number of wounds in bodypart, numWounds:" numWounds;
                # debug_log "ROSIGMA_nTU_armor_regenerates_wounds, offset 1: Healing ally. Remaining number of heals, healWounds:" healWounds;
                unit.setFatalwounds i numWounds; # remove the wounds
                unit.getFatalwoundsTotal numWounds; # recalculate wounds
                # debug_log "ROSIGMA_nTU_armor_regenerates_wounds, offset 1: Healing ally. Total number of wounds remaining, numWounds:" numWounds;
              end;
            end;
          end;

          return;

    returnFromMissionUnit:
      # *** Reduces wound times for certain soldier types ***
      - new: ROSIGMA_rFMU_psi_mend_wounds
        offset: 10
        code: |
          var ptr RuleArmor armorRule;
          var int woundTimeMultiplier;

          if eq 0 recovery_time;
            # debug_log "ROSIGMA_rFMU_psi_mend_wounds, offset 1: No recovery_time:" recovery_time;
            return;
          end;

          unit.getRuleArmor armorRule;
          armorRule.getTag woundTimeMultiplier Tag.ARMOR_WOUND_TIME_MULTIPLIER;
          if eq 0 woundTimeMultiplier;
            return;
          end;

          muldiv recovery_time woundTimeMultiplier 100;
          # debug_log "ROSIGMA_rFMU_psi_mend_wounds, offset 1: recovery_time:" recovery_time;
          # debug_log "ROSIGMA_rFMU_psi_mend_wounds, offset 1: woundTimeMultiplier:" woundTimeMultiplier;
          # debug_log "ROSIGMA_rFMU_psi_mend_wounds, offset 1: New recovery_time:" recovery_time;

          return;

      - new: ROSIGMA_rFMU_clear_regeneration_vars
        offset: 1
        code: |
          var int temp;

          unit.setTag Tag.UNIT_LOWEST_HEALTH 0;
          return;

    damageUnit:
      - new: ROSIGMA_dU_armor_set_UNIT_LOWEST_HEALTH
        offset: 98
        code: |
          var int temp;
          var int currentHealth;

          unit.getHealth currentHealth;
          unit.getTag temp Tag.UNIT_LOWEST_HEALTH;
          if gt currentHealth temp;
            return;
          end;

          unit.setTag Tag.UNIT_LOWEST_HEALTH currentHealth;
          # debug_log "ROSIGMA_ndU_armor_set_UNIT_LOWEST_HEALTH, offset 98: new UNIT_LOWEST_HEALTH set for unit:" unit;
          # debug_log "ROSIGMA_ndU_armor_set_UNIT_LOWEST_HEALTH, offset 98: new UNIT_LOWEST_HEALTH set for unit, currentHealth:" currentHealth;
          return;

      - new: ROSIGMA_dU_psi_mend_wounds
        offset: 1
        code: |
          var int temp;
          var int temp2;
          var int randomNumber;
          var int attackerBravery;
          var int rulePower;
          var int targetFaction;
          var int attackerFaction;
          var int statModifier;
          var ptr RuleItem ruleItem;
          var ptr RuleArmor armorRule;

          weapon_item.getRuleItem ruleItem;
          ruleItem.getTag temp Tag.ITEM_MENDS_WOUNDS;
          if eq temp 0;
            # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: No ITEM_MENDS_WOUNDS Tag. Aborting. temp:" temp;
            return;
          end;

          if le orig_power 0;
            # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Power null. Aborting. power:" orig_power;
            return;
          end;

          unit.getRuleArmor armorRule;
          armorRule.getTag temp Tag.UNIT_TYPE_LIVING; # handle hybrid typing; if we also count as living (usually piloted vehicles), continue as normal
          if eq temp 0;
            # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Aborting. Target isn't living.";
            return;
          end;

          armorRule.getTag temp Tag.UNIT_TYPE_NULL; # we ignore null units
          if eq temp 1;
            # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Aborting. Target is a null.";
            return;
          end;

          # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Initial power:" orig_power;
          attacker.getFaction attackerFaction;
          unit.getFaction targetFaction;
          set rulePower orig_power; # power refernece
          if eq attackerFaction targetFaction; # if attacker faction = the target faction heal instead of harm

            set temp rulePower;
            div temp 4; # define the number of wounds we heal
            begin;
              var int numWounds 0;
              var int healWounds temp;
              loop var i 6; # cycle through the body parts
                # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Body Part Loop i#:" i;
                # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Number of Heals, healWounds:" healWounds;
                unit.getFatalwounds numWounds i; # check the number of wounds in this bodypart
                # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Number of wounds in bodypart, numWounds:" numWounds;
                if and gt numWounds 0 gt healWounds 0; # if there are any wounds in this body part and any heals remaining, remove as many as we can
                  set temp numWounds; # save the initial number of wounds
                  sub numWounds healWounds; # remove wounds equal to our heal wound count
                  sub healWounds temp; # decrement the number of heals by the initial number of wounds
                  limit_lower numWounds 0; # ensure wounds do not go below 0
                  limit_lower healWounds 0; # ensure heals do not  go below 0
                  # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Remaining number of wounds in bodypart, numWounds:" numWounds;
                  # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Remaining number of heals, healWounds:" healWounds;
                  unit.setFatalwounds i numWounds; # remove the wounds
                  unit.getFatalwoundsTotal numWounds; # recalculate wounds
                  # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Total number of wounds remaining, numWounds:" numWounds;
                end;
              end;
            end;

            unit.getHealthMax temp;
            ruleItem.getTag temp2 Tag.ITEM_MEND_HEAL_CAP_PERCENT;
            # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: ITEM_MEND_HEAL_CAP_PERCENT:" temp2;
            muldiv temp temp2 100;
            # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Mend wounds upper limit:" temp;
            unit.getHealth temp2;
            # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Mend wounds current health:" temp2;
            if ge temp2 temp; # we don't heal above half max HP; cancel out
              # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally, target HP already above ITEM_MEND_HEAL_CAP_PERCENT; aborting. Health, temp2:" temp2;
              battle_game.flashMessage "STR_PSI_MEND_WOUNDS_HEAL_CAP" temp;
              return;
            end;

            ruleItem.getTag statModifier Tag.ITEM_MEND_STUN_PERCENT;
            if neq statModifier 0;
              set rulePower orig_power;
              muldiv rulePower statModifier 100;
              set to_stun rulePower;
              # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Stun damage:" to_stun;
            end;

            ruleItem.getTag statModifier Tag.ITEM_MEND_ENERGY_PERCENT;
            if neq statModifier 0;
              set rulePower orig_power;
              muldiv rulePower statModifier 100;
              set to_energy rulePower;
              # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Energy damage:" to_energy;
            end;

            ruleItem.getTag statModifier Tag.ITEM_MEND_TIME_PERCENT;
            if neq statModifier 0;
              set rulePower orig_power;
              muldiv rulePower statModifier 100;
              set to_time rulePower;
              # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Time damage:" to_time;
            end;

            set rulePower orig_power;
            div rulePower 2;
            add temp2 rulePower;
            mul rulePower -1; #invert as we're healing

            if gt temp2 temp; # cap our healing
              limit_upper temp2 temp;
              unit.setHealth temp2;
              # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Healing capped at temp2% HP. temp2:" temp2;
            else;
              set to_health rulePower;
              # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally, per rulePower:" rulePower;
            end;
            return;
          end;

          ruleItem.getTag temp Tag.ITEM_MEND_HARMS_ENEMIES;
          if eq temp 0;
            # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: No ITEM_MEND_HARMS_ENEMIES Tag. Aborting. temp:" temp;
            return;
          end;

          set rulePower orig_power; #reset rulePower
          unit.Stats.getPsiSkill temp;
          unit.Stats.getPsiStrength temp2;
          muldiv temp 20 100; # replicate standard psi defense
          add temp temp2;
          sub rulePower temp;
          if le rulePower 0;
            battle_game.flashMessage "STR_PSYCHIC_TARGET_RESIST"; # let the player know the power was resisted
            # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Harming enemy. rulePower null. Aborting. rulePower:" rulePower;
            return;
          end;
          # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Harming enemy. Initial rulePower:" rulePower;
          set to_energy rulePower;
          # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Harming enemy. Energy damage:" to_energy;
          set to_stun rulePower;
          # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Harming enemy. Stun damage:" to_stun;
          set to_time rulePower;
          # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Harming enemy. Time damage:" to_time;
          set to_health rulePower;
          limit_lower to_health 0;
          # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Harming enemy. Health damage:" to_health;
          set to_wound to_health;
          div to_wound 4;
          # debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Harming enemy. Wound damage:" to_wound;

          return;
