armors:
  - type: STR_BIOMANCER
    specialWeapon: STR_MEND_WOUNDS_SPELL
    builtInWeapons:
      - STR_BIOMANCER_STAFF
#      - STR_HEALING_TOUCH

items:
  - type: STR_MEND_WOUNDS_SPELL
    hidePower: true
    weight: 0
    battleType: 1 # wanted 9 but powerRangeReduction doesn't work because there is no projectile
    hitSound: {mod: 40k, index: 743}
    hitAnimation: {mod: 40k, index: 96}
    tuAimed: 30
    accuracyAimed: 200
    accuracyMultiplier:
      flatHundred: 1.0
    # psiAttackName: STR_MEND_WOUNDS
    # LOSRequired: true
    confAimed:
      name: STR_MEND_WOUNDS_SPELL
    damageType: 1 # this and power so it runs properly
    dropoff: 0
    power: 0
    damageBonus:
      psi: 0.01
    costAimed:
      health: 20 #we regenerate
      energy: 10
      stun: 10
      morale: 10
    damageAlter:
      ResistType: 0 # SUPPORT
      RandomType: 6
      ToStun: 0
      ToHealth: 0
      ArmorEffectiveness: 0.0
      ToArmor: 0
      ToWound: 0
      ToTile: 0
      ToItem: 0
      ToMorale: 0
    recover: false
    fixedWeapon: true
    specialIconSprite: {mod: 40k, index: 105}
    specialUseEmptyHand: true
    clipSize: -1
    # targetMatrix: 5 # friendly + neutral
    powerRangeThreshold: 10 # doesn't work for psi because there is no projectile
    powerRangeReduction: 5
    maxRange: 20
    tags:
      ITEM_MENDS_WOUNDS: 1


extended:
  tags:
    RuleItem:
      ITEM_MENDS_WOUNDS: int
    RuleArmor:
      ARMOR_REGENERATES_WOUNDS: int
      ARMOR_HEALTH_PER_WOUND_REGENERATED: int

  scripts:
    newTurnUnit:
      - new: ROSIGMA_dU_armor_regenerates_wounds
        offset: 1
        code: |
          var int temp;
          var int totalWounds;
          var int regenPerWound;
          var ptr RuleArmor armorRule;


          unit.getRuleArmor armorRule;
          armorRule.getTag temp Tag.ARMOR_REGENERATES_WOUNDS; #we check the armor for this tag to avoid having to cycle through items every time we damage something

          if eq temp 0;
            #debug_log "ROSIGMA_dU_armor_regenerates_wounds, offset 1: No ARMOR_REGENERATES_WOUNDS Tag. Aborting. temp:" temp;
            return;
          end;

          unit.getFatalwoundsTotal totalWounds;

          if eq totalWounds 0;
            #debug_log "ROSIGMA_dU_armor_regenerates_wounds, offset 1: No wounds to regenerate. Aborting. temp:" temp;
            return;
          end;

          begin;
            var int numWounds 0;
            var int healWounds temp;
            loop var i 6; #cycle through the body parts
              #debug_log "ROSIGMA_dU_armor_regenerates_wounds, offset 1: Healing ally. Body Part Loop i#:" i;
              #debug_log "ROSIGMA_dU_armor_regenerates_wounds, offset 1: Healing ally. Number of Heals, healWounds:" healWounds;
              unit.getFatalwounds numWounds i; #check the number of wounds in this bodypart
              #debug_log "ROSIGMA_dU_armor_regenerates_wounds, offset 1: Healing ally. Number of wounds in bodypart, numWounds:" numWounds;
              if and gt numWounds 0 gt healWounds 0; #if there are any wounds in this body part and any heals remaining, remove as many as we can
                set temp numWounds; #save the initial number of wounds
                sub numWounds healWounds; #remove wounds equal to our heal wound count
                sub healWounds temp; #decrement the number of heals by the initial number of wounds
                limit_lower numWounds 0; #ensure wounds do not go below 0
                limit_lower healWounds 0; #ensure heals do not  go below 0
                #debug_log "ROSIGMA_dU_armor_regenerates_wounds, offset 1: Healing ally. Remaining number of wounds in bodypart, numWounds:" numWounds;
                #debug_log "ROSIGMA_dU_armor_regenerates_wounds, offset 1: Healing ally. Remaining number of heals, healWounds:" healWounds;
                unit.setFatalwounds i numWounds; #remove the wounds
                unit.getFatalwoundsTotal numWounds; #recalculate wounds
                #debug_log "ROSIGMA_dU_armor_regenerates_wounds, offset 1: Healing ally. Total number of wounds remaining, numWounds:" numWounds;
              end;
            end;
            sub totalWounds healWounds;
            #debug_log "ROSIGMA_dU_armor_regenerates_wounds, offset 1: Healing unit. Total wounds recovered: totalWounds:" totalWounds;
            limit_lower totalWounds 0;
            armorRule.getTag regenPerWound Tag.ARMOR_HEALTH_PER_WOUND_REGENERATED;
            #debug_log "ROSIGMA_dU_armor_regenerates_wounds, offset 1: Healing unit. Total HP regenerated per wound: regenPerWound:" regenPerWound;
            if eq regenPerWound 0;
              #debug_log "ROSIGMA_dU_armor_regenerates_wounds, offset 1: Healing unit. No extra regeneration per wound, aborting. regenPerWound:" regenPerWound;
              return;
            end;
            mul totalWounds regenPerWound;
            unit.addHealth totalWounds;
            #debug_log "ROSIGMA_dU_armor_regenerates_wounds, offset 1: Healing unit. Regenerated extra health due to wounds recovered: totalWounds:" totalWounds;
          end;

          return;

    damageUnit:
      - new: ROSIGMA_dU_psi_mend_wounds
        offset: 1
        code: |
          var int temp;
          var int temp2;
          var int randomNumber;
          var int attackerBravery;
          var int rulePower;
          var int targetFaction;
          var int attackerFaction;
          var ptr RuleItem ruleItem;

          weapon_item.getRuleItem ruleItem;
          ruleItem.getTag temp Tag.ITEM_MENDS_WOUNDS;

          if eq temp 0;
            #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: No ITEM_MENDS_WOUNDS Tag. Aborting. temp:" temp;
            return;
          end;

          if le orig_power 0;
            #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Power null. Aborting. power:" orig_power;
            return;
          end;

          #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Initial power:" orig_power;
          attacker.getFaction attackerFaction;
          unit.getFaction targetFaction;
          set rulePower orig_power; #power refernece
          if eq attackerFaction targetFaction; #if attacker faction = the target faction heal instead of harm

            div rulePower 2; #half power vs allies since there's no resistance to reduce its power
            set to_stun rulePower; #restoring health is tiring
            set to_energy rulePower;
            mul rulePower -1; #negative as we're healing, not harming
            #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Stamina and Stun restored, rulePower:" rulePower;
            set temp rulePower;
            div temp 4; #define the number of wounds we heal
            mul temp -1;
            begin;
              var int numWounds 0;
              var int healWounds temp;
              loop var i 6; #cycle through the body parts
                #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Body Part Loop i#:" i;
                #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Number of Heals, healWounds:" healWounds;
                unit.getFatalwounds numWounds i; #check the number of wounds in this bodypart
                #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Number of wounds in bodypart, numWounds:" numWounds;
                if and gt numWounds 0 gt healWounds 0; #if there are any wounds in this body part and any heals remaining, remove as many as we can
                  set temp numWounds; #save the initial number of wounds
                  sub numWounds healWounds; #remove wounds equal to our heal wound count
                  sub healWounds temp; #decrement the number of heals by the initial number of wounds
                  limit_lower numWounds 0; #ensure wounds do not go below 0
                  limit_lower healWounds 0; #ensure heals do not  go below 0
                  #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Remaining number of wounds in bodypart, numWounds:" numWounds;
                  #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Remaining number of heals, healWounds:" healWounds;
                  unit.setFatalwounds i numWounds; #remove the wounds
                  unit.getFatalwoundsTotal numWounds; #recalculate wounds
                  #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Total number of wounds remaining, numWounds:" numWounds;
                end;
              end;
            end;

            unit.getHealthMax temp;
            div temp 2;
            unit.getHealth temp2;
            if ge temp2 temp; #we don't heal above half max HP; cancel out
              #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally, target HP above half max; aborting. Health, temp2:" temp2;
              return;
            end;

            set rulePower orig_power;
            div rulePower 2;
            add temp2 rulePower;
            if gt temp2 temp; #cap our healing at half maximum
              limit_upper temp2 temp;
              unit.setHealth temp2;
              #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally. Healing capped at half max HP. temp2:" temp2;
            else;
              set to_health rulePower;
              #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Healing ally, per rulePower:" rulePower;
            end;
            return;
          end;

          unit.Stats.getPsiSkill temp;
          unit.Stats.getPsiStrength temp2;
          muldiv temp 20 100; #replicate standard psi defense
          add temp temp2;
          sub rulePower temp;
          if le rulePower 0;
            #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Harming enemy. rulePower null. Aborting. rulePower:" rulePower;
            return;
          end;
          #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Harming enemy. Initial rulePower:" rulePower;
          set to_health rulePower;
          set to_energy rulePower;
          set to_stun rulePower;
          #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Harming enemy. Health, Stamina and Stun damage, rulePower:" rulePower;
          set temp rulePower;
          div temp 2;
          set to_wound temp;
          #debug_log "ROSIGMA_dU_psi_mend_wounds, offset 1: Harming enemy. Wound damage, temp:" temp;

          return;