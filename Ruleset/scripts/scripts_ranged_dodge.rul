extended:
  tagsFile: Ruleset/tags_ROSIGMA.rul

  scripts:
    newTurnUnit:
      - new: ROSIGMA_nTU_dodge
        offset: -1
        code: |
          var int unitFaction;

          unit.getFaction unitFaction;
          if eq side unitFaction; # don't reset on others' turns
            unit.setTag Tag.UNIT_COUNTER_SUCCESSFUL_DODGES 0;
          end;
          return;

    hitUnit:
      - new: ROSIGMA_hU_dodge
        offset: -1
        code: |
          var int temp;
          var int temp2;
          var int dodgeChance;
          var int flightDodgeChance;
          var ptr RuleArmor targetArmor;
          var ptr RuleArmor attackerArmor;
          var ptr RuleItem damagingItem;
          var ptr RuleDamageType damageType;
          var int unitDirection;
          var int attackerDirection;
          var int counterSuccessfulDodges;
          var int maxSuccessfulDodges;
          var int dodgeFlatReduction;
          var int dodgePercentReduction;
          var int dodgeDeclines;
          var int dodgeArmorPercentReduction;

          unit.getTag temp Tag.UNIT_MARKED_FOR_EXECUTION; #we're targeted for Commissar execution
          if eq temp 1;
            # debug_log "ROSIGMA_hU_dodge Scripts; damageUnit, offset -1: Aborting. Victim is targeted for commissar execution.";
            return power part side;
          end;

          # don't dodge on melee and psi
          if or eq battle_action BA_HIT eq battle_action BA_PANIC eq battle_action BA_MINDCONTROL eq battle_action BA_USE;
            # debug_log "hitUnit | dodge scripts | battle_action undodgeable. Aborting:";
            return power part side;
          end;

          unit.getTag temp Tag.DugInBonus;
          if eq temp 1; # don't bother if we don't have the dug-in bonus
            # debug_log "hitUnit | dodge scripts | unit dug in; cannot dodge. Aborting:" temp;
            return power part side;
          end;

          damaging_item.getRuleItem damagingItem;
          damagingItem.getDamageType damageType;
          damageType.getResistType temp;

          # don't dodge support skills
          # terrain artillery shell (terror city map) do damageType 0
          if or eq temp 0 eq temp 10; # Support or Impact (IG Support, non-IG drop deploy) damage type
            # debug_log "hitUnit | dodge scripts | damage type undodgeable. Aborting:" temp;
            return power part side;
          end;

          damageType.isAreaOfEffect temp;
          if gt temp 0;
            # debug_log "hitUnit | dodge scripts | Attack is an aoe and undodgeable. Aborting:";
            return power part side;
          end;

          unit.getTag temp Tag.IS_MARKERLIT;
          attacker.getFaction temp2;

          sub temp 1;
          if eq temp temp2;
            # debug_log "hitUnit | dodge scripts | Unit is Markerlit and cannot dodge. Aborting:";
            return power part side;
          end;

          # define defender armor values
          unit.getRuleArmor targetArmor;
          targetArmor.getTag dodgeChance Tag.DODGE_CHANCE;
          targetArmor.getTag flightDodgeChance Tag.FLIGHT_DODGE_CHANCE;
          # define attacker armor values
          attacker.getRuleArmor attackerArmor;
          attackerArmor.getTag dodgeArmorPercentReduction Tag.ARMOR_DODGE_CHANCE_PERCENT_REDUCTION;
          set temp dodgeArmorPercentReduction;
          add temp dodgeChance;
          add temp flightDodgeChance;
          if le temp 0;
            # debug_log "hitUnit | dodge scripts | no dodge or dodge mitigation chance detected. Aborting:" temp;
            return power part side;
          end;

          # don't dodge when stunned
          unit.getHealth temp;
          unit.getStun temp2;

          if ge temp2 temp;
            # debug_log "hitUnit | dodge scripts | target is stunned and cannot dodge. Aborting:";
            return power part side;
          end;

          # don't dodge when counter has reached max;
          unit.getTag counterSuccessfulDodges Tag.UNIT_COUNTER_SUCCESSFUL_DODGES;
          targetArmor.getTag maxSuccessfulDodges Tag.ARMOR_MAX_SUCCESSFUL_DODGES;
          damagingItem.getTag dodgeFlatReduction Tag.DODGE_CHANCE_FLAT_REDUCTION;
          damagingItem.getTag dodgePercentReduction Tag.DODGE_CHANCE_PERCENT_REDUCTION;

          if gt dodgeArmorPercentReduction dodgePercentReduction; # use the armor dodge mitigation if it's higher
            set dodgePercentReduction dodgeArmorPercentReduction;
          end;

          attackerArmor.getTag temp Tag.ARMOR_DODGE_CHANCE_FLAT_REDUCTION;
          if gt temp dodgeFlatReduction; # use the armor dodge mitigation if it's higher
            set dodgeFlatReduction temp;
          end;

          # debug_log "hitUnit | dodge scripts | dodgePercentReduction:" dodgePercentReduction;
          # debug_log "hitUnit | dodge scripts | dodgeFlatReduction:" dodgeFlatReduction;
          if or ge dodgeFlatReduction 100 ge dodgePercentReduction 100; # these weapons are undodgable
            # debug_log "hitUnit | dodgeFlatReduction or dodgePercentReduction 100 or greater, Aborting." dodgePercentReduction;
            return power part side;
          end;

          # assume that setting it has been forgotten
          if eq maxSuccessfulDodges 0;
            set maxSuccessfulDodges 1;
          end;

          targetArmor.getTag dodgeDeclines Tag.ARMOR_DODGE_CHANCE_DECLINE_PER_SUCCESS;
          if gt dodgeDeclines 0;
            set maxSuccessfulDodges 999; # effectively we ignore max dodges; we're limited by our declining chance of dodge success on subsequent hits instead
          end;

          if ge counterSuccessfulDodges maxSuccessfulDodges;
            # debug_log "hitUnit | dodge scripts | Max successful dodges exceeded. Aborting:" counterSuccessfulDodges;
            return power part side;
          end;

          if gt flightDodgeChance 0;
            unit.isFlying temp;
            if eq temp 1;
              set dodgeChance flightDodgeChance;
            end;
          end;

          # reduce the dodge chance by the dodgeFlatReduction amount
          sub dodgeChance dodgeFlatReduction;
          mul dodgeDeclines counterSuccessfulDodges; # reduce dodge chance by ARMOR_DODGE_CHANCE_DECLINE_PER_SUCCESS times number of successful dodges.
          sub dodgeChance dodgeDeclines;
          if le dodgeChance 0;
            # debug_log "Dodge chance reduced to 0 by dodgeFlatReduction property.";
            return power part side;
          end;

          # invert the dodgePercentReduction and multiply with the dodgeChance to get a % chance reduction
          sub dodgePercentReduction 100;
          mul dodgePercentReduction -1;
          muldiv dodgeChance dodgePercentReduction 100;

          unit.getDirection unitDirection; # {0-7}
          attacker.getDirection attackerDirection;
          add attackerDirection 4; # Offset for attacker so A+D "face the same direction"
          mod attackerDirection 8; # (7+4) % 8 = 3  # in other words limit to {0-7}
          sub unitDirection attackerDirection; # check if both face the same direction
          abs unitDirection; # range should be outside of {-1, 0, +1} (extended front) to take effect

          if or eq unitDirection 2 eq unitDirection 3; # extended side hit
            muldiv dodgeChance 2 3; # multiply chance by 66 %
          else eq unitDirection 4; # rear hit
            muldiv dodgeChance 1 3; # multiply chance by 33 %
          end;

          battle_game.randomRange temp 1 100;
          # debug_log "randomNumber" temp;
          # debug_log "dodgeChance" dodgeChance;

          if gt temp dodgeChance;
            # debug_log "hitUnit | dodge scripts | Target failed to dodge. Aborting.";
            return power part side;
          end;

          # debug_log "miss";
          battle_game.getAnimFrame temp;
          unit.setTag Tag.LAST_DODGE_FRAME temp;
          unit.setTag Tag.DODGED 1;
          add counterSuccessfulDodges 1;
          unit.setTag Tag.UNIT_COUNTER_SUCCESSFUL_DODGES counterSuccessfulDodges;

          battle_game.flashMessage "STR_SCRIPT_DODGED";
          return 0 part side;

    recolorUnitSprite:
      - new: ROSIGMA_rUS_dodge
        offset: -1
        code: |
          var int temp;

          # add sprite_index sprite_offset;

          unit.getTag temp Tag.LAST_DODGE_FRAME;
          if gt temp 3;
            sub temp anim_frame;
            if gt temp -2; # only 3 frames after hit have changed color
              set_color new_pixel COLOR_X1_BLUE1;
            end;
          end;

          unit.getRecolor new_pixel;
          add_burn_shade new_pixel burn shade;
          return new_pixel;