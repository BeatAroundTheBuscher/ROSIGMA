items:
  - &STR_GRAV_AMMO_BONUS_DAMAGE_TEMPLATE
    type: STR_STUN_BOMB
    tags:
      GravPercentage: 5

  - type: STR_GRAVGUN_MC
    refNode: *STR_GRAV_AMMO_BONUS_DAMAGE_TEMPLATE
    tags:
      GravPercentage: 6

  - type: AUX_CENTURION_GRAVGUN
    refNode: *STR_GRAV_AMMO_BONUS_DAMAGE_TEMPLATE
    tags:
      GravPercentage: 7

  - type: STR_GRAVGUN_AOE_AMMO
    refNode: *STR_GRAV_AMMO_BONUS_DAMAGE_TEMPLATE
    tags:
      GravPercentage: 5

  - type: STR_GRAVGUN_AOE_AMMO_SHOTGUN
    refNode: *STR_GRAV_AMMO_BONUS_DAMAGE_TEMPLATE
    tags:
      GravPercentage: 5

  - type: STR_GRAVPISTOL_AMMO
    refNode: *STR_GRAV_AMMO_BONUS_DAMAGE_TEMPLATE
    tags:
      GravPercentage: 5

  - type: STR_GRAVCANNON_AMMO
    refNode: *STR_GRAV_AMMO_BONUS_DAMAGE_TEMPLATE
    tags:
      GravPercentage: 7

  - type: STR_BLIGHT_HAULER_GRAVCANNON
    tags:
      GravPercentage: 7


extended:
  tagsFile: Ruleset/tags_ROSIGMA.rul
  tags:
    RuleItem:
      GravPercentage: int  # can be on ammo or weapon, weapon overwrites ammo
    RuleArmor:
      UNIT_SIZE: int #size modifier; mostly used as multiplier for grav weapons; if undefined defaults to 100. Tiny Enemies (Nurgling, Scarab): 25 Small Enemies (Squat, Plague Toad, Plague Flies): 50 Large Enemies (Space Marine, Ogryn): 150 Huge Enemies (Terminators, Saturnine): 200

  scripts:
    damageUnit:
      - new: ROSIGMA_dU_grav_damage_bonus
        offset: 1
        code: |
          var int temp;
          var int temp2;
          var int armor;
          var int multiplier;
          var int percentage;
          var int weaponpercentage;
          var int ammopercentage;
          var ptre BattleItem ammo;
          var ptr RuleArmor rArmor;
          var ptr RuleDamageType damageType;
          var ptr RuleItem damagingItem;

          set temp to_health;
          if lt temp 1; # if no damage gets through the shield, abort; sanity check.
            # debug_log "ROSIGMA_dU_grav_damage_bonus; offset 1: Grav weapon failed to penetrate the target's shields. Aborting.";
            return;
          end;

          damaging_item.getAmmoItem ammo;

          ammo.getTag ammopercentage Tag.GravPercentage;
          damaging_item.getTag weaponpercentage Tag.GravPercentage;
          if gt ammopercentage 0;
            set percentage ammopercentage;
          end;
          if gt weaponpercentage percentage; # use highest of weapon and ammo
            set percentage weaponpercentage;
          end;

          if lt percentage 0; #continue only if we have a %
            return;
          end;
          # debug_log "ROSIGMA_dU_grav_damage_bonus; offset 1: Grav final armor percentage:" percentage;

          unit.getArmor temp SIDE_FRONT;
          add armor temp;
          unit.getArmor temp SIDE_LEFT;
          add armor temp;
          unit.getArmor temp SIDE_REAR;
          add armor temp;
          unit.getArmor temp SIDE_RIGHT;
          add armor temp;
          unit.getArmor temp SIDE_UNDER;
          add armor temp;
          muldiv armor percentage 100;
          # debug_log "ROSIGMA_dU_grav_damage_bonus; offset 1: Grav damage bonus post-armor:" armor;

          unit.getRuleArmor rArmor; #handle size damage damage multiplier
          rArmor.getTag temp Tag.UNIT_SIZE;
          if eq temp 0; #if we don't have this value, assume standard size
            set temp 100;
          end;
          # debug_log "ROSIGMA_dU_grav_damage_bonus; offset 1: Grav damage bonus post-size tag:" armor;
          add multiplier temp;

          damaging_item.getRuleItem damagingItem; #handle large unit damage multiplier
          damagingItem.getDamageType damageType;
          damageType.isAreaOfEffect temp;
          if lt temp 1;
            rArmor.getSize temp; # increase multiplier by 150 vs 2x2 if we're not AoE
            if gt temp 1;
              add multiplier 150;
            end;
          else;
            rArmor.getSize temp; # apply an offsetting coefficient if the damage is AoE and we're a 2x2 unit
            if gt temp 1;
              muldiv to_health 80 100;
            end;
          end;
          # debug_log "ROSIGMA_dU_grav_damage_bonus; offset 1: Grav damage bonus post-2x2:" armor;

          limit_upper multiplier 300;

          muldiv armor multiplier 100;

          add to_health armor;

          return;

