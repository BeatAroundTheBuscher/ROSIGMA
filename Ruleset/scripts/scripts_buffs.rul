extended:
  tags:
    RuleItem:
      ITEM_DAMAGE_PERCENT_VS_MECHANICAL: int
      ITEM_IS_BUFF_WEAPON: int

  scripts:
    hitUnit:
      - new: ROSIGMA_hU_buffs
        offset: 1
        code: |
          var int temp;
          var int temp2;
          var int faction;
          var ptr RuleArmor armorRule;

          #debug_log "ROSIGMA_hU_buffs Scripts; damageUnit, offset 1: attacker:" attacker;
          #debug_log "ROSIGMA_hU_buffs Scripts; damageUnit, offset 1: weapon_item:" weapon_item;
          #debug_log "ROSIGMA_hU_buffs Scripts; damageUnit, offset 1: unit:" unit;
          #debug_log "ROSIGMA_hU_buffs Scripts; damageUnit, offset 1: power:" power;

          weapon_item.getTag temp Tag.ITEM_IS_BUFF_WEAPON;
          if le temp 0; #if we're not a buff weapon, pass
            #debug_log "ROSIGMA_hU_buffs Scripts; damageUnit, offset 1: Aborting. Attacking item is not a buff item. ITEM_IS_BUFF_WEAPON:" temp;
            return power part side;
          end;

          if eq attacker unit;
            #debug_log "ROSIGMA_hU_buffs Scripts; damageUnit, offset 1: Aborting. Attacker is also target. Hit power set to 0" faction;
            return 0 part side;
          end;

          attacker.getFaction faction; #the target must be from the buffer's faction
          unit.getFaction temp;
          if neq faction temp;
            #debug_log "ROSIGMA_hU_buffs Scripts; damageUnit, offset 1: Aborting. Attacker isn't player faction. Hit power set to 0" faction;
            return 0 part side;
          end;

          unit.getRuleArmor armorRule;
          armorRule.getTag temp Tag.UNIT_TYPE_MECHANICAL;
          if eq temp 1; #for handling mechanical units
            armorRule.getTag temp Tag.UNIT_TYPE_LIVING; #handle hybrid typing; if we also count as living (usually piloted vehicles), continue as normal
            if eq temp 0;
              weapon_item.getTag temp Tag.ITEM_DAMAGE_PERCENT_VS_MECHANICAL;
              muldiv power temp 100;
              #debug_log "ROSIGMA_hU_buffs Scripts; damageUnit, offset 1: Target is mechanical. ITEM_DAMAGE_PERCENT_VS_MECHANICAL:" temp;
              #debug_log "ROSIGMA_hU_buffs Scripts; damageUnit, offset 1: Target is mechanical. Modified power:" power;
            end;
          end;

          armorRule.getSize temp;
          if eq temp 2; #for handling mechanical units
            muldiv power 25 100;
            #debug_log "ROSIGMA_hU_buffs Scripts; damageUnit, offset 1: Target is large. Modified power:" power;
          end;

          #debug_log "ROSIGMA_hU_buffs Scripts; damageUnit, offset 1: Buff item + attacker and target faction matches." faction;
          return power part side;