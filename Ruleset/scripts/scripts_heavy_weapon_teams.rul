## Contributed by JuicyGiblets

extended:
  tags:
    RuleItem:
      ITEM_HAS_BIPOD: int
      ITEM_IS_TOOL: int
    BattleUnit:
      UNIT_ENERGY_BEFORE_DEPLOYED: int
      UNIT_IS_DEPLOYED: int
      UNIT_GOT_TOOL_XP: int

  scripts:
    accuracyMultiplierBonusStats: # set accuracy depending on deployment status
      - new: ROSIGMA_aMBS_heavy_weapons_team
        offset: 1
        code: |
          var int deploy;
          var int bipod;
          var int weight;
          var int strength;

          weapon.getTag bipod Tag.ITEM_HAS_BIPOD;
          unit.getTag deploy Tag.UNIT_IS_DEPLOYED;
          weapon.getTotalWeight weight;
          unit.Stats.getStrength strength;

          # if bipod is not deployed and wielder has not enough strength
          if and eq bipod 1 eq deploy 0 lt strength weight;
            set bonus 0;
          end;

          return bonus;

    tryMeleeAttackUnit: # toolkit can only hit target with bipod
      - new: ROSIGMA_tMAU_heavy_weapons_team
        offset: 1
        code: |
          var ptr BattleItem bipodItem;
          var int temp;

          item.getTag temp Tag.ITEM_IS_TOOL;
          if eq temp 0;
            return melee_attack_success; # no tool used
          end;

          victim.getRightHandWeapon bipodItem;
          bipodItem.getTag temp Tag.ITEM_HAS_BIPOD;

          if neq temp 1;
            victim.getLeftHandWeapon bipodItem;
            bipodItem.getTag temp Tag.ITEM_HAS_BIPOD;
          end;

          if eq temp 0;
            return 0; # tool used but no bipod to target
          end;

          # valid tool item and target
          return 200; # always hit

    hitUnit:
      - new: ROSIGMA_hU_heavy_weapons_team
        offset: 1 # Deploy/Undeploy
        code: |
          var ptr BattleItem weaponBipod;
          var int temp;
          var int deploy;
          var int weight;

          weapon_item.getTag temp Tag.ITEM_IS_TOOL;
          if neq temp 1;
            return power part side; # don't need to check for tools anymore
          else;
            set power 0; # tool isn't supposed to do any damage
          end;

          unit.getRightHandWeapon weaponBipod;
          weaponBipod.getTag temp Tag.ITEM_HAS_BIPOD;
          if eq temp 1;
            weaponBipod.getTotalWeight weight;
          end;

          unit.getLeftHandWeapon weaponBipod;
          weaponBipod.getTag temp Tag.ITEM_HAS_BIPOD;
          if eq temp 1;
            weaponBipod.getTotalWeight temp; # weight2
          end;

          if gt temp weight;
            set weight temp; # use greater weight if two bipod weapons are used
          end;

          if eq weight 0;
            return power part side; # no bipod weapon found
          end;

          unit.Stats.getStrength temp;

          if ge temp weight;
            # it's possible that something weird happens, when the weapon is swapped
            unit.setTag Tag.UNIT_IS_DEPLOYED 0; # if weight is okay, unit doesn't have to be deployed
            unit.setTag Tag.UNIT_ENERGY_BEFORE_DEPLOYED 0;
            return power part side; # unit is strong enough, doesn't need support
          end;

          unit.getTag temp Tag.UNIT_IS_DEPLOYED;
          # unit.isKneeled temp; # it's not really necessary for the target to kneel first

          if and eq temp 0; # if not deployed
            unit.getEnergy temp;
            unit.setTag Tag.UNIT_ENERGY_BEFORE_DEPLOYED temp; # save energy
            unit.setTag Tag.UNIT_IS_DEPLOYED 1;
            unit.setEnergy 0; # should be set to 5 (wiggle room) on newTurn only
            attacker.setTag Tag.UNIT_GOT_TOOL_XP 1;
          else; # undeploy
            unit.getTag temp Tag.UNIT_ENERGY_BEFORE_DEPLOYED;
            unit.setEnergy temp;
            unit.setTag Tag.UNIT_ENERGY_BEFORE_DEPLOYED 0;
            unit.setTag Tag.UNIT_IS_DEPLOYED 0;
            attacker.setTag Tag.UNIT_GOT_TOOL_XP 1;
          end;

          return power part side;

    healUnit: # don't let deployed soldiers be stimmed up
      - new: ROSIGMA_healU_heavy_weapons_team
        offset: 1
        code: |
          var int deployed;

          target.getTag deployed Tag.UNIT_IS_DEPLOYED;

          if eq deployed 1;
            set energy_recovery 0;
          end;

          return;

    newTurnUnit:
      - new: ROSIGMA_nTU_heavy_weapons_team
        offset: 1
        code: |
          var ptr BattleItem weaponBipod;
          var int temp;
          var int deploy;
          var int weight;
          var int kneeling;

          # second half; could be in its own offset after this script
          var int energyrecovered;
          var int maxStat;
          var int percentStatLost;

          unit.getRightHandWeapon weaponBipod;
          weaponBipod.getTag temp Tag.ITEM_HAS_BIPOD;
          if eq temp 1;
            weaponBipod.getTotalWeight weight;
          end;

          unit.getLeftHandWeapon weaponBipod;
          weaponBipod.getTag temp Tag.ITEM_HAS_BIPOD;
          if eq temp 1;
            weaponBipod.getTotalWeight temp; # weight2
          end;

          if gt temp weight;
            set weight temp;
          end;

          unit.Stats.getStrength temp;

          if ge temp weight;
            # it's possible that something weird happens, when the weapon is swapped
            unit.setTag Tag.UNIT_IS_DEPLOYED 0; # if weight is okay, unit doesn't have to be deployed
            unit.setTag Tag.UNIT_ENERGY_BEFORE_DEPLOYED 0;
            return; # unit is strong enough, doesn't need support
          end;

          unit.getTag deploy Tag.UNIT_IS_DEPLOYED;
          unit.isKneeled temp;

          # FACTION_HOSTILE is okay as this allows the soldier to react on enemies' turn
          if and eq deploy 0 eq side FACTION_HOSTILE eq temp 1; # deploying # 'lt temp weight 0' is not neccessary
            unit.setTag Tag.UNIT_IS_DEPLOYED 1;
          end;
          if and eq deploy 1 eq side FACTION_HOSTILE eq temp 0;
            unit.setTag Tag.UNIT_IS_DEPLOYED 0;
          end;

          unit.getTag deploy Tag.UNIT_IS_DEPLOYED;

          if and eq deploy 1 eq side FACTION_PLAYER; # energy recovery on player's turn # but only relevant on HWT use
            unit.getEnergy energyrecovered;
            unit.getTag deploy Tag.UNIT_ENERGY_BEFORE_DEPLOYED;
            add deploy energyrecovered;
            unit.setEnergy deploy; # add previous energy on top


            # modified version of 40k newTurnUnit offset: 10
            unit.getTimeUnits percentStatLost;
            unit.getTimeUnitsMax maxStat;
            sub percentStatLost maxStat;
            muldiv percentStatLost -100 maxStat;

            if neq 0 kneeling;
              div percentStatLost 2;
            end;

            unit.getEnergyMax maxStat;
            sub percentStatLost 100;
            mul percentStatLost -1;
            muldiv maxStat percentStatLost 100;

            unit.getEnergy percentStatLost;
            limit_upper percentStatLost maxStat;
            unit.setEnergy percentStatLost;

            unit.setTag Tag.UNIT_ENERGY_BEFORE_DEPLOYED percentStatLost;
            unit.setEnergy 5;
          end;

          return;

    returnFromMissionUnit: # rise secondary stats when supporting a soldier
      - new: ROSIGMA_rFMU_heavy_weapons_team
        offset: 1
        code: |
          var int statCurrent;
          var int statCap;
          var int randomNumber;
          var int temp;
          var ptr RuleSoldier ruleSoldier;
          var int toolsXP;

          unit.getTag toolsXP Tag.UNIT_GOT_TOOL_XP;

          if eq toolsXP 1;
            soldier.getRuleSoldier ruleSoldier;

            ruleSoldier.StatsCap.getTimeUnits statCap;
            soldier.Stats.getTimeUnits statCurrent;
            battle_game.randomRange randomNumber 0 2;
            set temp statCap;
            sub temp statCurrent;
            div temp 10;
            add statCurrent randomNumber;
            add statCurrent temp;
            if gt statCurrent statCap;
              soldier.Stats.setTimeUnits statCap;
            else;
              soldier.Stats.setTimeUnits statCurrent;
            end;

            ruleSoldier.StatsCap.getHealth statCap;
            soldier.Stats.getHealth statCurrent;
            battle_game.randomRange randomNumber 0 2;
            set temp statCap;
            sub temp statCurrent;
            div temp 10;
            add statCurrent randomNumber;
            add statCurrent temp;
            if gt statCurrent statCap;
              soldier.Stats.setHealth statCap;
            else;
              soldier.Stats.setHealth statCurrent;
            end;

            ruleSoldier.StatsCap.getStrength statCap;
            soldier.Stats.getStrength statCurrent;
            battle_game.randomRange randomNumber 0 2;
            set temp statCap;
            sub temp statCurrent;
            div temp 10;
            add statCurrent randomNumber;
            add statCurrent temp;
            if gt statCurrent statCap;
              soldier.Stats.setStrength statCap;
            else;
              soldier.Stats.setStrength statCurrent;
            end;

            ruleSoldier.StatsCap.getStamina statCap;
            soldier.Stats.getStamina statCurrent;
            battle_game.randomRange randomNumber 0 2;
            set temp statCap;
            sub temp statCurrent;
            div temp 10;
            add statCurrent randomNumber;
            add statCurrent temp;
            if gt statCurrent statCap;
              soldier.Stats.setStamina statCap;
            else;
              soldier.Stats.setStamina statCurrent;
            end;

          end;

          return;



