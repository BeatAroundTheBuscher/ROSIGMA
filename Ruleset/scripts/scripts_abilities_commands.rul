# Check Numbers
# Fix Bayonets - Melee Accuracy increased by 20 % and Damage increased by 20 %
# Blitzkrieg - Double Reaction Score = less enemy reactions but once they react they will spend all possible TUs
# Hunker Down - Incoming Damage reduced by 20% (reduced by 50 % when kneeling)
# Firing Line - TUs are partially returned for another volley (only work when hitting?)
# Rally - Restore Morale if everything goes to shit (applied on next turn)

extended:
  tags:
    BattleGame:
      TURN_ACTIVE_COMMAND: int
      CHOICE_ACTIVE_COMMAND: int
      COMMAND_POINTS: int
      NUMBER_SOLDIERS: int
    RuleSkill:
      SKILL_COMMAND_ID: int
    RuleSoldier:
      SOLDIER_COMMAND_POINTS: int


  scripts:
    createUnit:
    - offset: 1 
      code: |
        var int temp;
        var int rank;
        var int commandPoints;
        var ptr RuleSoldier rSoldier;

        unit.getFaction temp;
        if neq temp FACTION_PLAYER;
          return;
        end;

        unit.getRuleSoldier rSoldier;

        if eq rSoldier null;
          return;
        end;

        unit.getRank rank;
        add rank 1;
        rSoldier.getTag commandPoints Tag.SOLDIER_COMMAND_POINTS;
        mul commandPoints rank;
        battle_game.getTag temp Tag.COMMAND_POINTS;
        add temp commandPoints;
        battle_game.setTag Tag.COMMAND_POINTS temp;

        battle_game.getTag temp Tag.NUMBER_SOLDIERS;
        add temp 1;
        battle_game.setTag Tag.NUMBER_SOLDIERS temp;

        return;

    skillUseUnit:
    - offset: 1 
      code: |
        var int temp1;
        var int temp2;
        var int newCommand;
        var int currentTurn;
        var int lastCommand;
        var int lastTurn;
        
        skill.getTag newCommand Tag.SKILL_COMMAND_ID;
        if eq newCommand 0;
          return;
        end;

        battle_game.getTurn currentTurn;

        battle_game.getTag lastCommand Tag.CHOICE_ACTIVE_COMMAND;
        battle_game.getTag lastTurn Tag.TURN_ACTIVE_COMMAND;

        if eq newCommand 1;
          battle_game.getTag temp1 Tag.COMMAND_POINTS;
          battle_game.getTag temp2 Tag.NUMBER_SOLDIERS;

          if eq currentTurn lastTurn; # no commands issued this turn yet
            if eq lastCommand 2;
              battle_game.flashLongMessage "STR_SCRIPT_IG_COMMAND_FIX_BAYONETS" temp1 temp2;
            end;
            if eq lastCommand 3;
              battle_game.flashLongMessage "STR_SCRIPT_IG_COMMAND_BLITZKRIEG" temp1 temp2;
            end;
            if eq lastCommand 4;
              battle_game.flashLongMessage "STR_SCRIPT_IG_COMMAND_HUNKER_DOWN" temp1 temp2;
            end;
          else;
            battle_game.flashLongMessage "STR_SCRIPT_IG_COMMAND_NO_COMMAND" temp1 temp2;
          end;

          return;
        end;

        if neq currentTurn lastTurn; # no commands issued this turn yet
          battle_game.getTag temp1 Tag.COMMAND_POINTS;
          battle_game.getTag temp2 Tag.NUMBER_SOLDIERS;
          mul temp2 4;
          sub temp1 temp2;
          if lt temp1 0;
            battle_game.getTag temp1 Tag.COMMAND_POINTS;
            battle_game.flashLongMessage "STR_SCRIPT_IG_COMMAND_NOT_ENOUGH_CP" temp1 temp2;
            return;            
          end;

          battle_game.setTag Tag.COMMAND_POINTS temp1;
          # debug_log "Remaining Command Points" temp1;

          if eq newCommand 2;
            battle_game.flashLongMessage "STR_FIX_BAYONETS";
          end;
          if eq newCommand 3;
            battle_game.flashLongMessage "STR_BLITZKRIEG";
          end;
          if eq newCommand 4;
            battle_game.flashLongMessage "STR_HUNKER_DOWN";
          end;

          battle_game.setTag Tag.TURN_ACTIVE_COMMAND currentTurn;
          # debug_log "skill TURN_ACTIVE_COMMAND" currentTurn;

          battle_game.setTag Tag.CHOICE_ACTIVE_COMMAND newCommand;
          # debug_log "skill CHOICE_ACTIVE_COMMAND" newCommand;
        else;
            battle_game.flashLongMessage "STR_SCRIPT_IG_COMMAND_ALREADY_ISSUED";        
        end;          
        
        return;
      
    hitUnit: 
      - offset: 10 # 1 - Fix Bayonets
        code: |
          var int temp;
          var int temp2;

          battle_game.getTag temp Tag.TURN_ACTIVE_COMMAND;
          # debug_log "TURN_ACTIVE_COMMAND" temp;
          battle_game.getTurn temp2;
          if neq temp temp2;
            return power part side;
          end;

          battle_game.getTag temp Tag.CHOICE_ACTIVE_COMMAND;
          # debug_log "CHOICE_ACTIVE_COMMAND" temp;
          if neq temp 1;
            return power part side;
          end;

          if neq battle_action BA_HIT;
            return power part side;
          end;

          # debug_log "hitUnit:10 before power" power;
          set temp power;
          mul temp 6; # 20 % boost
          div temp 5;

          # debug_log "hitUnit:10 after power" temp;
          return temp part side;

      - offset: 30 # 3 - Hunker Down 
        code: |
          var int temp;
          var int temp2;

          battle_game.getTag temp Tag.TURN_ACTIVE_COMMAND;
          battle_game.getTurn temp2;
          if neq temp temp2;
            return power part side;
          end;

          battle_game.getTag temp Tag.CHOICE_ACTIVE_COMMAND;
          if neq temp 3;
            return power part side;
          end;

          unit.getFaction temp;
          if neq temp FACTION_PLAYER;
            return power part side;
          end;

          # debug_log "hitUnit:30 before power" power;
          set temp power;

          unit.isKneeled temp2;
          if eq temp2 1;
            div temp 2;
          else;
            mul temp 4;
            div temp 5;
          end;
          # debug_log "hitUnit:30 after power" temp;

          return temp part side;

    tryMeleeAttackItem: # meleeMultiplierBonusStats would have been preferable not has no battle_game
      - offset: 10  # 1 - Fix Bayonets
        code: |
          var int temp;
          var int temp2;

          battle_game.getTag temp Tag.TURN_ACTIVE_COMMAND;
          battle_game.getTurn temp2;
          if neq temp temp2;
            return melee_attack_success;
          end;

          battle_game.getTag temp Tag.CHOICE_ACTIVE_COMMAND;
          if neq temp 1;
            return melee_attack_success;
          end;

          # debug_log "tryMeleeAttackUnit: 10 before accuracy" melee_attack_success;
          set temp attack_strength;
          mul temp 6; # 20 % boost
          div temp 5;
          sub temp attack_strength; # difference

          set temp2 melee_attack_success;
          add temp2 temp;

          # debug_log "tryMeleeAttackUnit: 10 after accuracy" temp2;
          return temp2;

    reactionUnitAction: 
      - offset: 20 # 2 - Blitzkrieg
        code: |
          var int friendyReactionScore;
          var int enemyReactionScore;

          var ptr RuleItem ruleItem;
          var int temp;
          var int temp2;

          action_unit.getFaction temp;
          if neq temp FACTION_PLAYER;
            return reaction_chance;
          end;

          battle_game.getTag temp Tag.TURN_ACTIVE_COMMAND;
          battle_game.getTurn temp2;
          if neq temp temp2;
            return reaction_chance;
          end;

          battle_game.getTag temp Tag.CHOICE_ACTIVE_COMMAND;
          if neq temp 2;
            return reaction_chance;
          end;


          action_unit.Stats.getReactions friendyReactionScore;
          action_unit.getTimeUnits temp;
          mul friendyReactionScore temp;
          action_unit.getTimeUnitsMax temp;
          div friendyReactionScore temp;

          mul friendyReactionScore 2;
          add friendyReactionScore 50;

          reaction_unit.Stats.getReactions enemyReactionScore;
          reaction_unit.getTimeUnits temp;
          mul enemyReactionScore temp;
          reaction_unit.getTimeUnitsMax temp;
          div enemyReactionScore temp;

          # debug_log "friendyReactionScore" friendyReactionScore;
          # debug_log "enemyReactionScore" enemyReactionScore;

          if gt friendyReactionScore enemyReactionScore;
            return 0;
          end;




          return reaction_chance; # always 100?

      - offset: 21
        code: |
          # debug_log "reactionUnitAction";
          ## debug_log "action_target" action_target;
          ## debug_log "action_unit" action_unit;
          ## debug_log "arc_to_action_unit" arc_to_action_unit;
          ## debug_log "battle_action" battle_action;
          ## debug_log "distance" distance;
          ## debug_log "move" move;
          ## debug_log "reaction_battle_action" reaction_battle_action;
          # debug_log "reaction_chance" reaction_chance;
          # debug_log "reaction_unit" reaction_unit;
          ## debug_log "reaction_weapon" reaction_weapon;
          ## debug_log "weapon" weapon;

          return reaction_chance;

    reactionUnitReaction: 
      - offset: 21
        code: |
          # debug_log "reactionUnitReaction";
          ## debug_log "action_target" action_target;
          ## debug_log "action_unit" action_unit;
          ## debug_log "arc_to_action_unit" arc_to_action_unit;
          ## debug_log "battle_action" battle_action;
          ## debug_log "distance" distance;
          ## debug_log "move" move;
          ## debug_log "reaction_battle_action" reaction_battle_action;
          # debug_log "reaction_chance" reaction_chance;
          # debug_log "reaction_unit" reaction_unit;
          ## debug_log "reaction_weapon" reaction_weapon;
          ## debug_log "weapon" weapon;
          return reaction_chance;


    reactionWeaponAction:
      - offset: 21
        code: |
          # debug_log "reactionWeaponAction";
          ## debug_log "action_target" action_target;
          ## debug_log "action_unit" action_unit;
          ## debug_log "arc_to_action_unit" arc_to_action_unit;
          ## debug_log "battle_action" battle_action;
          ## debug_log "distance" distance;
          ## debug_log "move" move;
          ## debug_log "reaction_battle_action" reaction_battle_action;
          # debug_log "reaction_chance" reaction_chance;
          ## debug_log "reaction_unit" reaction_unit;
          ## debug_log "reaction_weapon" reaction_weapon;
          ## debug_log "weapon" weapon;
          
          return reaction_chance;