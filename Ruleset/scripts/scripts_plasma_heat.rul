# https://openxcom.org/forum/index.php/topic,8704.msg133355.html#msg133355

extended:
  tags:
    RuleItem:
      ITEM_HEAT_MAX_LEVEL: int
      ITEM_HEAT_DISSIPATION_PER_TURN: int
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: int
      ITEM_AUTO_POWER_BONUS: int
      ITEM_SNAP_POWER_BONUS: int
      ITEM_AIMED_POWER_BONUS: int
      ITEM_MELEE_POWER_BONUS: int
    BattleItem:
      ITEM_HEAT_CURRENT_LEVEL: int
      ITEM_HEAT_PREVIOUS_AMMO_COUNT: int
  scripts:
    reactionUnitReaction: # do not react at max heat
      # but doesn't work perfectly yet as how value for getAmmoQuantity isn't being updated
      # when shooting multiple times during one reactionUnitReaction
      - new: ROSIGMA_rUR_plasma_heat
        offset: 20
        code: |
          var int temp;
          var int currentHeat;
          var int maxHeat;

          var int previousAmmoCount;
          var int currentAmmoCount;
          var ptr BattleItem ammoItem;

          reaction_weapon.getTag maxHeat Tag.ITEM_HEAT_MAX_LEVEL;

          if eq maxHeat 0;
            return reaction_chance;
          end;

          reaction_weapon.getTag currentHeat Tag.ITEM_HEAT_CURRENT_LEVEL;
          reaction_weapon.getTag previousAmmoCount Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT;
          reaction_weapon.getAmmoItem ammoItem;
          ammoItem.getAmmoQuantity currentAmmoCount;

          if le currentAmmoCount previousAmmoCount;
            sub previousAmmoCount currentAmmoCount; # delta ammo count
          end;

          reaction_weapon.getTag temp Tag.ITEM_HEAT_AMMO_SPENT_FOR_INCREASE;
          add previousAmmoCount reaction_count; # assumes that snap will always use one ammo per shot
          div previousAmmoCount temp;

          add currentHeat previousAmmoCount;

          if gt currentHeat maxHeat;
            return 0;
          end;

          return reaction_chance;

items:
  - &STR_OVERHEATING_PLASMA
    type: STR_PLASMA_RIFLE_TERRAN
    bigSprite: 300
    tags:
      ITEM_HEAT_MAX_LEVEL: 7
      ITEM_HEAT_DISSIPATION_PER_TURN: 1
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1

    tuUnload: 999 # DO NOT UNLOAD WEAPONS, THEY ARE LIKELY TO BE HOT
    isExplodingInHands: true # won't explode though as it's not a grenade
    isConsumable: true

    scripts:
      createItem: | # Necessary for the beginning
        item.setTag Tag.ITEM_HEAT_CURRENT_LEVEL -1; # don't affect inventory screen before mission
        return;

      selectItemSprite: |
        var int temp;
        var int currentHeat;
        var int maxHeat;

        var int previousAmmoCount;
        var int currentAmmoCount;
        var ptr BattleItem ammoItem;

        battle_game.getTurn temp;
        if eq temp 0;
          return sprite_index;
        end;

        if eq blit_part blit_item_big;
          item.getTag maxHeat Tag.ITEM_HEAT_MAX_LEVEL;
          item.getTag currentHeat Tag.ITEM_HEAT_CURRENT_LEVEL;
          item.getTag previousAmmoCount Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT;

          if lt currentHeat 0; # before mission
            add sprite_index sprite_offset;
            return sprite_index;
          end;

          item.getAmmoItem ammoItem;
          ammoItem.getAmmoQuantity currentAmmoCount;

          if le currentAmmoCount previousAmmoCount;
            sub previousAmmoCount currentAmmoCount; # delta ammo count
          end;

          item.getTag temp Tag.ITEM_HEAT_AMMO_SPENT_FOR_INCREASE;
          div previousAmmoCount temp;

          add currentHeat previousAmmoCount;
          if le currentHeat maxHeat;
            add sprite_index currentHeat;
          else;
            add sprite_index maxHeat;
          end;
        end;

        add sprite_index sprite_offset;
        return sprite_index;

      # https://openxcom.org/forum/index.php/topic,6758.msg107896.html#msg107896
      recolorItemSprite: |
        var int color;
        var int temp;

        var int currentHeat;
        var int maxHeat;


        var int previousAmmoCount;
        var int currentAmmoCount;
        var ptr BattleItem ammoItem;

        battle_game.getTurn temp;
        if eq temp 0;
          return new_pixel;
        end;

        item.getTag maxHeat Tag.ITEM_HEAT_MAX_LEVEL;
        item.getTag currentHeat Tag.ITEM_HEAT_CURRENT_LEVEL;

        item.getTag previousAmmoCount Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT;
        item.getAmmoItem ammoItem;
        ammoItem.getAmmoQuantity currentAmmoCount;

        if le currentAmmoCount previousAmmoCount;
          sub previousAmmoCount currentAmmoCount; # delta ammo count
        end;

        item.getTag temp Tag.ITEM_HEAT_AMMO_SPENT_FOR_INCREASE;
        div previousAmmoCount temp;

        add currentHeat previousAmmoCount;

        get_color color new_pixel;
        item.isFuseEnabled temp;
        if or gt temp 0 gt currentHeat maxHeat; # todo refactor to max heat + 1 or fuse enabled
          if eq color 2; # red
            set temp anim_frame;
            wavegen_tri temp 16 16 15;
            mul temp -1;
            add temp 8;
            add_shade new_pixel temp;
          end;
        end;
        return new_pixel;

      newTurnItem: | # dissipate/increase heat level
        var int temp;
        var int currentHeat;
        var int maxHeat;

        var int currentAmmoCount;
        var int previousAmmoCount;

        var ptre BattleItem ammoItem;
        var ptre BattleUnit bUnit;

        if neq side FACTION_PLAYER;
          return;
        end;

        item.getTag maxHeat Tag.ITEM_HEAT_MAX_LEVEL;

        item.getAmmoItem ammoItem;
        ammoItem.getAmmoQuantity currentAmmoCount;

        if eq turn 1; # set up
          item.setTag Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT currentAmmoCount;
          item.setTag Tag.ITEM_HEAT_CURRENT_LEVEL 0;
          return;
        end;

        item.getTag currentHeat Tag.ITEM_HEAT_CURRENT_LEVEL;
        item.getTag previousAmmoCount Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT;

        if le currentAmmoCount previousAmmoCount; # not reloaded
          sub previousAmmoCount currentAmmoCount; # delta ammo count

          item.getTag temp Tag.ITEM_HEAT_AMMO_SPENT_FOR_INCREASE;
          div previousAmmoCount temp; # delta heat

          add currentHeat previousAmmoCount;
        else;
          add currentHeat previousAmmoCount; # shots fired before reload
        end;
        # todo: what happens if soldier shoots, reloads and shoots again? Currently it should only add one heat? Do I even want to cover the second heat?

        if gt currentHeat maxHeat;
          if neq currentAmmoCount 0;
            ammoItem.setAmmoQuantity 1; # 0 isn't possible # todo add check if ammo is already 0 (ammoItem should be null?)
            item.setFuseEnabled 1; # destroy weapon
            item.setFuseTimer 0;
          end;

          # item.getOwner bUnit; # maybe damage unit
        else;
          item.getTag temp Tag.ITEM_HEAT_DISSIPATION_PER_TURN;
          if le currentHeat temp; # dissipate
            set currentHeat 0;
          else;
            sub currentHeat temp;
          end;
        end;

        item.setTag Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT currentAmmoCount;
        item.setTag Tag.ITEM_HEAT_CURRENT_LEVEL currentHeat;

        return;

    accuracyMultiplier: |
      var int temp;
      var int previousAmmoCount;
      var int currentAmmoCount;

      var int currentHeat;
      var int maxHeat;
      var ptr BattleItem ammoItem;

      # https://discord.com/channels/292085473890009088/312950346102079489/884719451709276181 # standard implementation see at the end of the file
      # bonus starts at 0 so next line seems redundant. Maybe there are cases where bonus doesn't start at 0
      mul bonus 1000;
      unit.firingBonusStats bonus 1000000 0 0 0;
      if ge bonus 0; add bonus 500; else; sub bonus 500; end;
      div bonus 1000;

      weapon.getTag maxHeat Tag.ITEM_HEAT_MAX_LEVEL;

      weapon.getTag currentHeat Tag.ITEM_HEAT_CURRENT_LEVEL;
      weapon.getTag previousAmmoCount Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT;

      weapon.getAmmoItem ammoItem;
      ammoItem.getAmmoQuantity currentAmmoCount;

      if le currentAmmoCount previousAmmoCount;
        sub previousAmmoCount currentAmmoCount;
      end;

      weapon.getTag temp Tag.ITEM_HEAT_AMMO_SPENT_FOR_INCREASE;
      div previousAmmoCount temp;

      # bonus - bonus * currentHeat / maxHeat / 2
      set temp bonus;
      add currentHeat previousAmmoCount; # delta
      if gt currentHeat maxHeat;
        set currentHeat maxHeat;
      end;
      muldiv temp currentHeat maxHeat;
      div temp 2;

      sub bonus temp;

      return bonus;

  - type: STR_PLASMA_PISTOL_TERRAN
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 308
    tags:
      ITEM_HEAT_MAX_LEVEL: 5
      ITEM_HEAT_DISSIPATION_PER_TURN: 1
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1

  - type: STR_HEAVY_PLASMA_TERRAN
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 314
    tags:
      ITEM_HEAT_MAX_LEVEL: 6
      ITEM_HEAT_DISSIPATION_PER_TURN: 1
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1

  - type: STR_MCPLASMA_RIFLE
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 321
    tags:
      ITEM_HEAT_MAX_LEVEL: 7
      ITEM_HEAT_DISSIPATION_PER_TURN: 2
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1

  - type: STR_MCPLASMA_PISTOL
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 329
    tags:
      ITEM_HEAT_MAX_LEVEL: 5
      ITEM_HEAT_DISSIPATION_PER_TURN: 2
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1

  - type: STR_HEAVY_PLASMA_MC
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 335
    tags:
      ITEM_HEAT_MAX_LEVEL: 6
      ITEM_HEAT_DISSIPATION_PER_TURN: 2
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1

  - type: STR_HEAVY_LASGUN_LUCIUS_XIV
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 342
    tags:
      ITEM_HEAT_MAX_LEVEL: 7
      ITEM_HEAT_DISSIPATION_PER_TURN: 1
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 4

  - type: STR_INQ_PLASMA #Inq Dekker Twincore Plasma
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 400
    tags:
      ITEM_HEAT_MAX_LEVEL: 7
      ITEM_HEAT_DISSIPATION_PER_TURN: 2
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_POWER_BONUS: 50 #Maximal Shot Bonus

  - type: STR_PLASMA_GUN_TWINCORE_DEKKER #Dekker Twincore Plasma
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 400
    tags:
      ITEM_HEAT_MAX_LEVEL: 7
      ITEM_HEAT_DISSIPATION_PER_TURN: 2 #improved dissipation
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1



#items:
#  - type: STR_RIFLE
#    accuracyMultiplier: |
#      mul bonus 1000;
#      unit.firingBonusStats bonus 1000000 0 0 0;
#      if ge bonus 0; add bonus 500; else; sub bonus 500; end;
#      div bonus 1000;
#      return bonus;
#      debug_log "local accuracyMultiplierBonusStats";
#      return 0;



