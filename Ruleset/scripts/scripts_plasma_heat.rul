# https://openxcom.org/forum/index.php/topic,8704.msg133355.html# msg133355

extended:
  tags:
    RuleItem:
      ITEM_HEAT_MAX_LEVEL: int
      ITEM_HEAT_DISSIPATION_PER_TURN: int
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: int
      ITEM_AUTO_FLAT_POWER_BONUS: int
      ITEM_SNAP_FLAT_POWER_BONUS: int
      ITEM_AIMED_FLAT_POWER_BONUS: int
      ITEM_MELEE_POWER_BONUS: int
      ITEM_AIMED_ACCURACY_POWER_BONUS: int  # percent of the user's Firing Accuracy that applies as a damage bonus; used for precision weapons like sniper rifles
      ITEM_SNAP_ACCURACY_POWER_BONUS: int  # percent of the user's Firing Accuracy that applies as a damage bonus; used for precision weapons like sniper rifles
      ITEM_AUTO_ACCURACY_POWER_BONUS: int  # percent of the user's Firing Accuracy that applies as a damage bonus; used for precision weapons like sniper rifles
      ITEM_POWER_BONUS_PERCENTILE: int  # 0-2+; if 0 we just add the flat bonus and add the % of applicable firing accuracy as bonus power. If 1, we apply the bonuses as a percentile bonus of the attack power. If 2+, we do both.
      ITEM_OVERHEAT_DAMAGE: int  # how much damage we apply on average direct to the target's HP.
    BattleItem:
      ITEM_HEAT_CURRENT_LEVEL: int
      ITEM_HEAT_PREVIOUS_AMMO_COUNT: int
      ITEM_HEAT_CRITICAL: int  # have we gone critical?
  scripts:
    reactionUnitReaction:  # do not react at max heat
      # but doesn't work perfectly yet as how value for getAmmoQuantity isn't being updated
      # when shooting multiple times during one reactionUnitReaction
      - new: ROSIGMA_rUR_plasma_heat
        offset: 20
        code: |
          var int temp;
          var int currentHeat;
          var int maxHeat;

          var int previousAmmoCount;
          var int currentAmmoCount;
          var ptr BattleItem ammoItem;

          reaction_unit.getFaction temp;
          if neq temp FACTION_PLAYER;
            # ignore if we're not a player unit.
            return reaction_chance;
          end;

          reaction_weapon.getTag maxHeat Tag.ITEM_HEAT_MAX_LEVEL;

          if eq maxHeat 0;
            return reaction_chance;
          end;

          reaction_weapon.getTag currentHeat Tag.ITEM_HEAT_CURRENT_LEVEL;
          reaction_weapon.getTag previousAmmoCount Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT;
          reaction_weapon.getAmmoItem ammoItem;
          ammoItem.getAmmoQuantity currentAmmoCount;

          if le currentAmmoCount previousAmmoCount;
            sub previousAmmoCount currentAmmoCount; # delta ammo count
          end;


          reaction_weapon.getTag temp Tag.ITEM_HEAT_AMMO_SPENT_FOR_INCREASE;
          add previousAmmoCount reaction_count; # assumes that snap will always use one ammo per shot
          div previousAmmoCount temp;

          add currentHeat previousAmmoCount;

          if gt currentHeat maxHeat;
            return 0;
          end;

          return reaction_chance;

items:
  - &STR_OVERHEATING_PLASMA
    type: STR_PLASMA_RIFLE_TERRAN
    bigSprite: 300
    tags:
      ITEM_HEAT_MAX_LEVEL: 7
      ITEM_HEAT_DISSIPATION_PER_TURN: 1
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 50  # Maximal Shot Bonus
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %
      ITEM_OVERHEAT_DAMAGE: 100  # average damage dealt directly to the wielder's HP modified by plasma resistance if the weapon overheats

    tuUnload: 999  # DO NOT UNLOAD WEAPONS, THEY ARE LIKELY TO BE HOT
    isExplodingInHands: true  # won't explode though as it's not a grenade
    isConsumable: true

    scripts:
      createItem: | # Necessary for the beginning
        item.setTag Tag.ITEM_HEAT_CURRENT_LEVEL -1; # don't affect inventory screen before mission
        return;

      selectItemSprite: |
        var int temp;
        var int currentHeat;
        var int maxHeat;


        var int previousAmmoCount;
        var int currentAmmoCount;
        var ptr BattleItem ammoItem;
        var ptr BattleItem ammoItem2;

        battle_game.getTurn temp;
        if eq temp 0;
          return sprite_index;
        end;

        if eq blit_part blit_item_big;
          item.getTag maxHeat Tag.ITEM_HEAT_MAX_LEVEL;
          item.getTag currentHeat Tag.ITEM_HEAT_CURRENT_LEVEL;
          item.getTag previousAmmoCount Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT;

          if lt currentHeat 0; # before mission
            add sprite_index sprite_offset;
            return sprite_index;
          end;

          item.getAmmoItem ammoItem;
          ammoItem.getAmmoQuantity currentAmmoCount;

          if le currentAmmoCount previousAmmoCount;
            sub previousAmmoCount currentAmmoCount; # delta ammo count
          end;

          item.getTag temp Tag.ITEM_HEAT_AMMO_SPENT_FOR_INCREASE;
          div previousAmmoCount temp;

          add currentHeat previousAmmoCount;
          if le currentHeat maxHeat;
            add sprite_index currentHeat;
          else;
            add sprite_index maxHeat;
          end;
        end;

        add sprite_index sprite_offset;
        return sprite_index;

      # https://openxcom.org/forum/index.php/topic,6758.msg107896.html# msg107896
      recolorItemSprite: |
        var int color;
        var int temp;

        var int currentHeat;
        var int maxHeat;

        var int previousAmmoCount;
        var int currentAmmoCount;
        var ptr BattleItem ammoItem;

        if eq blit_part blit_item_big;

          battle_game.getTurn temp;
          if eq temp 0;
            return new_pixel;
          end;

          item.getTag maxHeat Tag.ITEM_HEAT_MAX_LEVEL;
          item.getTag currentHeat Tag.ITEM_HEAT_CURRENT_LEVEL;
          item.getTag previousAmmoCount Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT;
          item.getAmmoItem ammoItem;
          ammoItem.getAmmoQuantity currentAmmoCount;

          if le currentAmmoCount previousAmmoCount;
            sub previousAmmoCount currentAmmoCount; # delta ammo count
          end;

          item.getTag temp Tag.ITEM_HEAT_AMMO_SPENT_FOR_INCREASE;
          div previousAmmoCount temp;

          add currentHeat previousAmmoCount;

          get_color color new_pixel;
          item.isFuseEnabled temp;
          if or gt temp 0 gt currentHeat maxHeat; # todo refactor to max heat + 1 or fuse enabled
            if eq color 2; # red
              set temp anim_frame;
              wavegen_tri temp 16 16 15;
              mul temp -1;
              add temp 8;
              add_shade new_pixel temp;
            end;
          end;
        end;

        add_shade new_pixel shade;
        return new_pixel;

      newTurnItem: | # dissipate/increase heat level
        var int temp;
        var int temp2;
        var int currentHeat;
        var int maxHeat;


        var int currentAmmoCount;
        var int previousAmmoCount;

        var ptre BattleItem ammoItem;
        var ptre BattleUnit bUnit;

        item.getTag maxHeat Tag.ITEM_HEAT_MAX_LEVEL;
        if lt maxHeat 1;
          return; # don't bother running this script if we don't have a heat level
        end;

        item.getOwner bUnit;
        bUnit.getFaction temp;
        if neq temp FACTION_PLAYER;
          # ignore if we're not a player unit.
          return;
        end;

        item.getTag temp Tag.ITEM_HEAT_CRITICAL;
        # debug_log "ROSIGMA_nTI_plasma_overheat Scripts; newTurnItem, offset 90: Plasma weapon item:" item;
        # debug_log "ROSIGMA_nTI_plasma_overheat Scripts; newTurnItem, offset 90: Plasma weapon self-destructing:" temp;
        if eq temp 1;
          item.getOwner bUnit;
          item.getTag maxHeat Tag.ITEM_OVERHEAT_DAMAGE;
          battle_game.randomRange temp 0 maxHeat; # randomize damage by adding 2 damage rolls.
          battle_game.randomRange temp2 0 maxHeat;
          add temp temp2;
          bUnit.reduceByResistance temp 6; # reduce (or increase) the damage by our plasma resistance
          bUnit.getHealth temp2;
          sub temp2 temp;
          bUnit.setHealthWithOverkill temp2; # apply damage direct to health; oh yeah you're gonna burn alright
          # debug_log "ROSIGMA_nTI_plasma_overheat Scripts; newTurnItem, offset 90: Plasma weapon detonation. Damage:" temp;
          bUnit.setFire 1;
          battle_game.flashMessage "STR_OVERHEATING_EXPLOSION_NOTICE";
          item.setTag Tag.ITEM_HEAT_CRITICAL 0;
          item.setTag Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT 0;
          item.setTag Tag.ITEM_HEAT_CURRENT_LEVEL 0; # null these
          return;
        end;

        if neq side FACTION_PLAYER;
          return;
        end;

        item.getAmmoItem ammoItem;
        ammoItem.getAmmoQuantity currentAmmoCount;

        if eq turn 1; # set up
          item.setTag Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT currentAmmoCount;
          item.setTag Tag.ITEM_HEAT_CURRENT_LEVEL 0;
          return;
        end;

        item.getTag currentHeat Tag.ITEM_HEAT_CURRENT_LEVEL;
        item.getTag previousAmmoCount Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT;

        if le currentAmmoCount previousAmmoCount; # not reloaded
          sub previousAmmoCount currentAmmoCount; # delta ammo count

          item.getTag temp Tag.ITEM_HEAT_AMMO_SPENT_FOR_INCREASE;
          div previousAmmoCount temp; # delta heat

          add currentHeat previousAmmoCount;
        else;
          add currentHeat previousAmmoCount; # shots fired before reload
        end;
        # todo: what happens if soldier shoots, reloads and shoots again? Currently it should only add one heat? Do I even want to cover the second heat?

        if gt currentHeat maxHeat;
          if neq currentAmmoCount 0;
            ammoItem.setAmmoQuantity 1; # 0 isn't possible  # todo add check if ammo is already 0 (ammoItem should be null?)
          end;
          item.setFuseEnabled 1; # destroy weapon
          item.setFuseTimer 1;
          item.getOwner bUnit;
          bUnit.setFire 1; # set wielder on fire
          battle_game.flashMessage "STR_OVERHEATING_FLASH_NOTICE";
          item.setTag Tag.ITEM_HEAT_CRITICAL 1;
          # debug_log "ROSIGMA_nTI_plasma_overheat Scripts; newTurnItem, offset 90: Plasma weapon self-destructing:" item;
        else;
          item.getTag temp Tag.ITEM_HEAT_DISSIPATION_PER_TURN;
          if le currentHeat temp; # dissipate
            set currentHeat 0;
          else;
            sub currentHeat temp;
          end;
        end;

        item.setTag Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT currentAmmoCount;
        item.setTag Tag.ITEM_HEAT_CURRENT_LEVEL currentHeat;

        return;

      accuracyMultiplier: |
        var int temp;
        var int previousAmmoCount;
        var int currentAmmoCount;

        var int currentHeat;
        var int maxHeat;
        var ptr BattleItem ammoItem;

        unit.getFaction temp;
        if neq temp FACTION_PLAYER;
          # ignore if we're not a player unit.
          return bonus;
        end;

        # https://discord.com/channels/292085473890009088/312950346102079489/884719451709276181  # standard implementation see at the end of the file
        # bonus starts at 0 so next line seems redundant. Maybe there are cases where bonus doesn't start at 0
        mul bonus 1000;
        unit.firingBonusStats bonus 1000000 0 0 0;
        if ge bonus 0; add bonus 500; else; sub bonus 500; end;
        div bonus 1000;

        weapon.getTag maxHeat Tag.ITEM_HEAT_MAX_LEVEL;

        weapon.getTag currentHeat Tag.ITEM_HEAT_CURRENT_LEVEL;
        weapon.getTag previousAmmoCount Tag.ITEM_HEAT_PREVIOUS_AMMO_COUNT;

        weapon.getAmmoItem ammoItem;
        ammoItem.getAmmoQuantity currentAmmoCount;

        if le currentAmmoCount previousAmmoCount;
          sub previousAmmoCount currentAmmoCount;
        end;

        weapon.getTag temp Tag.ITEM_HEAT_AMMO_SPENT_FOR_INCREASE;
        div previousAmmoCount temp;

        # bonus - bonus * currentHeat / maxHeat / 2
        set temp bonus;
        add currentHeat previousAmmoCount; # delta
        if gt currentHeat maxHeat;
          set currentHeat maxHeat;
        end;
        muldiv temp currentHeat maxHeat;
        div temp 2;

        sub bonus temp;

        return bonus;

  - type: STR_PLASMA_PISTOL_TERRAN
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 308
    tags:
      ITEM_HEAT_MAX_LEVEL: 5
      ITEM_HEAT_DISSIPATION_PER_TURN: 1
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 50  # Maximal Shot Bonus
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %

  - type: STR_HEAVY_PLASMA_TERRAN
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 314
    tags:
      ITEM_HEAT_MAX_LEVEL: 6
      ITEM_HEAT_DISSIPATION_PER_TURN: 1
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 50  # Maximal Shot Bonus
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %
      ITEM_OVERHEAT_DAMAGE: 150  # average damage dealt directly to the wielder's HP if the weapon overheats

  - type: STR_MCPLASMA_RIFLE
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 321
    tags:
      ITEM_HEAT_MAX_LEVEL: 7
      ITEM_HEAT_DISSIPATION_PER_TURN: 2
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 50  # Maximal Shot Bonus
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %

  - type: STR_MCPLASMA_PISTOL
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 329
    tags:
      ITEM_HEAT_MAX_LEVEL: 5
      ITEM_HEAT_DISSIPATION_PER_TURN: 2
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1

  - type: STR_HEAVY_PLASMA_MC
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 335
    tags:
      ITEM_HEAT_MAX_LEVEL: 6
      ITEM_HEAT_DISSIPATION_PER_TURN: 2
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 50  # Maximal Shot Bonus
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %
      ITEM_OVERHEAT_DAMAGE: 150  # average damage dealt directly to the wielder's HP if the weapon overheats

  - type: STR_HEAVY_LASGUN_LUCIUS_XIV
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 342
    tags:
      ITEM_HEAT_MAX_LEVEL: 7
      ITEM_HEAT_DISSIPATION_PER_TURN: 2
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 5
      ITEM_AUTO_FLAT_POWER_BONUS: 20  # power shot
      ITEM_AIMED_FLAT_POWER_BONUS: 60  # maximal
      ITEM_OVERHEAT_DAMAGE: 50  # average damage dealt directly to the wielder's HP if the weapon overheats

  - type: STR_INQ_PLASMA  # Inq Dekker Twincore Plasma
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 350
    tags:
      ITEM_HEAT_MAX_LEVEL: 7
      ITEM_HEAT_DISSIPATION_PER_TURN: 2
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 50  # Maximal Shot Bonus
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %

  - type: STR_PLASMA_GUN_TWINCORE_DEKKER  # Dekker Twincore Plasma
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 350
    tags:
      ITEM_HEAT_MAX_LEVEL: 7
      ITEM_HEAT_DISSIPATION_PER_TURN: 2  # improved dissipation
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 50  # Maximal Shot Bonus
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %
      ITEM_OVERHEAT_DAMAGE: 150  # average damage dealt directly to the wielder's HP if the weapon overheats

  - type: STR_PLASMA_RIFLE_SEQUANA
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 358
    confAimed:
      shots: 1
      spendPerShot: 2
    tags:
      ITEM_HEAT_MAX_LEVEL: 7
      ITEM_HEAT_DISSIPATION_PER_TURN: 1
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 0  # No maximal Shot Bonus
      ITEM_AIMED_ACCURACY_POWER_BONUS: 25  # battle rifle multiplier on aimed shots; this is a precision shot bonus, not maximal mode
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %

  - type: STR_COMBIPISTOL_STUBPLASMA
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 367
    tags:
      ITEM_HEAT_MAX_LEVEL: 5
      ITEM_HEAT_DISSIPATION_PER_TURN: 1
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 50  # Maximal Shot Bonus
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %

  - type: STR_PRIMARIS_INCINERATOR_POWER_PACK
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 373
    tags:
      ITEM_HEAT_MAX_LEVEL: 7
      ITEM_HEAT_DISSIPATION_PER_TURN: 7  # Primaris heat dissipation
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 50  # Maximal Shot Bonus
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %

  - type: STR_PLASMA_INC_TERRAN  # Plasma Incinerator
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 381
    tags:
      ITEM_HEAT_MAX_LEVEL: 7
      ITEM_HEAT_DISSIPATION_PER_TURN: 7  # Primaris heat dissipation
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 50  # Maximal Shot Bonus
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %

  - type: STR_PRIMARIS_EXTERMINATOR
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 389
    tags:
      ITEM_HEAT_MAX_LEVEL: 6
      ITEM_HEAT_DISSIPATION_PER_TURN: 6  # Primaris heat dissipation
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 50  # Maximal Shot Bonus
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %

  - type: STR_PRIMARIS_EXTERMINATOR_POWER_PACK
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 396
    tags:
      ITEM_HEAT_MAX_LEVEL: 6
      ITEM_HEAT_DISSIPATION_PER_TURN: 6  # Primaris heat dissipation
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 50  # Maximal Shot Bonus
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %

  - type: STR_GENERICSERVITOR_HEAVY_PLASMA
    refNode: *STR_OVERHEATING_PLASMA
    bigSprite: 2819
    tags:
      ITEM_HEAT_MAX_LEVEL: 6
      ITEM_HEAT_DISSIPATION_PER_TURN: 1
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: 1
      ITEM_AIMED_FLAT_POWER_BONUS: 50  # Maximal Shot Bonus
      ITEM_POWER_BONUS_PERCENTILE: 1  # use %
      ITEM_OVERHEAT_DAMAGE: 150  # average damage dealt directly to the wielder's HP if the weapon overheats

# items:
#  - type: STR_RIFLE
#    accuracyMultiplier: |
#      mul bonus 1000;
#      unit.firingBonusStats bonus 1000000 0 0 0;
#      if ge bonus 0; add bonus 500; else; sub bonus 500; end;
#      div bonus 1000;
#      return bonus;
#      # debug_log "local accuracyMultiplierBonusStats";
#      return 0;



