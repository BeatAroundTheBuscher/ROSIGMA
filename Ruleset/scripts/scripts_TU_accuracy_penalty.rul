#items:
#  - type: STR_RIFLEC
#    kneelBonus: 100 # test only
#    accuracyMultiplier: # required by ITEM_IS_HEAVY_WEAPON
#     firing: 1.0
#    tags:
#      ITEM_IS_HEAVY_WEAPON: 1
#      ITEM_HAS_BIPOD: 1


items:
  - type: STR_ASSC # HW
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_HB # Heavy Rifle # Bolter
#    tags:
#      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_HFLAMER # HW # but considered Rifle
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

#  - type: STR_HEAVY_LASER #MELTAGUN # HW # Melta
#    tags:
#      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_HEAVY_CANNON # Sniper
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_EXITUS_BUILTIN # Sniper
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_LONGLAS # Sniper # Las
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_LONGLAS_TANITH # Sniper # Las
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_HEAVY_STUBBER # HW Bipod
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_LASCANNON_HANDHELD # HW Bipod # Las
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_HEAVY_BOLTER_GUARD # HW Bipod # Bolter
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_AUTOCANNON_HANDHELD # HW Bipod
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_LASCAN # Marine Lascannon # HW # Las
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_AUTO_CANNON # Marine Heavy Bolter # HW # Bolter
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_BLASTER_LAUNCHER_TERRAN # MULTIMELTA # HW # Melta
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

#  - type: STR_SMALL_LAUNCHER_TERRAN #GRAVGUN # HW
#    tags:
#      ITEM_IS_HEAVY_WEAPON: 1

#  - type: STR_GRAVGUN_MC #GRAVGUN # HW # MC
#    tags:
#      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_HEAVY_STUBBER_LIGHT # HW
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_GRENADE_LAUNCHER # HW
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_ROCKET_LAUNCHER # HW
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_HEAVY_PLASMA_MCJ # Joan # HW # Plasma # MC
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_HEAVY_PLASMA_MC # HW # Plasma # MC
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_HEAVY_PLASMA_TERRAN # HW # Plasma
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_PLASMA_INC_TERRAN # HW # Plasma
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_AUTO_CANNON_RETRIBUTOR #heavy bolter
    tags:
      ITEM_IS_HEAVY_WEAPON: 1
  - type: STR_AUTO_CANNON_RETRIBUTOR_2    #heavy bolter
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_AUTO_CANNON_POTESTAS  #heavy combi bolter
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_GALGALIM_ASSCANNON #assault cannon
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_ADEPTAS_ROCKET_LAUNCHER #missile launcher
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_CHERUBIM_GRENADE_LAUNCHER
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_LASCAN_MALTHUS #light lascannon
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

  - type: STR_SNIPER_ARCHE #battle rifle sniper
    tags:
      ITEM_IS_HEAVY_WEAPON: 1

extended:
  tags:
    RuleItem:
      ITEM_RECOIL: int
      ITEM_HAS_BIPOD: int
      ITEM_IS_HEAVY_WEAPON: int # infantry but not mounted/vehicle heavy weapons

  scripts:
    accuracyMultiplierBonusStats:
      - new: ROSIGMA_aMSB_tu_accuracy_penalty
        offset: 31
        code: |
          var int temp;
          var int currentTU;
          var int accuracyScore;
          var int weaponWithBipod;
          var int kneeling;

          var ptr RuleItem rItem;

          weapon.getRuleItem rItem;
          rItem.getTag temp Tag.ITEM_IS_HEAVY_WEAPON;
          if eq temp 0;
            return bonus; # final accuracy
          end;

          unit.isKneeled kneeling; # 1 when kneeling
          rItem.getTag weaponWithBipod Tag.ITEM_HAS_BIPOD;

          unit.getTimeUnits currentTU; # absolute
          unit.getTimeUnitsMax temp;
          muldiv currentTU 100 temp; # relative
          # debug_log "currenTU %" currentTU;

          set temp bonus; # starting bonus

          if and gt currentTU 20 le currentTU 80;
            add currentTU 20; # start with 100 (80 + 20) % bonus
            muldiv bonus currentTU 100;
            # debug_log "Altered currenTU %" currentTU;
            # debug_log "20-80 bonus" bonus;
            sub currentTU 20;
          end;

          if le currentTU 20;
            muldiv bonus 40 100; # lower range is 40 (20 + 20)
            # debug_log "20 bonus" bonus;
          end;


          if and eq kneeling 1 eq weaponWithBipod 1;
            add bonus temp; # (current bonus + starting bonus * 2) / 3
            add bonus temp;
            div bonus 3;
            # debug_log "kneel+bipod bonus";
          end;

          if and eq kneeling 1 eq weaponWithBipod 0;
            add bonus temp; # (current bonus + starting bonus) / 2
            div bonus 2;
          end;
          # debug_log "battle_action" battle_action;
          # debug_log "current bonus" bonus;


          return bonus; # final accuracy





          # debug_log "unit accuracyScore" accuracyScore;

          # todo consider battle_action auto, snap (halves penalty?), aimed (removed penalty?)
          # can consider ammo too (f. ex. over charged)

          # unit.Stats.getFiring accuracyScore;

          # bonus does not consider aim mode (it was always 70 for a unit with 70 FACC)
          # if eq battle_action BA_AIMEDSHOT; # 9
          #  # rItem.getAccuracyAimed accuracyScore;
          #  debug_log "aimed accuracyScore" bonus;
          # end;

          # if eq battle_action BA_SNAPSHOT; # 8
          #   # rItem.getAccuracySnap accuracyScore;
          #   debug_log "snap accuracyScore" bonus;
          # end;

          # if eq battle_action BA_AUTOSHOT; # 7
          #   # rItem.getAccuracyAuto accuracyScore;
          #   debug_log "auto accuracyScore" bonus;
          # end;