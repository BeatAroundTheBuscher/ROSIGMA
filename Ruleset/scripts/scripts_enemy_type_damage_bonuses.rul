extended:
  tagsFile: Ruleset/tags_ROSIGMA.rul

  tags:
    BattleUnit:
      UNIT_OVERKILL_DISABLE_SELF_DESTRUCT: int  # is our self-destruct disabled?
    RuleItem:
      #percentile damage bonus
      DAMAGE_BONUS_PERCENT_MECHANICAL: int # if -1 attack will do 0 damage overriding any other target type bonuses; -2 deals 0 damage overriding null bonuses
      DAMAGE_BONUS_PERCENT_DAEMONIC: int
      DAMAGE_BONUS_PERCENT_CONSECRATED: int
      DAMAGE_BONUS_PERCENT_CHAOS: int
      DAMAGE_BONUS_PERCENT_PSYKER: int
      DAMAGE_BONUS_PERCENT_NULL: int
      DAMAGE_BONUS_PERCENT_TYRANID: int
      DAMAGE_BONUS_PERCENT_LIVING: int
      DAMAGE_BONUS_PERCENT_TZEENTCH: int
      DAMAGE_BONUS_PERCENT_KHORNE: int
      DAMAGE_BONUS_PERCENT_SLAANESH: int
      DAMAGE_BONUS_PERCENT_NURGLE: int
      DAMAGE_BONUS_PERCENT_XENO: int
      DAMAGE_BONUS_PERCENT_ELDAR: int
      DAMAGE_BONUS_PERCENT_IMPERIUM: int
      DAMAGE_BONUS_PERCENT_ORK: int
      DAMAGE_BONUS_PERCENT_NECRON: int
      DAMAGE_BONUS_PERCENT_SYNAPSE: int
      #flat damage bonus
      DAMAGE_BONUS_FLAT_MECHANICAL: int
      DAMAGE_BONUS_FLAT_DAEMONIC: int
      DAMAGE_BONUS_FLAT_CONSECRATED: int
      DAMAGE_BONUS_FLAT_CHAOS: int
      DAMAGE_BONUS_FLAT_PSYKER: int
      DAMAGE_BONUS_FLAT_NULL: int
      DAMAGE_BONUS_FLAT_TYRANID: int
      DAMAGE_BONUS_FLAT_LIVING: int
      DAMAGE_BONUS_FLAT_TZEENTCH: int
      DAMAGE_BONUS_FLAT_KHORNE: int
      DAMAGE_BONUS_FLAT_SLAANESH: int
      DAMAGE_BONUS_FLAT_NURGLE: int
      DAMAGE_BONUS_FLAT_XENO: int
      DAMAGE_BONUS_FLAT_ELDAR: int
      DAMAGE_BONUS_FLAT_IMPERIUM: int
      DAMAGE_BONUS_FLAT_ORK: int
      DAMAGE_BONUS_FLAT_NECRON: int
      DAMAGE_BONUS_FLAT_SYNAPSE: int
      #ignition
      DAMAGE_THRESHOLD_FOR_IGNITION: int

  scripts:
    damageUnit:
      - new: ROSIGMA_dU_damage_enhancement
        offset: 1
        code: |
          var int temp;
          var int damageFlatBonus;
          var int damagePercentBonus;
          var int ongoingDamageFlatBonus;
          var int ongoingDamagePercentBonus;
          var ptr RuleItem itemRule;
          var ptr BattleItem ammoItem;
          var ptr RuleArmor rArmor;

          if lt to_health 1;
            # debug_log "ROSIGMA_dU_damage_enhancement; damageUnit, offset 1: Aboted. Null to_health:" to_health;
            return;
          end;

          unit.getRuleArmor rArmor;
          weapon_item.getRuleItem itemRule;
          weapon_item.getAmmoItem ammoItem;
          # debug_log "ROSIGMA_dU_damage_enhancement; damageUnit, offset 1: Initial to_health:" to_health;

          rArmor.getTag temp Tag.UNIT_TYPE_DAEMONIC;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_DAEMONIC;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_DAEMONIC;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            # debug_log "ROSIGMA_dU_damage_enhancement; damageUnit, offset 1: Health damage multiplier:" damagePercentBonus;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_DAEMONIC;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_DAEMONIC;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;
          end;

          rArmor.getTag temp Tag.UNIT_TYPE_MECHANICAL;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_MECHANICAL;
            # debug_log "ROSIGMA_dU_damage_enhancement; damageUnit, offset 1: Initial item Health damage multiplier:" damagePercentBonus;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_MECHANICAL;
            # debug_log "ROSIGMA_dU_damage_enhancement; damageUnit, offset 1: Initial ammo Health damage multiplier:" temp;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            # debug_log "ROSIGMA_dU_damage_enhancement; damageUnit, offset 1: Health damage multiplier:" damagePercentBonus;

            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_MECHANICAL;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_MECHANICAL;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;
            # debug_log "ROSIGMA_dU_damage_enhancement; damageUnit, offset 1: Health damage flat bonus:" damageFlatBonus;

            # only highest bonus of each type applies
            if or eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
              # debug_log "ROSIGMA_dU_damage_enhancement; damageUnit, offset 1: Health damage flat bonus:" ongoingDamageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_CONSECRATED;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_CONSECRATED;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_CONSECRATED;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_CONSECRATED;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_CONSECRATED;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_CHAOS;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_CHAOS;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_CHAOS;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_CHAOS;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_CHAOS;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_PSYKER;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_PSYKER;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_PSYKER;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_PSYKER;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_PSYKER;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_NULL;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_NULL;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_NULL;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_NULL;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_NULL;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_TYRANID;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_TYRANID;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_TYRANID;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_TYRANID;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_TYRANID;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_LIVING;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_LIVING;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_LIVING;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_LIVING;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_LIVING;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_TZEENTCH;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_TZEENTCH;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_TZEENTCH;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_TZEENTCH;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_TZEENTCH;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_KHORNE;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_KHORNE;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_KHORNE;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_KHORNE;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_KHORNE;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_NURGLE;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_NURGLE;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_NURGLE;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_NURGLE;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_NURGLE;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_SLAANESH;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_SLAANESH;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_SLAANESH;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_SLAANESH;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_SLAANESH;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_XENO;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_XENO;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_XENO;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_XENO;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_XENO;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_ELDAR;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_ELDAR;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_ELDAR;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_ELDAR;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_ELDAR;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_ORK;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_ORK;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_ORK;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_ORK;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_ORK;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_IMPERIUM;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_IMPERIUM;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_IMPERIUM;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_IMPERIUM;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_IMPERIUM;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_NECRON;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_NECRON;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_NECRON;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_NECRON;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_NECRON;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          rArmor.getTag temp Tag.UNIT_TYPE_SYNAPSE;
          if gt temp 0;
            itemRule.getTag damagePercentBonus Tag.DAMAGE_BONUS_PERCENT_SYNAPSE;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_PERCENT_SYNAPSE;
            if gt temp damagePercentBonus; #apply the higher of the two
              set damagePercentBonus temp;
            end;
            itemRule.getTag damageFlatBonus Tag.DAMAGE_BONUS_FLAT_SYNAPSE;
            ammoItem.getTag temp Tag.DAMAGE_BONUS_FLAT_SYNAPSE;
            if gt temp damageFlatBonus; #apply the higher of the two
              set damageFlatBonus temp;
            end;

            # only highest bonus of each type applies
            if eq damagePercentBonus -1; # null overrides all
              set ongoingDamagePercentBonus damagePercentBonus;
            else and eq damagePercentBonus -2 eq ongoingDamagePercentBonus 0; # -2 null overrides 0, but not a higher value
              set ongoingDamagePercentBonus damagePercentBonus;
            else gt damagePercentBonus ongoingDamagePercentBonus;
              set ongoingDamagePercentBonus damagePercentBonus;
            end;

            if gt damageFlatBonus ongoingDamageFlatBonus;
              set ongoingDamageFlatBonus damageFlatBonus;
            end;

          end;

          set temp ongoingDamagePercentBonus;
          add temp ongoingDamageFlatBonus;
          if eq temp 0; #if we have no damage type modifiers, cancel out.
            return;
          end;

          if lt ongoingDamagePercentBonus 0; # we null and cancel out
            set to_health 0;
            set to_stun 0;
            set to_time 0;
            set to_morale 0;
            set to_wound 0;
            # debug_log "ROSIGMA_dU_damage_enhancement; damageUnit, offset 1: Final damage is null:" ongoingDamagePercentBonus;
            return;
          end;

          # debug_log "ROSIGMA_dU_damage_enhancement; damageUnit, offset 1: Final ongoingDamagePercentBonus:" ongoingDamagePercentBonus;
          # debug_log "ROSIGMA_dU_damage_enhancement; damageUnit, offset 1: Final ongoingDamageFlatBonus:" ongoingDamageFlatBonus;
          if neq ongoingDamagePercentBonus 0; #apply the percentile damage bonus

            muldiv to_health ongoingDamagePercentBonus 100;
            muldiv to_stun ongoingDamagePercentBonus 100;
            muldiv to_time ongoingDamagePercentBonus 100;
            muldiv to_morale ongoingDamagePercentBonus 100;
            muldiv to_wound ongoingDamagePercentBonus 100;
          end;

          add to_health ongoingDamageFlatBonus; #apply the flat damage bonus
          # debug_log "ROSIGMA_dU_damage_enhancement; damageUnit, offset 1: Final to_health:" to_health;

          itemRule.getTag temp Tag.DAMAGE_THRESHOLD_FOR_IGNITION;
          if and gt to_health temp gt temp 0;
            unit.setFire 1; # set target on fire
          end;

          return;