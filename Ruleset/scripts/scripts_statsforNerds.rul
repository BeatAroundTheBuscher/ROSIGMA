armors:
  - type: STR_ENFORCER_SHIELD_ARMOR_UC
    tags:
      HAS_EXTENDED_FRONT_SHIELD: 1

  - type: STR_GUARD_ARMORS_MOUNTED_HEAVY_BOLTER_UC
    tags:
      HAS_EXTENDED_FRONT_SHIELD: 1

  - type: STR_GUARD_ARMORS_MOUNTED_LASCANNON_UC
    tags:
      HAS_EXTENDED_FRONT_SHIELD: 1

  - type: STR_GUARD_ARMORS_MOUNTED_AUTOCANNON_UC
    tags:
      HAS_EXTENDED_FRONT_SHIELD: 1

  - type: STR_BULLGRYN_SLAB
    tags:
      HAS_EXTENDED_FRONT_SHIELD: 1

  - type: STR_GUARD_KRIEG_ARMORS_MOUNTED_HEAVY_BOLTER_UC
    tags:
      HAS_EXTENDED_FRONT_SHIELD: 1

  - type: STR_GUARD_KRIEG_ARMORS_MOUNTED_LASCANNON_UC
    tags:
      HAS_EXTENDED_FRONT_SHIELD: 1

  - type: STR_GUARD_KRIEG_ARMORS_MOUNTED_AUTOCANNON_UC
    tags:
      HAS_EXTENDED_FRONT_SHIELD: 1

  - type: STR_GUARD_KRIEG_ARMORS_MOUNTED_MORTAR_UC
    tags:
      HAS_EXTENDED_FRONT_SHIELD: 1

  - type: STR_INQ_STORMTROOPER_CARAPACE_ARMOR_MEDICAE
    tags:
      HAS_EXTENDED_FRONT_SHIELD: 1

  - type: STR_STEELLEGION_ARMORS_MOUNTED_HEAVY_BOLTER_UC
    tags:
      HAS_EXTENDED_FRONT_SHIELD: 1

  - type: STR_STEELLEGION_ARMORS_MOUNTED_LASCANNON_UC
    tags:
      HAS_EXTENDED_FRONT_SHIELD: 1

  - type: STR_STEELLEGION_ARMORS_MOUNTED_AUTOCANNON_UC
    tags:
      HAS_EXTENDED_FRONT_SHIELD: 1


extended:
  tagsFile: Ruleset/tags_ROSIGMA.rul
  tags:
    RuleItem:
      ITEM_RECOIL: int
      ITEM_HAS_BIPOD: int
      ITEM_STRENGTH_REQUIREMENT: int
      ITEM_HEAT_MAX_LEVEL: int
      ITEM_HEAT_DISSIPATION_PER_TURN: int
      ITEM_MELEE_POWER_BONUS: int
      ITEM_HEAT_AMMO_SPENT_FOR_INCREASE: int
      GravPercentage: int
      # reaction modifier tags
      REACTION_MULTIPLIER: int  # multiplies base reaction score by this amount divided by 100
      REACTION_FLAT_BONUS_OR_PENALTY: int  # increases or decreases base reaction score by this amount
      REACTION_PENALTY_KNEELING_BYPASS: int  # does kneeling bypass the reaction penalty this applies?
      ITEM_IS_HEAVY_WEAPON: int
    RuleArmor:
      HAS_EXTENDED_FRONT_SHIELD: int
      ARMOR_ENERGY_SHIELD_HP_PER_TURN: int
      ARMOR_ENERGY_SHIELD_DECAY: int
      DODGE_CHANCE: int
      FLIGHT_DODGE_CHANCE: int
      MaxFlight: int
      MaxCoolDown: int
      # corruption/infection script tags
      INFECTION_RESIST: int  # reduces infection damage by this as a %
      INFECTION_REDUCTION: int  # reduces infection damage by this as a flat amount
      # intimidation script tags
      INTIMIDATION_RESISTANCE: int  # Reduces the effectiveness of Intimidate attacks by this percentage


  scripts:
    statsForNerdsArmor:
      - new: ROSIGMA_sFNA_stats_for_nerds
        offset: 22
        code: |
          var int temp1;
          var int temp2;

          stats_state.addTextRow "STR_DIVIDER_SFN" " "; # Just a visual divider

          rule.getTag temp1 Tag.HAS_EXTENDED_FRONT_SHIELD;
          if gt temp1 0;
            stats_state.addTextRow "Extended Front Side" "Yes";
          end;

          rule.getTag temp1 Tag.MaxFlight;
          if gt temp1 0;
            stats_state.addIntRow "Flight Duration" temp1;
          end;
          rule.getTag temp1 Tag.MaxCoolDown;
          if gt temp1 0;
            stats_state.addIntRow "Flight Cooldown" temp1;
          end;
          rule.getTag temp1 Tag.ARMOR_ENERGY_SHIELD_HP_PER_TURN;
          rule.getTag temp2 Tag.ARMOR_ENERGY_SHIELD_DECAY;

          if neq temp2 0;
            muldiv temp1 100 temp2;
          end;

          if gt temp1 0;
            stats_state.addIntRow "Energy Shield" temp1;
          end;

          rule.getTag temp1 Tag.DODGE_CHANCE;
          if gt temp1 0;
            stats_state.addIntRow "Ranged Dodge Chance" temp1;
          end;
          rule.getTag temp1 Tag.FLIGHT_DODGE_CHANCE;
          if gt temp1 0;
            stats_state.addIntRow "Ranged Dodge Chance In Flight" temp1;
          end;
          rule.getTag temp1 Tag.INFECTION_RESIST;
          if gt temp1 0;
            stats_state.addIntRow "Corruption Resistance" temp1;
          end;
          rule.getTag temp1 Tag.INFECTION_REDUCTION;
          if gt temp1 0;
            stats_state.addIntRow "Corruption Reduction" temp1;
          end;
          rule.getTag temp1 Tag.INTIMIDATION_RESISTANCE;
          if gt temp1 0;
            stats_state.addIntRow "Intimidation Resistance" temp1;
          end;
          rule.getTag temp1 Tag.UNIT_SIZE;
          if gt temp1 0;
            stats_state.addIntRow "Unit Size Value" temp1;
          end;

          return;

    statsForNerdsItem:
      - new: ROSIGMA_sFNI_stats_for_nerds
        offset: 22
        code: |
          var int temp;

          stats_state.addTextRow "STR_DIVIDER_SFN" " "; # Just a visual divider

          rule.getTag temp Tag.ITEM_RECOIL;
          if gt temp 0;
            stats_state.addIntRow "STR_RECOIL" temp;
          end;
          rule.getTag temp Tag.ITEM_HAS_BIPOD;
          if gt temp 0;
            stats_state.addTextRow "STR_BIPOD" "STR_TRUE";
          end;
          rule.getTag temp Tag.ITEM_STRENGTH_REQUIREMENT;
          if gt temp 0;
            stats_state.addIntRow "STR_STRENGTH_REQUIREMENT" temp;
          end;
          rule.getTag temp Tag.ITEM_AIMED_FLAT_POWER_BONUS;
          if gt temp 0;
            stats_state.addIntRow "STR_AIMED_FLAT_POWER_BONUS" temp;
          end;
          rule.getTag temp Tag.ITEM_AIMED_FLAT_POWER_BONUS_PERCENT;
          if gt temp 0;
            stats_state.addIntRow "STR_AIMED_FLAT_POWER_BONUS_PERCENT" temp;
          end;
          rule.getTag temp Tag.ITEM_AIMED_ACCURACY_POWER_BONUS;
          if gt temp 0;
            stats_state.addIntRow "STR_AIMED_ACCURACY_POWER_BONUS" temp;
          end;
          rule.getTag temp Tag.ITEM_AIMED_ACCURACY_POWER_BONUS_PERCENT;
          if gt temp 0;
            stats_state.addIntRow "STR_AIMED_ACCURACY_POWER_BONUS_PERCENT" temp;
          end;
          rule.getTag temp Tag.ITEM_AUTO_FLAT_POWER_BONUS;
          if gt temp 0;
            stats_state.addIntRow "STR_AUTO_FLAT_POWER_BONUS" temp;
          end;
          rule.getTag temp Tag.ITEM_AUTO_FLAT_POWER_BONUS_PERCENT;
          if gt temp 0;
            stats_state.addIntRow "STR_AUTO_FLAT_POWER_BONUS_PERCENT" temp;
          end;
          rule.getTag temp Tag.ITEM_AUTO_ACCURACY_POWER_BONUS;
          if gt temp 0;
            stats_state.addIntRow "STR_AUTO_ACCURACY_POWER_BONUS" temp;
          end;
          rule.getTag temp Tag.ITEM_AUTO_ACCURACY_POWER_BONUS_PERCENT;
          if gt temp 0;
            stats_state.addIntRow "STR_AUTO_ACCURACY_POWER_BONUS_PERCENT" temp;
          end;
          rule.getTag temp Tag.ITEM_SNAP_FLAT_POWER_BONUS;
          if gt temp 0;
            stats_state.addIntRow "STR_SNAP_FLAT_POWER_BONUS" temp;
          end;
          rule.getTag temp Tag.ITEM_SNAP_FLAT_POWER_BONUS_PERCENT;
          if gt temp 0;
            stats_state.addIntRow "STR_SNAP_FLAT_POWER_BONUS_PERCENT" temp;
          end;
          rule.getTag temp Tag.ITEM_SNAP_ACCURACY_POWER_BONUS;
          if gt temp 0;
            stats_state.addIntRow "STR_SNAP_ACCURACY_POWER_BONUS" temp;
          end;
          rule.getTag temp Tag.ITEM_SNAP_ACCURACY_POWER_BONUS_PERCENT;
          if gt temp 0;
            stats_state.addIntRow "STR_SNAP_ACCURACY_POWER_BONUS_PERCENT" temp;
          end;
          rule.getTag temp Tag.ITEM_MELEE_POWER_BONUS;
          if gt temp 0;
            stats_state.addIntRow "STR_MELEE_POWER_BONUS" temp;
          end;
          rule.getTag temp Tag.ITEM_HEAT_MAX_LEVEL;
          if gt temp 0;
            stats_state.addIntRow "STR_MAX_HEAT_LEVEL" temp;
          end;
          rule.getTag temp Tag.ITEM_HEAT_DISSIPATION_PER_TURN;
          if gt temp 0;
            stats_state.addIntRow "STR_HEAT_DISSIPATION_PER_TURN" temp;
          end;
          rule.getTag temp Tag.ITEM_HEAT_AMMO_SPENT_FOR_INCREASE;
          if gt temp 0;
            stats_state.addIntRow "STR_HEAT_AMMO_SPENT_FOR_INCREASE" temp;
          end;
          rule.getTag temp Tag.GravPercentage;
          if gt temp 0;
            stats_state.addIntRow "STR_GRAVPERCENTAGE" temp;
          end;
          rule.getTag temp Tag.REACTION_MULTIPLIER;
          if gt temp 0;
            stats_state.addIntRow "STR_REACTION_MULTIPLIER_STATS_FOR_NERDS" temp;
          end;
          rule.getTag temp Tag.REACTION_FLAT_BONUS_OR_PENALTY;
          if gt temp 0;
            stats_state.addIntRow "STR_REACTION_FLAT_BONUS_OR_PENALTY_STATS_FOR_NERDS" temp;
          end;
          rule.getTag temp Tag.REACTION_PENALTY_KNEELING_BYPASS;
          if eq temp 1;
            stats_state.addTextRow "STR_REACTION_PENALTY_KNEELING_BYPASS_STATS_FOR_NERDS" "STR_TRUE";
          end;
          rule.getTag temp Tag.ITEM_IS_HEAVY_WEAPON;
          if gt temp 0;
            stats_state.addTextRow "ITEM_IS_HEAVY_WEAPON" "STR_TRUE";
          end;
          rule.getTag temp Tag.ITEM_ENERGY_SHIELD_REDUCTION_PERCENT;
          if gt temp 0;
            stats_state.addIntRow "ITEM_ENERGY_SHIELD_REDUCTION_PERCENT" temp;
          end;
          rule.getTag temp Tag.DAMAGE_RESIST_PENETRATION_PERCENT;
          if gt temp 0;
            stats_state.addIntRow "STR_RESIST_PENETRATION_PERCENT" temp;
          end;
          rule.getTag temp Tag.DAMAGE_RESIST_PENETRATION_FLAT;
          if gt temp 0;
            stats_state.addIntRow "STR_RESIST_PENETRATION_FLAT" temp;
          end;
          rule.getTag temp Tag.ITEM_EFFECT_DURATION;
          if gt temp 0;
            stats_state.addIntRow "ITEM_EFFECT_DURATION" temp;
          end;
          return;
