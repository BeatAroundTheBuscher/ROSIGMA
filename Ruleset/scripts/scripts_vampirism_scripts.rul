extended:
  tags:  # Remember to add tag definitions to same file as item/armor rulesets!
    RuleItem:
# vampiric on kill; weapons
      TAG_HP_RETURNED_ON_KILL: int
      TAG_ENERGY_RETURNED_ON_KILL: int
      TAG_TIME_RETURNED_ON_KILL: int
      TAG_MORALE_RETURNED_ON_KILL: int
      TAG_STUN_RETURNED_ON_KILL: int
      TAG_MANA_RETURNED_ON_KILL: int
# vampiric on damage; weapons
      YTAG_DAMAGE_RETURNED_AS_HP: int
      YTAG_DAMAGE_RETURNED_AS_ENERGY: int
      YTAG_DAMAGE_RETURNED_AS_TIME: int
      YTAG_DAMAGE_RETURNED_AS_MORALE: int
      YTAG_DAMAGE_RETURNED_AS_STUN: int
      YTAG_DAMAGE_RETURNED_AS_MANA: int
      YTAG_DAMAGE_RETURNED_RESIST_TYPE: int
# vampiric on damage; armors
    RuleArmor:
      YTAG_DAMAGE_RETURNED_AS_HP_BUFF: int
      YTAG_DAMAGE_RETURNED_AS_ENERGY_BUFF: int
      YTAG_DAMAGE_RETURNED_AS_TIME_BUFF: int
      YTAG_DAMAGE_RETURNED_AS_MORALE_BUFF: int
      YTAG_DAMAGE_RETURNED_AS_STUN_BUFF: int
      YTAG_DAMAGE_RETURNED_AS_MANA_BUFF: int
      YTAG_DAMAGE_RETURNED_RESIST_TYPE_ARMOR: int
    RuleSoldier:
# *** Tag for reducing wound time after battle ***
      SOLDIER_WOUND_TIME_MULTIPLIER: int
  scripts:
    damageUnit:
      - offset: 1
        code: |
          var ptre BattleUnit attackingUnit;
          var ptre BattleItem attackingItem;
          var ptr RuleItem itemRuleset;
          var ptr RuleArmor attackerArmor;
          var int hpReturnedCoefficient;
          var int energyReturnedCoefficient;
          var int timeReturnedCoefficient;
          var int moraleReturnedCoefficient;
          var int stunReturnedCoefficient;
          var int manaReturnedCoefficient;
          var int damageReturnedResistType;
          var int hpDamageDone;
          var int hpTarget;
          var int statAttacker;
          var int statMaxAttacker;
          var int hpReturned;
          var int energyReturned;
          var int timeReturned;
          var int moraleReturned;
          var int stunReturned;
          var int manaReturned;
          var int temp;

          var int KillHPReturnedValue;
          var int KillEnergyReturnedValue;
          var int KillTimeReturnedValue;
          var int KillMoraleReturnedValue;
          var int KillStunReturnedValue;
          var int KillManaReturnedValue;

          var int HPReturnedOnKill;
          var int EnergyReturnedOnKill;
          var int TimeReturnedOnKill;
          var int MoraleReturnedOnKill;
          var int StunReturnedOnKill;
          var int ManaReturnedOnKill;


          var int numWounds;

          # debug_log "Drain On Hit/Kill: Script Start";

          set hpDamageDone to_health;
          if le hpDamageDone 0;
            # debug_log "rain On Hit/Kill: No health damage detected. Aborting.";
            return;
          end;

          unit.getHealth hpTarget;
          # debug_log "Drain On Hit/Kill: Target initial HP:" hpTarget;
          damaging_item.getRuleItem itemRuleset;
          # set tag values
          itemRuleset.getTag hpReturnedCoefficient Tag.YTAG_DAMAGE_RETURNED_AS_HP;
          itemRuleset.getTag energyReturnedCoefficient Tag.YTAG_DAMAGE_RETURNED_AS_ENERGY;
          itemRuleset.getTag timeReturnedCoefficient Tag.YTAG_DAMAGE_RETURNED_AS_TIME;
          itemRuleset.getTag moraleReturnedCoefficient Tag.YTAG_DAMAGE_RETURNED_AS_MORALE;
          itemRuleset.getTag stunReturnedCoefficient Tag.YTAG_DAMAGE_RETURNED_AS_STUN;
          itemRuleset.getTag manaReturnedCoefficient Tag.YTAG_DAMAGE_RETURNED_AS_MANA;

          itemRuleset.getTag HPReturnedOnKill Tag.TAG_HP_RETURNED_ON_KILL;
          itemRuleset.getTag EnergyReturnedOnKill Tag.TAG_ENERGY_RETURNED_ON_KILL;
          itemRuleset.getTag TimeReturnedOnKill Tag.TAG_TIME_RETURNED_ON_KILL;
          itemRuleset.getTag MoraleReturnedOnKill Tag.TAG_MORALE_RETURNED_ON_KILL;
          itemRuleset.getTag StunReturnedOnKill Tag.TAG_STUN_RETURNED_ON_KILL;
          itemRuleset.getTag manaReturnedCoefficient Tag.YTAG_DAMAGE_RETURNED_AS_MANA;

          add temp hpReturnedCoefficient;
          add temp energyReturnedCoefficient;
          add temp timeReturnedCoefficient;
          add temp moraleReturnedCoefficient;
          add temp stunReturnedCoefficient;
          add temp HPReturnedOnKill;
          add temp EnergyReturnedOnKill;
          add temp TimeReturnedOnKill;
          add temp MoraleReturnedOnKill;
          add temp StunReturnedOnKill;


          if eq temp 0;
            # debug_log "rain On Hit/Kill: No vampirism tags detected. Aborting.";
            return;
          end;
          # check weapon for resist type
          itemRuleset.getTag damageReturnedResistType Tag.YTAG_DAMAGE_RETURNED_RESIST_TYPE;

          # debug_log "Drain On Hit/Kill: Armor Check";
          # following only if armor provides bonus
          damaging_item.getOwner attackingUnit;
          attackingUnit.getRuleArmor attackerArmor;
          if eq damageReturnedResistType 0;
            attackerArmor.getTag damageReturnedResistType Tag.YTAG_DAMAGE_RETURNED_RESIST_TYPE_ARMOR;
            attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_HP_BUFF;
            add hpReturnedCoefficient temp;
            attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_ENERGY_BUFF;
            add energyReturnedCoefficient temp;
            attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_TIME_BUFF;
            add timeReturnedCoefficient temp;
            attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_MORALE_BUFF;
            add moraleReturnedCoefficient temp;
            attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_STUN_BUFF;
            add stunReturnedCoefficient temp;
            attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_MANA_BUFF;
            add manaReturnedCoefficient temp;
          else;
            attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_RESIST_TYPE_ARMOR;
            if eq temp damageReturnedResistType;
              attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_HP_BUFF;
              add hpReturnedCoefficient temp;
              attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_ENERGY_BUFF;
              add energyReturnedCoefficient temp;
              attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_TIME_BUFF;
              add timeReturnedCoefficient temp;
              attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_MORALE_BUFF;
              add moraleReturnedCoefficient temp;
              attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_STUN_BUFF;
              add stunReturnedCoefficient temp;
              attackerArmor.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_MANA_BUFF;
              add manaReturnedCoefficient temp;
            end;
          end;

          # following only if extra held items are to provide bonus
          attackingUnit.getLeftHandWeapon attackingItem;

          if and neq attackingItem null neq attackingItem damaging_item;
            attackingItem.getRuleItem itemRuleset;
            itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_RESIST_TYPE;

            if eq damageReturnedResistType 0;
              set damageReturnedResistType temp;
            end;

            if eq damageReturnedResistType temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_HP;
              add hpReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_ENERGY;
              add energyReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_TIME;
              add timeReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_MORALE;
              add moraleReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_STUN;
              add stunReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_MANA;
              add manaReturnedCoefficient temp;
            end;
          end;

          attackingUnit.getRightHandWeapon attackingItem;

          if and neq attackingItem null neq attackingItem damaging_item;
            attackingItem.getRuleItem itemRuleset;
            itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_RESIST_TYPE;

            if eq damageReturnedResistType 0;
              set damageReturnedResistType temp;
            end;

            if eq damageReturnedResistType temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_HP;
              add hpReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_ENERGY;
              add energyReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_TIME;
              add timeReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_MORALE;
              add moraleReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_STUN;
              add stunReturnedCoefficient temp;
              itemRuleset.getTag temp Tag.YTAG_DAMAGE_RETURNED_AS_MANA;
              add manaReturnedCoefficient temp;
            end;
          end;

          # check if target not immune to vampirism
          # debug_log "Drain On Hit/Kill: Immunity Check" damageReturnedResistType;
          set temp 100;
          unit.reduceByResistance temp damageReturnedResistType;
          if eq temp 0;
            return;
          end;

          # check if attacker has req. vampiric coeffs
          # debug_log "Drain On Hit/Kill: Coefficient Check";
          if and eq hpReturnedCoefficient 0 eq energyReturnedCoefficient 0 eq timeReturnedCoefficient 0 eq moraleReturnedCoefficient 0 eq stunReturnedCoefficient 0;
            return;
          else;

            # set amount of HP drained, and that it can't be higher than target's total
            unit.getHealth hpTarget;
            # debug_log "Drain On Hit/Kill: Target initial HP:" hpTarget;
            limit_upper hpDamageDone hpTarget;
            set hpReturned hpDamageDone;
            set energyReturned hpDamageDone;
            set timeReturned hpDamageDone;
            set moraleReturned hpDamageDone;
            set stunReturned hpDamageDone;
            set manaReturned hpDamageDone;

            # multiply damage returned to attacker as drain with coefs; muldiv is a*b/c
            muldiv hpReturned hpReturnedCoefficient 100;
            # debug_log "Drain On Hit/Kill: hpReturnedCoefficient:" hpReturnedCoefficient;
            # debug_log "Drain On Hit/Kill: hpReturned after applying hpReturnedCoefficient:" hpReturnedCoefficient;
            muldiv energyReturned energyReturnedCoefficient 100;
            muldiv timeReturned timeReturnedCoefficient 100;
            # debug_log "Drain On Hit/Kill: hpReturnedCoefficient:" hpReturnedCoefficient;
            # debug_log "Drain On Hit/Kill: hpReturned after applying hpReturnedCoefficient:" hpReturnedCoefficient;
            muldiv moraleReturned moraleReturnedCoefficient 100;
            muldiv stunReturned stunReturnedCoefficient 100;
            muldiv manaReturned manaReturnedCoefficient 100;

            # onKill only yields benefits if the target is dead; i.e. current Health is equal to or less than 0.
            # debug_log "Drain On Hit/Kill: Pre-Kill Check; Damage Done:" hpDamageDone;
            # debug_log "Drain On Hit/Kill: Pre-Kill Check; Target HP:" hpTarget;
            if ge hpDamageDone hpTarget;
              # debug_log "Drain On Hit/Kill: Kill Check Successful";
              add KillHPReturnedValue HPReturnedOnKill;
              # debug_log "Drain On Hit/Kill: KillHPReturnedValue" KillHPReturnedValue;
              add KillEnergyReturnedValue EnergyReturnedOnKill;
              # debug_log "Drain On Hit/Kill: KillEnergyReturnedValue" KillEnergyReturnedValue;
              add KillTimeReturnedValue TimeReturnedOnKill;
              # debug_log "Drain On Hit/Kill: KillTimeReturnedValue:" KillTimeReturnedValue;
              add KillMoraleReturnedValue MoraleReturnedOnKill;
              # debug_log "Drain On Hit/Kill: KillMoraleReturnedValue" KillMoraleReturnedValue;
              add KillStunReturnedValue StunReturnedOnKill;
              # debug_log "Drain On Hit/Kill: KillStunReturnedValue" KillStunReturnedValue;
              add KillManaReturnedValue ManaReturnedOnKill;
              # debug_log "Drain On Hit/Kill: KillStunReturnedValue" KillStunReturnedValue;
            end;

            # debug_log "Drain On Hit/Kill: hpReturned before resistances" hpReturned;
            # debug_log "Drain On Hit/Kill: timeReturned before resistances" timeReturned;
            # factor in specified resistance
            unit.reduceByResistance hpReturned damageReturnedResistType;
            unit.reduceByResistance energyReturned damageReturnedResistType;
            unit.reduceByResistance timeReturned damageReturnedResistType;
            unit.reduceByResistance moraleReturned damageReturnedResistType;
            unit.reduceByResistance stunReturned damageReturnedResistType;
            unit.reduceByResistance manaReturned damageReturnedResistType;
            # debug_log "Drain On Hit/Kill: hpReturned after resistances" hpReturned;
            # debug_log "Drain On Hit/Kill: timeReturned after resistances" timeReturned;

            # set the appropriate stats, respecting the maximum values
            attackingUnit.getHealth statAttacker;
            attackingUnit.getHealthMax statMaxAttacker;
            add hpReturned statAttacker;
            # debug_log "Drain On Hit/Kill: hpReturned pre-kill" hpReturned;
            add hpReturned KillHPReturnedValue;
            # debug_log "Drain On Hit/Kill: hpReturned post-kill" hpReturned;
            set temp hpReturned;
            sub temp statMaxAttacker; # calculate the excess healing if any
            attackingUnit.getFatalwoundsTotal numWounds;
            # debug_log "Drain On Hit/Kill: Total number of wounds:" numWounds;
            # excess healing removes 1 fatal wound per 5 health regained above the unit's maximum hit points
            if and gt temp 0 gt numWounds 0;
              div temp 5;
              loop var i 6; # cycle through the body parts
                # debug_log "Drain On Hit/Kill: Body Part Loop  #:" i;
                # debug_log "Drain On Hit/Kill: Number of Heals:" temp;
                attackingUnit.getFatalwounds numWounds i; # check the number of wounds in this bodypart
                # debug_log "Drain On Hit/Kill: Number of wounds in bodypart:" numWounds;
                if gt numWounds 0; # if there are any wounds in this body part, remove as many as we can
                  if gt numWounds temp; # if there are more wounds than heals in this body part, subtract the heals from the wounds and zero out heals
                    sub numWounds temp;
                    set temp 0;
                    # debug_log "Drain On Hit/Kill: Wounds Greater/Equal To Heals: Number of wounds in bodypart:" numWounds;
                  else le numWounds temp;
                    sub temp numWounds; # if there are more heals than wounds in this body part, subtract the wounds from the heals and zero out wounds
                    set numWounds 0;
                    # debug_log "Drain On Hit/Kill: Wounds Less Than Heals: Number of wounds in bodypart:" numWounds;
                  end;
                  # debug_log "Drain On Hit/Kill: Number of Heals Remaining:" temp;
                  # debug_log "Drain On Hit/Kill: Wounds Remaining in Bodypart:" numWounds;
                  attackingUnit.setFatalwounds i numWounds; # remove the wounds
                  attackingUnit.getFatalwoundsTotal numWounds; # recalculate wounds
                  # debug_log "Drain On Hit/Kill: Total number of wounds remaining:" numWounds;
                end;
              end;
            end;
            # cap the healing to the unit's maximum Health
            limit_upper hpReturned statMaxAttacker;
            # debug_log "Drain On Hit/Kill: hpReturned final" hpReturned;
            attackingUnit.setHealth hpReturned;

            attackingUnit.getEnergy statAttacker;
            attackingUnit.getEnergyMax statMaxAttacker;
            add energyReturned statAttacker;
            add energyReturned KillEnergyReturnedValue;
            limit_upper energyReturned statMaxAttacker;
            # debug_log "Drain On Hit/Kill: energyReturned final" energyReturned;
            attackingUnit.setEnergy energyReturned;

            attackingUnit.getTimeUnits statAttacker;
            # debug_log "Drain On Hit/Kill: Attacker current TU:" statAttacker;
            attackingUnit.getTimeUnitsMax statMaxAttacker;
            # debug_log "Drain On Hit/Kill: timeReturned pre-attacker TU:" timeReturned;
            # debug_log "Drain On Hit/Kill: KillTimeReturnedValue pre-attacker TU:" KillTimeReturnedValue;
            add timeReturned statAttacker;
            # debug_log "Drain On Hit/Kill: timeReturned + statAttacker" timeReturned;
            add timeReturned KillTimeReturnedValue;
            limit_upper timeReturned statMaxAttacker;
            # debug_log "Drain On Hit/Kill: timeReturned final" timeReturned;
            attackingUnit.setTimeUnits timeReturned;

            # special case, morale return is influenced by bravery
            # if neq moraleReturned 0;
            #  attackingUnit.reduceByBravery moraleReturned;
            # end;
            attackingUnit.getMorale statAttacker;
            add moraleReturned statAttacker;
            add moraleReturned KillMoraleReturnedValue;
            limit_upper moraleReturned 100;
            # debug_log "Drain On Hit/Kill: moraleReturned final" moraleReturned;
            attackingUnit.setMorale moraleReturned;

            attackingUnit.getStun statAttacker;
            sub statAttacker stunReturned;
            sub statAttacker KillStunReturnedValue;
            limit_lower stunReturned 0;
            # debug_log "Drain On Hit/Kill: stunReturned final" moraleReturned;
            attackingUnit.setStun statAttacker;

            attackingUnit.getMana statAttacker;
            attackingUnit.getManaMax statMaxAttacker;
            add statAttacker manaReturned;
            add statAttacker KillManaReturnedValue;
            limit_upper manaReturned statMaxAttacker;
            # debug_log "Drain On Hit/Kill: manaReturned final" moraleReturned;
            attackingUnit.setMana statAttacker;
          end;

          return;