extended:
  tags:
    RuleItem:
      ITEM_DAMAGE_PERCENT_VS_MECHANICAL: int
      ITEM_IS_BUFF_WEAPON: int

  scripts:
    damageUnit:
      - new: ROSIGMA_dU_alpha_infiltration
        offset: 90
        code: |
          var int faction;
          var int temp;
          var ptr RuleUnit alpha;
          var ptr RuleResearch researchTopic;
          var int canBeTraitor;
          var int randomNumber;
          var ptr RuleArmor armorRule;
          var ptr GeoscapeGame geoScape;

          #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: weapon_item" weapon_item;

          battle_game.getGeoscapeGame geoScape;
          rules.getRuleResearch researchTopic "STR_ALPHA_LEGION_PURGED"; #if Alpha Legion was purged, abort.
          geoScape.isResearched temp researchTopic;
          if gt temp 0;
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Aborting. Alpha Legion Purged." temp;
            return;
          end;

          rules.getRuleResearch researchTopic "STR_ALPHA_LEGION_INFILTRATED"; #if Alpha Legion isn't infiltrating, abort.
          #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: researchTopic:" researchTopic;
          geoScape.isResearched temp researchTopic;
          #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: temp:" temp;
          if eq temp 0;
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Aborting. No Alpha Legion Infiltration. temp:" temp;
            return;
          end;

          attacker.getFaction faction; #the attacker must be from the player's faction
          if neq faction FACTION_PLAYER;
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Aborting. Attacker isn't player faction." faction;
            return;
          end;

          unit.getFaction faction;
          if eq faction 1; #the victim must not be hostile; civilian or player faction only
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Aborting. Target is enemy." unit;
            return;
          end;

          # Abort for inappropriate damage type or if the attacker or victim are null
          if eq attacker unit;
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Aborting. Victim is also attacker.";
            return;
          end;

          attacker.getRuleArmor armorRule; #if the attacker is a 2x2 unit, we abort.
          armorRule.getSize temp;
          if eq temp 2; # we ignore tanks
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Aborting. Attacker is 2x2.";
            return;
          end;

          weapon_item.getTag temp Tag.ITEM_IS_BUFF_WEAPON;
          if eq temp 1; # we ignore buffing items/weapons
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Aborting. Attacking item is a buff item.";
            return;
          end;

          armorRule.getTag temp Tag.UNIT_TYPE_MECHANICAL;
          if eq temp 1; # we ignore mechanical units
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Aborting. Attacker is mechanical.";
            return;
          end;

          unit.getTag temp Tag.CURRENT_INFECTION_DAMAGE;
          if gt temp 0; # we always ignore infected units
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Aborting. Target is infected.";
            return;
          end;

          if or eq null attacker eq null unit;
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Aborting. Attacker or victim is null.";
            return;
          end;

          if or eq damaging_type 0 eq damaging_type 6 eq damaging_type 9 eq damaging_type 10;
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Aborting. Damage is inappropriate type." damaging_type;
            return;
          end;

          set temp to_health; #need to deal at least some damage
          if lt temp 1;
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Aborting. No damage dealt." temp;
            return;
          end;

          unit.getHealth temp;
          sub temp to_health;
          battle_game.randomRange randomNumber 0 100;
          #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Random roll:" randomNumber;

          if lt temp 1; #if we kill the target, 90% chance we are an Alpha Legion traitor;
            unit.getHealthMax temp; #percentage chance is equal to the victim's max health.
            limit_upper temp 95; #we don't exceed a 95% chance
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Bonus to roll from kill:" temp;
          else; #if we don't kill, the chance of a reveal is proportional to the damage we deal; half the to_health value, capping at 50%.
            set temp to_health;
            div temp 4;
            limit_upper temp 50; #cap the chance from damage at 50
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Bonus to roll from damage:" temp;
          end;

          add randomNumber temp; #add our roll bonus

          if lt randomNumber 100; #10% chance to be traitor if we merely damaged the friendly unit; 90% if we killed them.
            #debug_log "ROSIGMA_dU_alpha_infiltration Scripts; damageUnit, offset 90: Aborting. Roll too low to be traitor." randomNumber;
            return;
          end;

          battle_game.randomRange temp 1 10;
          if lt temp 9;
            rules.getRuleUnit alpha "STR_ALPHA_SOLDIER_CORVUS_INFILTRATOR"; #turn the offender into an Alpha Legion; CQC
          else;
            rules.getRuleUnit alpha "STR_ALPHA_SOLDIER_INFILTRATOR"; #turn the offender into an Alpha Legion; Ranged
          end;
          attacker.setSpawnUnit alpha;
          attacker.setSpawnUnitFaction FACTION_HOSTILE;
          attacker.setSpawnUnitInstantRespawn 1;
          battle_game.flashMessage "STR_ALPHA_LEGION_INFILTATION_REVEAL_MESSAGE";
          return;