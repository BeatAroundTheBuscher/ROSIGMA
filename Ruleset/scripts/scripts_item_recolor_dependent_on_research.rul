extended:
  tags:
    RuleItem:
      ITEM_GUARD_COLOR: int
      ITEM_MARINE_COLOR: int
      ITEM_NEW_ARBITES_COLOR: int
      ITEM_NEW_CHAOS_CULT_COLOR: int
      ITEM_NEW_CHAOS_PATH_COLOR: int

items:
  - &STR_ITEM_CHANGE_COLOR
    type: STR_AUTOGUN
    tags:
      ITEM_GUARD_COLOR: 4
      ITEM_MARINE_COLOR: 7
      ITEM_NEW_ARBITES_COLOR: 15
      ITEM_NEW_CHAOS_CULT_COLOR: 10
      ITEM_NEW_CHAOS_PATH_COLOR: 2
    scripts:
      recolorItemSprite: |
        var ptr RuleItem weaponRuleset;
        var int newWeaponColor;
        var int oldGuardColor;
        var int oldMarineColor;
        var int color;
        var int isArbites;
        var int isChaos;
        var int isGeneralChaos;
        var ptr GeoscapeGame geoScape;
        var ptr RuleResearch researchTopic;

        if or eq blit_part blit_item_big eq blit_part blit_item_lefthand eq blit_part blit_item_righthand eq blit_part blit_item_floor;

          battle_game.getGeoscapeGame geoScape;
          rules.getRuleResearch researchTopic "STR_ARBITES";
          geoScape.isResearched isArbites researchTopic;

          rules.getRuleResearch researchTopic "STR_CHAOS_STRATEGY_ARBITES";
          geoScape.isResearched isChaos researchTopic;

          rules.getRuleResearch researchTopic "STR_CHAOS_PATH";
          geoScape.isResearched isGeneralChaos researchTopic;

          if or eq isArbites 1 eq isChaos 1 eq isGeneralChaos 1;

            item.getRuleItem weaponRuleset;
            if eq isArbites 1;
              weaponRuleset.getTag newWeaponColor Tag.ITEM_NEW_ARBITES_COLOR;
            else;
              weaponRuleset.getTag newWeaponColor Tag.ITEM_NEW_CHAOS_CULT_COLOR;
            end;
            if neq newWeaponColor 0;
              weaponRuleset.getTag oldGuardColor Tag.ITEM_GUARD_COLOR;
              weaponRuleset.getTag oldMarineColor Tag.ITEM_MARINE_COLOR;
              get_color color new_pixel;
            if and eq isChaos 0 eq isGeneralChaos 1;
              weaponRuleset.getTag newWeaponColor Tag.ITEM_NEW_CHAOS_PATH_COLOR;
            end;

              if or eq color oldGuardColor eq color oldMarineColor eq color 1;
                set_color new_pixel newWeaponColor;
              end;
            end;
          end;

        end;

        add_shade new_pixel shade;
        return new_pixel;


  - type: STR_AUTOPISTOL
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_LASER_RIFLEG
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_LASER_PISTOLG
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_GRENADE_LAUNCHER
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_GRENADE_LAUNCHER_STEEL_LEGION
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_FRAG_GRENADE_DRUM
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_KRAK_GRENADE_DRUM
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_INCENDIARY_GRENADE_DRUM
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_SMOKE_GRENADE_DRUM
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_PHOTON_GRENADE_DRUM
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_HEAVY_BOLTER_GUARD
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_HEAVY_WEAPON_TOOLS
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_DISPOSABLE_LAUNCHER_KRAK
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_SENTINEL_MISSILE_LAUNCHER
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_CHAINSWORD_GUARD
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_AUTOPISTOL_HIGHGRADE
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_AUTOGUN_HIGHGRADE
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_AUTOGUN_HIGHGRADE_UNDERSLUNG
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_STUBCANNON_GUARD
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_AUTOGUN_CLIP_DRUM
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_AUTOGUN_CLIP_DRUM_KRAKEN
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_GRENADE_LAUNCHER
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_BOLTER_LIGHT_LMG
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_HEAVY_STUBBER
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_ROTORATOR
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_LASCANONATOR
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: AUX_HOVERTANK_LASER
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: AUX_HOVERTANK_LAUNCHER
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_POWERFIST
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_ROCKET_LAUNCHER
    refNode: *STR_ITEM_CHANGE_COLOR

  - type: STR_MOUNTED_LASCANNON
    refNode: *STR_ITEM_CHANGE_COLOR