extended:
  tags:
    RuleItem:
      ITEM_IS_KAMIKAZI_TRIGGER: int  # does attacking with this trigger bombs to activate? If this is 2 then the triggering attack will deplete all remaining TU
      ITEM_IS_BOMB: int  # does this blow up with manual activation? The bomb fuse timer is equal to this value - 1.
      ITEM_IS_BOMB_ON_DEATH: int  # does this blow up on death? The bomb fuse timer is equal to this value - 1.
      ITEM_IS_RANDOM_FUSE: int  # sets the fuse to a random value between 0 and ITEM_RANDOM_FUSE values.
      ITEM_IS_KAMIKAZI_BOMB: int  # damage from this will kill the source if they have the Kamikazi armor tag.
    RuleArmor:
      ARMOR_IS_EXPLODE_ON_DEATH: int  # do we check this unit on death for bombs to activate? If > 1 we don't trigger on lethal damage; mainly for relying on native selfDestruct
      ARMOR_IS_KAMIKAZI: int  # do we kamikazi when we hit regardless of the weapon used?
      ARMOR_FORCE_DEATH_ON_KAMIKAZI: int  # do we force a death if we kamikazi?
      ARMOR_IS_DUMMY: int  # is this a dummy we immediately kill off and trigger the bomb for?
      ARMOR_IS_EXPLODE_ON_DEATH_MELEE_BYPASS: int  # if true, melee type damage bypasses the self-destruct

  scripts:
    hitUnit:
      - new: ROSIGMA_hU_bomberman
        offset: 44
        code: |
          var ptr RuleArmor armorRule;
          var int temp;
          var int temp2;
          var int fuseEnabled;
          var ptre BattleItem someItem;
          var int numInventoryItems;
          var int randomFuse;

          # if our weapon doesn't have the kamikazi tag, cancel out
          weapon_item.getTag temp Tag.ITEM_IS_KAMIKAZI_TRIGGER; # we check the weapon for this tag to avoid having to cycle through items every time we damage something
          if lt temp 1;
            # debug_log "Bomberman Scripts; hitUnit, offset 44: Aborted. No ITEM_IS_KAMIKAZI_TRIGGER Tag Detected";
            return power part side;
          else ge temp 2; #this weapon is for triggering purposes only
            attacker.setTimeUnits 0;
            # debug_log "Bomberman Scripts; hitUnit, offset 44: ITEM_IS_KAMIKAZI_TRIGGER value of 2. temp: " temp;
          end;

          # if our armor doesn't have the kamikazi tag, cancel out
          attacker.getRuleArmor armorRule;
          armorRule.getTag temp Tag.ARMOR_IS_KAMIKAZI; # we check the armor for this tag to avoid having to cycle through items every time we damage something
          if lt temp 1;
            # debug_log "Bomberman Scripts; hitUnit, offset 44: Aborted. No ARMOR_IS_KAMIKAZI Tag Detected";
            return power part side;
          end;

          attacker.getInventoryItem.size numInventoryItems;
          # debug_log "Bomberman Scripts; hitUnit, offset 44: numInventoryItems" numInventoryItems;
          loop var i numInventoryItems;
            attacker.getInventoryItem someItem i;
            someItem.getTag temp Tag.ITEM_IS_BOMB; # get the bomb timer
            someItem.isFuseEnabled fuseEnabled; # don't bother if the fuse is already active
            # debug_log "Bomberman Scripts; hitUnit, offset 44: Current item in inventory:" someItem;
            # attacker.setTag Tag.UNIT_TURNED_TRAITOR 1; # doesn't recolor fast enough
            if and ge temp 1 lt fuseEnabled 1;
              someItem.getTag randomFuse Tag.ITEM_IS_RANDOM_FUSE; # check if the fuse is random
              if gt randomFuse 0;
                battle_game.randomRange temp 0 randomFuse;
                # debug_log "Bomberman Scripts; hitUnit, offset 43: Random fuse. Random fuse upper limit:" randomFuse;
              else;
                set temp 0;
              end;
              someItem.setFuseTimer temp;
              someItem.setFuseEnabled 1;
              # debug_log "Bomberman Scripts; hitUnit, offset 44: Successful. Bomb Triggered. Bomb Item:" someItem;
              # debug_log "Bomberman Scripts; hitUnit, offset 44: Successful. Bomb Fuse. Fuse Timer:" temp;
            end;
          end;

          armorRule.getTag temp Tag.ARMOR_FORCE_DEATH_ON_KAMIKAZI;
          if gt temp 0;
            attacker.setHealthWithOverkill -1; # kill our kamikazi unit
            # debug_log "Bomberman Scripts; hitUnit, offset 44: self-destructing kamikazi unit: ARMOR_FORCE_DEATH_ON_KAMIKAZI Tag Detected";
          end;

          return power part side;

    # blow up our bomb if we're killed
    damageUnit:
      - new: ROSIGMA_dU_bomberman
        offset: 99
        code: |
          var ptr RuleItem ruleItem;
          var int temp;
          var int fuseEnabled;
          # var int deathBombs;
          var ptre BattleItem someItem;
          var int numInventoryItems;
          var int remainingHealth;
          var ptr RuleArmor armorRule;
          var int randomFuse;

          # if our armor doesn't have the kamikazi tag, cancel out
          unit.getRuleArmor armorRule;
          armorRule.getTag temp Tag.ARMOR_IS_EXPLODE_ON_DEATH; # Are we set to explode on death? If greater than 1, we kamikazi through melee attacks only.
          if lt temp 1;
            # debug_log "Bomberman Scripts; damageUnit, offset 99: Aborted. No ARMOR_IS_EXPLODE_ON_DEATH Tag Detected";
            return;
          end;

          unit.getHealth remainingHealth;
          sub remainingHealth to_health;

          # if we're not killed cancel out
          if gt remainingHealth 0;
            # debug_log "Bomberman Scripts; damageUnit, offset 99: Aborted. Target still alive." remainingHealth;
            return;
          end;

          unit.getTag temp Tag.UNIT_OVERKILL_DISABLE_SELF_DESTRUCT; # if overkill disables self-destruct, set our SD chance to 0.
          if gt temp 0;
            # debug_log "Bomberman Scripts; damageUnit, offset 99: Aborted. UNIT_OVERKILL_DISABLE_SELF_DESTRUCT set to:" temp;
            return;
          end;

          unit.getInventoryItem.size numInventoryItems;
          # debug_log "numInventoryItems" numInventoryItems;
          loop var i numInventoryItems;
            unit.getInventoryItem someItem i;
            someItem.getTag temp Tag.ITEM_IS_BOMB_ON_DEATH; # get the bomb timer
            someItem.isFuseEnabled fuseEnabled; # don't bother if the fuse is already active
            # unit.setTag Tag.UNIT_TURNED_TRAITOR 1; # doesn't recolor fast enough
            if and ge temp 1 lt fuseEnabled 1;
              # add deathBombs 1; # increment the number of death bombs
              someItem.getTag randomFuse Tag.ITEM_IS_RANDOM_FUSE; # check if the fuse is random
              if ge randomFuse 1;
                battle_game.randomRange temp 0 randomFuse;
                # debug_log "Bomberman Scripts; damageUnit, offset 99: Random fuse. Random fuse upper limit:" randomFuse;
              else;
                sub temp 1;
              end;
              # someItem.InventoryMoveCost.setBaseTimePercent 999;
              someItem.setFuseTimer temp;
              someItem.setFuseEnabled 1;
              # debug_log "Bomberman Scripts; damageUnit, offset 99: Successful. Bomb Triggered. Bomb Item:" someItem;
              # debug_log "Bomberman Scripts; damageUnit, offset 99: Successful. Bomb Fuse. Fuse Timer:" temp;
            end;
          end;
          # if lt deathBombs 1;
            # debug_log "Bomberman Scripts; damageUnit, offset 99: Failed. No Kamikazi Bomb detected. Item:";
          # end;
          return;

    damageSpecialUnit:
      - new: ROSIGMA_dSU_bomberman
        offset: 99
        code: |
          var ptr RuleUnit myRuleUnit;
          var ptr RuleArmor myRuleArmor;
          var int temp;
          var int temp2;

          # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: unit:" unit;
          # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: attacker:" attacker;

          unit.getHealth temp; # don't bother if we have more than 0 health
          sub temp health_damage;
          if gt temp 0;
            unit.getRuleArmor myRuleArmor;
            myRuleArmor.getTag temp Tag.ARMOR_IS_KAMIKAZI; # don't bother unless we're a scripted kamikazi
            weapon_item.getTag temp2 Tag.ITEM_IS_KAMIKAZI_BOMB;
            # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: ARMOR_IS_KAMIKAZI:" temp;
            # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: ITEM_IS_KAMIKAZI_BOMB:" temp2;
            set self_destruct_chance 0;
            if and gt temp 0 gt temp2 0 eq unit attacker; # if we're the attacker, we and our damage source have the kamikazi tag kill ourselves.
              unit.setHealth 0;
              # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: Self-destruct unit survived; zeroing out health:" temp;
            end;
            # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: Aborting. Non-lethal damage. Remaining health (temp):" temp;
            return;
          end;

          unit.getRuleArmor myRuleArmor; # prevent double kamikazi detonations
          myRuleArmor.getTag temp Tag.ARMOR_IS_KAMIKAZI;
          weapon_item.getTag temp2 Tag.ITEM_IS_KAMIKAZI_BOMB;
          # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: ARMOR_IS_KAMIKAZI:" temp;
          # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: ITEM_IS_KAMIKAZI_BOMB:" temp2;
          if and gt temp 0 gt temp2 0 eq unit attacker; # if we're the attacker, we and our damage source have the kamikazi tag prevent self-destructing again
            set self_destruct_chance 0;
            # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: Kamikazi bombs already triggered; negating self-destruct chance." temp;
            return;
          end;

          unit.getRuleArmor myRuleArmor;
          myRuleArmor.getTag temp Tag.ARMOR_IS_EXPLODE_ON_DEATH_MELEE_BYPASS; # melee bypasses self-destruct if we have this tag.
          # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: ARMOR_IS_EXPLODE_ON_DEATH_MELEE_BYPASS:" temp;
          # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: battle_action:" battle_action;
          if and eq temp 1 eq battle_action BA_HIT;
            set self_destruct_chance 0;
            # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: Aborting. Melee damage bypasses self-destruct, ARMOR_IS_EXPLODE_ON_DEATH_MELEE_BYPASS:" temp;
            return;
          end;

          myRuleArmor.getTag temp Tag.ARMOR_IS_EXPLODE_ON_DEATH; # don't bother unless we're a scripted kamikazi
          if lt temp 1;
            # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: Aborting. Unit not set to explode on death:" temp;
            return;
          end;

          unit.getTag temp Tag.UNIT_OVERKILL_DISABLE_SELF_DESTRUCT; # if overkill disables self-destruct, set our SD chance to 0.
          if gt temp 0;
            set self_destruct_chance 0;
            # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: Aborting. UNIT_OVERKILL_DISABLE_SELF_DESTRUCT set to:" temp;
            return;
          end;

          set self_destruct_chance 100; # melee type damage and other such typical negators will not stop us from self-destructing due to our ARMOR_IS_EXPLODE_ON_DEATH tag
          # debug_log "Bomberman Scripts; ROSIGMA_dSU_bomberman, offset 99: self_destruct_chance set to 100";

          return;

    createUnit:
      - new: ROSIGMA_cU_bomberman
        offset: 10
        code: |
          var ptr RuleItem ruleItem;
          var int temp;
          var int fuseEnabled;
          var ptre BattleItem someItem;
          var int numInventoryItems;
          var int remainingHealth;
          var ptr RuleArmor armorRule;
          var int randomFuse;

          # if our armor doesn't have the kamikazi tag, cancel out
          unit.getRuleArmor armorRule;
          armorRule.getTag temp Tag.ARMOR_IS_DUMMY; # we check the armor for this tag to avoid having to cycle through items every time we damage something
          if le temp 0;
            # debug_log "Bomberman Scripts; ROSIGMA_cU_bomberman, offset 10: Aborted. No ARMOR_IS_DUMMY Tag Detected";
            return;
          end;

          unit.getInventoryItem.size numInventoryItems;
          # debug_log "numInventoryItems" numInventoryItems;
          loop var i numInventoryItems;
            unit.getInventoryItem someItem i;
            someItem.getTag temp Tag.ITEM_IS_BOMB_ON_DEATH; # get the bomb timer
            someItem.isFuseEnabled fuseEnabled; # don't bother if the fuse is already active
            if and ge temp 1 le fuseEnabled 0;
              someItem.getTag randomFuse Tag.ITEM_IS_RANDOM_FUSE; # check if the fuse is random
              if ge randomFuse 1;
                battle_game.randomRange temp 0 randomFuse;
                # debug_log "Bomberman Scripts; damageUnit, offset 99: Random fuse. Random fuse upper limit:" randomFuse;
              else;
                sub temp 1;
              end;
              # someItem.InventoryMoveCost.setBaseTimePercent 999;
              someItem.setFuseTimer temp;
              someItem.setFuseEnabled 1;
              # debug_log "Bomberman Scripts; ROSIGMA_cU_bomberman, offset 10: Successful. Bomb Triggered. Bomb Item:" someItem;
              # debug_log "Bomberman Scripts; ROSIGMA_cU_bomberman, offset 10: Successful. Bomb Fuse. Fuse Timer:" temp;
              unit.setHealthWithOverkill -1; # kill our kamikazi unit
              # unit.getHealth remainingHealth;
              # debug_log "Bomberman Scripts; ROSIGMA_cU_bomberman, offset 10: Killing unit. remainingHealth:" remainingHealth;
              return;
            end;
          end;
          # debug_log "Bomberman Scripts; ROSIGMA_cU_bomberman, offset 10: Failed. No Kamikazi Bomb detected. Item:";
          return;

      - new: ROSIGMA_cU_bomberman_2
        offset: 11
        code: |
          var ptr RuleItem ruleItem;
          var int temp;
          var int fuseEnabled;
          var ptre BattleItem someItem;
          var int numInventoryItems;
          var int remainingHealth;
          var ptr RuleArmor armorRule;
          var int randomFuse;

          # if our armor doesn't have the kamikazi tag, cancel out
          unit.getRuleArmor armorRule;
          armorRule.getTag temp Tag.ARMOR_IS_DUMMY; # we check the armor for this tag to avoid having to cycle through items every time we damage something
          if le temp 0;
            # debug_log "Bomberman Scripts; ROSIGMA_cU_bomberman, offset 11: Aborted. No ARMOR_IS_DUMMY Tag Detected";
            return;
          end;

          unit.setHealthWithOverkill -1; # kill our kamikazi unit
          # unit.getHealth remainingHealth;
          # debug_log "Bomberman Scripts; ROSIGMA_cU_bomberman, offset 11: Killing unit. remainingHealth:" remainingHealth;
          return;

    visibilityUnit:
      - new: ROSIGMA_vU_bomberman
        offset: 1  # hide unit
        code: |
          var ptr RuleArmor myRuleArmor;
          var int temp;

          target_unit.getRuleArmor myRuleArmor;
          myRuleArmor.getTag temp Tag.ARMOR_IS_DUMMY;

          if eq temp 1;
            # debug_log "Bomberman Scripts; ROSIGMA_vU_bomberman, offset 11: making dummy unit invisible per ARMOR_IS_DUMMY tag, temp:" temp;
            return 0 visibility_mode;
          end;

          return current_visibility visibility_mode;