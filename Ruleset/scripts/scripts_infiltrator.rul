extended:
  tagsFile: Ruleset/tags_ROSIGMA.rul

  scripts:
    newTurnUnit:
      - new: ROSIGMA_nTU_infiltration_decrement_stealth
        offset: 2
        code: |
          var int temp;
          var int temp2; # turret reload turn data for right handed weapon
          var ptr RuleArmor myRuleArmor;

          battle_game.getTurn temp;
          if le temp 0; # we don't care about Turn 0 and prior; abort.
            # debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_decrement_stealth | offset: 2 | Not past turn 0. Aborting.";
            return;
          end;

          battle_game.getTurnSide temp; # trigger only on the same turn as the unit's faction
          unit.getFaction temp2;
          if neq temp temp2;
            # debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_decrement_stealth | offset: 2 | Not the same turn as the unit. Aborting.";
            return;
          end;

          unit.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE; # get the unit's current stealth counter

          if le temp 0;
            # debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_decrement_stealth | offset: 2 | Target lacks UNIT_STEALTH_IS_ACTIVE. Aborting.";
            unit.getRuleArmor myRuleArmor;
            myRuleArmor.getTag temp Tag.ARMOR_RESTEALTH_TURN_REQUIREMENT; #check to see if we're a camo cloak
            if gt temp 0;
              unit.getTag temp2 Tag.UNIT_STEALTH_CHARGE_TURN_COUNTER;
              if lt temp2 temp;
                sub temp temp2;
                add temp2 1;
                unit.setTag Tag.UNIT_STEALTH_CHARGE_TURN_COUNTER temp2;
                battle_game.flashMessage "STR_SCRIPT_INFILTRATION_RECHARGING" temp;
              else;
                battle_game.flashMessage "STR_SCRIPT_INFILTRATION_RECHARGED";
              end;
            end;
            return;
          end;

          sub temp 1; # decrement the counter by 1;
          unit.setTag Tag.UNIT_STEALTH_IS_ACTIVE temp; # set our stealth counter to the Infiltrator value

          if lt temp 1;
            battle_game.flashMessage "STR_SCRIPT_INFILTRATION_NO_TIME_REMAINING";
            unit.getRuleArmor myRuleArmor;
            myRuleArmor.getTag temp Tag.ARMOR_RESTEALTH_TURN_REQUIREMENT; #check to see if we're a camo cloak
            unit.setTag Tag.UNIT_CAMO_CLOAK_MOVE_COST_MULTIPLIER 0;
            if gt temp 0; #revert normal movement
              unit.getTag temp Tag.UNIT_DIG_IN_MOVE_PENALTY;
              if le temp 100;
                unit.MoveCost.setBaseNormalTimePercent 100;
              end;
            end;
            return;
          end;

          battle_game.flashMessage "STR_SCRIPT_INFILTRATION_TIME_REMAINING" temp;
          return;

      - new: ROSIGMA_nTU_infiltration_set_stealth
        offset: 3
        code: |
          var int temp;
          var int temp2; # turret reload turn data for right handed weapon
          var ptr RuleArmor myRuleArmor;

          battle_game.getTurn temp;
          if gt temp 1; # we don't care about Turns beyond turn 1; abort.
            # debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_set_stealth | offset: 3 | Past turn 1. Aborting." temp;
            return;
          end;

          # debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_set_stealth | offset: 3 | Current Turn per battle_game.getTurn, temp:" temp;

          battle_game.getTurnSide temp; # trigger only on the same turn as the unit's faction
          unit.getFaction temp2;
          if neq temp temp2;
            # debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_set_stealth | offset: 3 | Not the same turn as the unit. Aborting.";
            return;
          end;

          unit.getRuleArmor myRuleArmor;
          myRuleArmor.getTag temp2 Tag.ARMOR_IS_INFILTRATOR; # get the unit's infiltrator value

          if le temp2 0;
            # debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_set_stealth | offset: 3 | Target lacks ARMOR_IS_INFILTRATOR. Aborting.";
            return;
          end;

          myRuleArmor.getTag temp Tag.ARMOR_RESTEALTH_TURN_REQUIREMENT; # get the unit's infiltrator value
          if gt temp 0;
            # debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_set_stealth | offset: 3 | Unit has camo cloak. Aborting.";
            return;
          end;

          unit.setTag Tag.UNIT_STEALTH_IS_ACTIVE temp2; # set our stealth counter to the Infiltrator value
          battle_game.flashMessage "STR_SCRIPT_INFILTRATION_UNIT_STEALTHED" temp2;
          # debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_set_stealth | offset: 3 | Current Turn:" turn;
          # debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_set_stealth | offset: 3 | UNIT_STEALTH_IS_ACTIVE. temp." temp;
          return;


    # if you hit or are hit while in stealth mode, you lose your stealth
    hitUnit:
      - new: ROSIGMA_hU_infiltration_stealth_deactivate_on_hit
        offset: 1  # hide unit
        code: |
          var int temp;
          var ptr RuleArmor myRuleArmor;

          unit.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE;
          if lt temp 1;
            return power part side;
          end;

          # disable stealth for unit from non-impact damage
          if neq damaging_type 10;
            battle_game.flashMessage "STR_SCRIPT_INFILTRATION_NO_TIME_REMAINING";
            unit.setTag Tag.UNIT_STEALTH_IS_ACTIVE 0;
            unit.getRuleArmor myRuleArmor;
            myRuleArmor.getTag temp Tag.ARMOR_RESTEALTH_TURN_REQUIREMENT; #check to see if we're a camo cloak
            unit.setTag Tag.UNIT_CAMO_CLOAK_MOVE_COST_MULTIPLIER 0;
            if gt temp 0; #revert normal movement
              unit.getTag temp Tag.UNIT_DIG_IN_MOVE_PENALTY;
              if le temp 100;
                unit.MoveCost.setBaseNormalTimePercent 100;
              end;
            end;
            # debug_log "ROSIGMA_hU_infiltration_stealth_deactivate_on_hit, offset 1: disabling target invisibility due to damage. UNIT_STEALTH_IS_ACTIVE";
            return power part side;
          end;

          return power part side;

      - new: ROSIGMA_hU_infiltration_stealth_deactivate_on_attack
        offset: 1  # hide unit
        code: |
          var int temp;
          var ptr RuleArmor myRuleArmor;

          attacker.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE;
          if lt temp 1;
            return power part side;
          end;

          battle_game.flashMessage "STR_SCRIPT_INFILTRATION_NO_TIME_REMAINING";
          attacker.setTag Tag.UNIT_STEALTH_IS_ACTIVE 0; # disable stealth
          attacker.getRuleArmor myRuleArmor;
          myRuleArmor.getTag temp Tag.ARMOR_RESTEALTH_TURN_REQUIREMENT; #check to see if we're a camo cloak
          attacker.setTag Tag.UNIT_CAMO_CLOAK_MOVE_COST_MULTIPLIER 0;
          if gt temp 0; #revert normal movement if we don't have a dig in penalty
            attacker.getTag temp Tag.UNIT_DIG_IN_MOVE_PENALTY;
            if le temp 100;
              attacker.MoveCost.setBaseNormalTimePercent 100;
            end;
          end;
          # debug_log "ROSIGMA_hU_infiltration_stealth_deactivate_on_attack, offset 1: disabling attacker invisibility due to damage. UNIT_STEALTH_IS_ACTIVE" temp;
          return power part side;

    damageUnit:
      - new: ROSIGMA_dU_infiltration_increment_kill_counter
        offset: 10  # hide unit
        code: |
          var int temp;
          var int temp2;
          var ptr RuleArmor myRuleArmor;

          unit.getFaction temp;
          attacker.getFaction temp2;
          if eq temp temp2;
            # debug_log "ROSIGMA_dU_infiltration_increment_kill_counter; damageUnit, offset 10: Aborting. Target is friendly/same faction.";
            return;
          end;

          if eq temp FACTION_NEUTRAL;
            # debug_log "ROSIGMA_dU_infiltration_increment_kill_counter; damageUnit, offset 10: Aborting. Target is neutral faction.";
            return;
          end;

          attacker.getRuleArmor myRuleArmor;
          myRuleArmor.getTag temp Tag.ARMOR_RESTEALTH_KILL_REQUIREMENT; # get the unit's infiltrator value

          if le temp 0;
            # debug_log "ROSIGMA_dU_infiltration_increment_kill_counter | offset: 10 | Target lacks ARMOR_RESTEALTH_KILL_REQUIREMENT. Aborting.";
            return;
          end;

          unit.getHealth temp; # if we get a kill increment our kill counter
          sub temp to_health;
          if gt temp 0;
            # debug_log "ROSIGMA_dU_infiltration_increment_kill_counter | offset: 10 | Attack failed to kill target. Aborting. temp" temp;
            return;
          end;

          attacker.getTag temp Tag.UNIT_LIKE_A_SHADOW_COUNTER;
          add temp 1;
          # debug_log "ROSIGMA_dU_infiltration_increment_kill_counter | offset: 10 | Attack killed target. UNIT_LIKE_A_SHADOW_COUNTER: temp" temp;
          attacker.setTag Tag.UNIT_LIKE_A_SHADOW_COUNTER temp;
          myRuleArmor.getTag temp2 Tag.ARMOR_RESTEALTH_KILL_REQUIREMENT; # get the unit's infiltrator value
          sub temp2 temp;
          limit_lower temp2 0;
          battle_game.flashMessage "STR_SKILL_INFILTRATION_CHECK" temp2; # report number of kills needed to restealth
          return;

    recolorUnitSprite:
      - new: ROSIGMA_rUS_infiltration_visual_effect
        offset: 5  # change unit color to grey so player knows target is in infiltrator mode
        code: |
          var int temp;
          var int animFrame;
          var int newShade;

          unit.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE;

          if lt temp 1;
            return new_pixel;
          end;

          set animFrame anim_frame; #new
          if gt animFrame 20;
            set temp animFrame;
            muldiv temp 1 20;
            mul temp 20;
            sub animFrame temp;
            if lt animFrame 0;
              add animFrame 20;
            end;
          end;
          if and le animFrame 4 neq old_pixel 0;
            get_shade newShade new_pixel;
            add newShade animFrame;
            add newShade 3;
            if ge newShade 16;
              set new_pixel 0;
              return new_pixel;
            end;
            sub newShade 15;
            mul newShade -1;
            set_shade new_pixel newShade;
            set_color new_pixel COLOR_X1_GRAY;
          else gt animFrame 4;
            get_shade newShade old_pixel;
            sub newShade animFrame;
            sub newShade 3;
            if le newShade -16;
              set new_pixel 0;
              return new_pixel;
            end;
            add newShade 15;
            set_shade new_pixel newShade;
            set_color new_pixel COLOR_X1_GRAY;
          end;

          return new_pixel;

    visibilityUnit:
      - new: ROSIGMA_vU_infiltration_proximity_detection
        offset: 5  # hide unit
        code: |
          var int temp;
          var ptr RuleArmor myRuleArmor;

          target_unit.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE;
          if lt temp 1;
            return current_visibility visibility_mode;
          end;

          # debug_log "ROSIGMA_vU_infiltration, offset 5: observer_unit:" observer_unit;
          # debug_log "ROSIGMA_vU_infiltration, offset 5: distance:" distance;
          # debug_log "ROSIGMA_vU_infiltration, offset 5: making unit invisible per ARMOR_STEALTH_IS_ACTIVE tag, temp:" temp;
          target_unit.getRuleArmor myRuleArmor;
          myRuleArmor.getTag temp Tag.ARMOR_STEALTH_DETECTION_RANGE;
          if lt temp 1;
            return 0 visibility_mode;
          end;

          mul temp 16;

          if le distance temp; #enemies can see camo cloaks at range 5 and less; each tile = ~15.75 units of distance
            # debug_log "ROSIGMA_vU_infiltration, offset 5: Camo Cloak unit spotted. distance:" distance;
            return current_visibility visibility_mode;
          end;

          return 0 visibility_mode;


# this is for setting the order currently active on the Bonehead
    skillUseUnit:
      - new: ROSIGMA_sUU_infiltration_shadow
        offset: 1
        code: |
          var int temp;
          var int temp2;
          var int shadowSkill;
          var ptr RuleArmor myRuleArmor;

          # Check to see if we're using the Fighting A Shadow skill
          skill.getTag shadowSkill Tag.SKILL_LIKE_FIGHTING_A_SHADOW_ID;
          if le shadowSkill 0;
            # debug_log "newTurnUnit | ROSIGMA_sUU_infiltration_shadow | offset: 1 | Not using SKILL_LIKE_FIGHTING_A_SHADOW_ID. Aborting.";
            return;
          end;

          # Check our counter
          actor.getRuleArmor myRuleArmor;
          myRuleArmor.getTag temp Tag.ARMOR_RESTEALTH_KILL_REQUIREMENT; # get the number of kills required
          if lt temp 1;
            battle_game.flashMessage "STR_SKILL_INFILTRATION_CHECK_NO_RESTEALTH" temp;
            # debug_log "skillUseUnit | ROSIGMA_sUU_infiltration_shadow | offset: 1 | Unit cannot regain infiltration. Aborting.";
          end;
          actor.getTag temp2 Tag.UNIT_LIKE_A_SHADOW_COUNTER;
          sub temp temp2; # calculate kills remaining
          limit_lower temp 0; # negatives look ugly when displayed.

          if eq shadowSkill 1;
            battle_game.flashMessage "STR_SKILL_INFILTRATION_CHECK" temp;
          else le temp 0;
            if le have_tu 0;
              # debug_log "skillUseUnit | ROSIGMA_sUU_infiltration_shadow | offset: 1 | Unit lacks adequate TU. Aborting.";
              return;
            end;
            actor.getTimeUnitsMax temp;
            muldiv temp 90 100;
            mul temp -1;
            actor.addTimeUnits temp; # takes our whole turn to go back into stealth mode
            # debug_log "newTurnUnit | ROSIGMA_sUU_infiltration_shadow | offset: 1 | Restealthing: UNIT_STEALTH_IS_ACTIVE. temp." temp;
            skill.getTag temp Tag.SKILL_LIKE_FIGHTING_A_SHADOW_RESTEALTH_DURATION;
            actor.setTag Tag.UNIT_STEALTH_IS_ACTIVE temp; # activate stealth
            # debug_log "newTurnUnit | ROSIGMA_sUU_infiltration_shadow | offset: 1 | Restealthing: UNIT_STEALTH_IS_ACTIVE. temp." temp;
            actor.setTag Tag.UNIT_LIKE_A_SHADOW_COUNTER 0; # reset this counter
            battle_game.flashMessage "STR_SKILL_INFILTRATION_ACTIVATED" temp;
          end;

          return;

      - new: ROSIGMA_sUU_infiltration_camo_cloak
        offset: 1
        code: |
          var int temp;
          var int temp2;
          var int stealthActive;
          var int shadowSkill;
          var ptr RuleArmor myRuleArmor;

          # Check to see if we're using the Fighting A Shadow skill
          skill.getTag shadowSkill Tag.SKILL_ACTIVATE_CAMO_CLOAK_ID;
          if lt shadowSkill 1;
            # debug_log "newTurnUnit | ROSIGMA_sUU_infiltration_camo_cloak | offset: 1 | Not using SKILL_LIKE_FIGHTING_A_SHADOW_ID. Aborting.";
            return;
          end;

          # Check our counter
          actor.getRuleArmor myRuleArmor;
          myRuleArmor.getTag temp Tag.ARMOR_RESTEALTH_TURN_REQUIREMENT; # get the number of turns required
          if lt temp 1;
            battle_game.flashMessage "STR_SKILL_INFILTRATION_CHECK_NO_RESTEALTH" temp;
            # debug_log "skillUseUnit | ROSIGMA_sUU_infiltration_camo_cloak | offset: 1 | Unit cannot regain infiltration. Aborting.";
          end;
          actor.getTag temp2 Tag.UNIT_STEALTH_CHARGE_TURN_COUNTER;
          sub temp temp2; # calculate kills remaining
          limit_lower temp 0; # negatives look ugly when displayed.

          actor.getTag stealthActive Tag.UNIT_STEALTH_IS_ACTIVE; # activate stealth
          if eq shadowSkill 3;
            if gt stealthActive 0;
              battle_game.flashMessage "STR_SCRIPT_CAMO_CLOAK_DEACTIVATE";
              actor.setTag Tag.UNIT_STEALTH_IS_ACTIVE 0; # disable stealth
              actor.getTag temp Tag.UNIT_DIG_IN_MOVE_PENALTY;
              actor.setTag Tag.UNIT_CAMO_CLOAK_MOVE_COST_MULTIPLIER 0;
              if le temp 100;
                actor.MoveCost.setBaseNormalTimePercent 100;
              end;
              return;
            end;
            battle_game.flashMessage "STR_SCRIPT_CAMO_CLOAK_NOT_ACTIVE";
            return;
          end;

          if eq shadowSkill 1;
            if gt stealthActive 0;
              battle_game.flashMessage "STR_SCRIPT_INFILTRATION_TIME_REMAINING" stealthActive;
            else;
              if lt temp 1;
                battle_game.flashMessage "STR_SCRIPT_INFILTRATION_RECHARGED";
              else;
                battle_game.flashMessage "STR_SCRIPT_INFILTRATION_RECHARGING" temp;
              end;
            end;
            return;
          end;

          if gt temp 0;
            battle_game.flashMessage "STR_SCRIPT_INFILTRATION_RECHARGING" temp;
            return;
          end;

          if le have_tu 0;
            battle_game.flashMessage "STR_SCRIPT_CAMO_CLOAK_NOT_ENOUGH_TUS";
            return;
          end;

          actor.getTimeUnitsMax temp;
          muldiv temp 90 100;
          mul temp -1;
          actor.addTimeUnits temp; # takes most of our turn to go back into stealth mode
          # debug_log "newTurnUnit | ROSIGMA_sUU_infiltration_camo_cloak | offset: 1 | Restealthing: UNIT_STEALTH_IS_ACTIVE. temp." temp;
          skill.getTag temp Tag.SKILL_ACTIVATE_CAMO_CLOAK_RESTEALTH_DURATION;
          actor.setTag Tag.UNIT_STEALTH_IS_ACTIVE temp; # activate stealth
          # debug_log "newTurnUnit | ROSIGMA_sUU_infiltration_camo_cloak | offset: 1 | Restealthing: UNIT_STEALTH_IS_ACTIVE. temp." temp;
          actor.setTag Tag.UNIT_STEALTH_CHARGE_TURN_COUNTER 0; # reset this counter
          battle_game.flashMessage "STR_SKILL_CAMO_CLOAK_ACTIVATED" temp;
          set temp2 700;
          actor.setTag Tag.UNIT_CAMO_CLOAK_MOVE_COST_MULTIPLIER temp2; # set the multiplier for dig in compatibility
          actor.MoveCost.getBaseTimePercent temp; #highest penalty applies
          if lt temp temp2;
            actor.MoveCost.setBaseNormalTimePercent temp2; #moving is more expensive
          end;

          return;

    reactionUnitAction:
      - new: ROSIGMA_rUA_infiltration_no_reactions
        offset: 10  # Turn off reactions while stealthed
        code: |
          var int temp;
          var ptr RuleArmor myRuleArmor;
          var int reactRange;

          action_unit.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE;
          if gt temp 0;
            # debug_log "reactionUnitAction | ROSIGMA_rUA_infiltration_no_reactions | offset: 10 | Acting unit has UNIT_STEALTH_IS_ACTIVE. Abort reaction." temp;
            return 0;
          end;

          reaction_unit.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE;
          if gt temp 0;
            reaction_unit.getRuleArmor myRuleArmor;
            myRuleArmor.getTag reactRange Tag.ARMOR_STEALTH_DETECTION_RANGE;
            mul reactRange 8; #15.75 / 2 = 8
            if le distance reactRange;
              # debug_log "reactionUnitAction | ROSIGMA_rUA_infiltration_no_reactions | offset: 10 | Reacting within half ARMOR_STEALTH_DETECTION_RANGE." reactRange;
              return reaction_chance;
            end;
            # debug_log "reactionUnitAction | ROSIGMA_rUA_infiltration_no_reactions | offset: 10 | Reacting unit has UNIT_STEALTH_IS_ACTIVE. Abort reaction." temp;
            return 0;
          end;

          return reaction_chance;