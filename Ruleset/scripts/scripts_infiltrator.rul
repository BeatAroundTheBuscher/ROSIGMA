extended:
  tags:
    BattleUnit:
      UNIT_STEALTH_IS_ACTIVE: int #is stealth mode currently active? If so, for how many turns?
      UNIT_LIKE_A_SHADOW_COUNTER: int #keeps track of the number of kills this unit has to activate Like Fighting A Shadow
    RuleArmor:
      ARMOR_IS_INFILTRATOR: int #does this armor allow us to infiltrate?
      ARMOR_RESTEALTH_KILL_REQUIREMENT: int #how many kills do we need to restealth with this character?
      ARMOR_IS_DEEP_STRIKE: int #does this armor allow us to deep strike? WIP
    RuleSkill:
      SKILL_LIKE_FIGHTING_A_SHADOW_ID: int
      SKILL_LIKE_FIGHTING_A_SHADOW_RESTEALTH_DURATION: int #how many turns does restealthing last?

  scripts:
    newTurnUnit:
      - new: ROSIGMA_nTU_infiltration_decrement_stealth
        offset: 2
        code: |
          var int temp;
          var int temp2; #turret reload turn data for right handed weapon

          battle_game.getTurn temp;
          if le temp 0; #we don't care about Turn 0 and prior; abort.
            #debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_decrement_stealth | offset: 2 | Not past turn 0. Aborting.";
            return;
          end;

          battle_game.getTurnSide temp; #trigger only on the same turn as the unit's faction
          unit.getFaction temp2;
          if neq temp temp2;
            #debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_decrement_stealth | offset: 2 | Not the same turn as the unit. Aborting.";
            return;
          end;

          unit.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE; #get the unit's current stealth counter

          if le temp 0;
            #debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_decrement_stealth | offset: 2 | Target lacks UNIT_STEALTH_IS_ACTIVE. Aborting.";
            return;
          end;

          sub temp 1; #decrement the counter by 1;
          unit.setTag Tag.UNIT_STEALTH_IS_ACTIVE temp; #set our stealth counter to the Infiltrator value

          if le temp 0;
            battle_game.flashMessage "STR_SCRIPT_INFILTRATION_NO_TIME_REMAINING";
            return;
          end;

          battle_game.flashMessage "STR_SCRIPT_INFILTRATION_TIME_REMAINING" temp;
          return;

      - new: ROSIGMA_nTU_infiltration_set_stealth
        offset: 3
        code: |
          var int temp;
          var int temp2; #turret reload turn data for right handed weapon
          var ptr RuleArmor myRuleArmor;

          battle_game.getTurn temp;
          if gt temp 1; #we don't care about Turns beyond turn 1; abort.
            #debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_set_stealth | offset: 3 | Past turn 1. Aborting." temp;
            return;
          end;

          #debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_set_stealth | offset: 3 | Current Turn per battle_game.getTurn, temp:" temp;

          battle_game.getTurnSide temp; #trigger only on the same turn as the unit's faction
          unit.getFaction temp2;
          if neq temp temp2;
            #debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_set_stealth | offset: 3 | Not the same turn as the unit. Aborting.";
            return;
          end;

          unit.getRuleArmor myRuleArmor;
          myRuleArmor.getTag temp Tag.ARMOR_IS_INFILTRATOR; #get the unit's infiltrator value

          if le temp 0;
            #debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_set_stealth | offset: 3 | Target lacks ARMOR_IS_INFILTRATOR. Aborting.";
            return;
          end;

          unit.setTag Tag.UNIT_STEALTH_IS_ACTIVE temp; #set our stealth counter to the Infiltrator value
          #debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_set_stealth | offset: 3 | Current Turn:" turn;
          #debug_log "newTurnUnit | ROSIGMA_nTU_infiltration_set_stealth | offset: 3 | UNIT_STEALTH_IS_ACTIVE. temp." temp;
          return;


    #if you hit or are hit while in stealth mode, you lose your stealth
    hitUnit:
      - new: ROSIGMA_hU_infiltration_stealth_deactivate
        offset: 1 # hide unit
        code: |
          var int temp;

          unit.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE;

          #disable stealth for damaged unit
          if gt temp 0;
            unit.setTag Tag.UNIT_STEALTH_IS_ACTIVE 0;
            #debug_log "ROSIGMA_hU_infiltration_stealth_deactivate, offset 1: disabling target invisibility due to damage. UNIT_STEALTH_IS_ACTIVE";
            return power part side;
          end;

          attacker.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE;

          #disable stealth for damaging unit
          if gt temp 0;
            attacker.setTag Tag.UNIT_STEALTH_IS_ACTIVE 0; #disable stealth
            attacker.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE;
            #debug_log "ROSIGMA_hU_infiltration_stealth_deactivate, offset 1: disabling attacker invisibility due to damage. UNIT_STEALTH_IS_ACTIVE" temp;
            return power part side;
          end;

          return power part side;

    damageUnit:
      - new: ROSIGMA_dU_infiltration_increment_kill_counter
        offset: 10 # hide unit
        code: |
          var int temp;
          var int temp2;
          var ptr RuleArmor myRuleArmor;

          attacker.getRuleArmor myRuleArmor;
          myRuleArmor.getTag temp Tag.ARMOR_RESTEALTH_KILL_REQUIREMENT; #get the unit's infiltrator value

          if le temp 0;
            #debug_log "ROSIGMA_dU_infiltration_increment_kill_counter | offset: 10 | Target lacks ARMOR_RESTEALTH_KILL_REQUIREMENT. Aborting.";
            return;
          end;

          unit.getHealth temp; #if we get a kill increment our kill counter
          sub temp to_health;
          if gt temp 0;
            #debug_log "ROSIGMA_dU_infiltration_increment_kill_counter | offset: 10 | Attack failed to kill target. Aborting. temp" temp;
            return;
          end;

          attacker.getTag temp Tag.UNIT_LIKE_A_SHADOW_COUNTER;
          add temp 1;
          #debug_log "ROSIGMA_dU_infiltration_increment_kill_counter | offset: 10 | Attack killed target. UNIT_LIKE_A_SHADOW_COUNTER: temp" temp;
          attacker.setTag Tag.UNIT_LIKE_A_SHADOW_COUNTER temp;
          myRuleArmor.getTag temp2 Tag.ARMOR_RESTEALTH_KILL_REQUIREMENT; #get the unit's infiltrator value
          sub temp2 temp;
          limit_lower temp2 0;
          battle_game.flashMessage "STR_SKILL_INFILTRATION_CHECK" temp2; #report number of kills needed to restealth
          return;

    recolorUnitSprite:
      - new: ROSIGMA_rUS_infiltration
        offset: 5 # change unit color to grey so player knows target is in infiltrator mode
        code: |
          var int temp;

          unit.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE;

          if gt temp 0;
            set_color new_pixel COLOR_X1_GRAY;
          end;

          return new_pixel;

    visibilityUnit:
      - new: ROSIGMA_vU_infiltration
        offset: 5 # hide unit
        code: |
          var int temp;

          target_unit.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE;

          if gt temp 0;
            #debug_log "ROSIGMA_vU_infiltration, offset 5: making unit invisible per ARMOR_STEALTH_IS_ACTIVE tag, temp:" temp;
            return 0 visibility_mode;
          end;

          return current_visibility visibility_mode;

#this is for setting the order currently active on the Bonehead
    skillUseUnit:
      - new: ROSIGMA_sUU_infiltration
        offset: 1
        code: |
          var int temp;
          var int temp2;
          var int shadowSkill;
          var ptr RuleArmor myRuleArmor;

          #Check to see if we're using the Bonehead order skill
          skill.getTag shadowSkill Tag.SKILL_LIKE_FIGHTING_A_SHADOW_ID;
          if le shadowSkill 0;
            #debug_log "newTurnUnit | ROSIGMA_sUU_infiltration | offset: 1 | Not using SKILL_LIKE_FIGHTING_A_SHADOW_ID. Aborting.";
            return;
          end;

          #Check our counter
          actor.getRuleArmor myRuleArmor;
          myRuleArmor.getTag temp Tag.ARMOR_RESTEALTH_KILL_REQUIREMENT; #get the number of kills required
          actor.getTag temp2 Tag.UNIT_LIKE_A_SHADOW_COUNTER;
          sub temp temp2; #calculate kills remaining
          limit_lower temp 0; #negatives look ugly when displayed.

          if eq shadowSkill 1;
            battle_game.flashMessage "STR_SKILL_INFILTRATION_CHECK" temp;
          else le temp 0;
            if le have_tu 0;
              #debug_log "newTurnUnit | ROSIGMA_sUU_infiltration | offset: 1 | Unit lacks adequate TU. Aborting.";
              return;
            end;
            actor.getTimeUnits temp;
            mul temp -1;
            actor.addTimeUnits temp; #takes our whole turn to go back into stealth mode
            #debug_log "newTurnUnit | ROSIGMA_sUU_infiltration | offset: 1 | Restealthing: UNIT_STEALTH_IS_ACTIVE. temp." temp;
            skill.getTag temp Tag.SKILL_LIKE_FIGHTING_A_SHADOW_RESTEALTH_DURATION;
            actor.setTag Tag.UNIT_STEALTH_IS_ACTIVE temp; #activate stealth
            #debug_log "newTurnUnit | ROSIGMA_sUU_infiltration | offset: 1 | Restealthing: UNIT_STEALTH_IS_ACTIVE. temp." temp;
            actor.setTag Tag.UNIT_LIKE_A_SHADOW_COUNTER 0; #reset this counter
            battle_game.flashMessage "STR_SKILL_INFILTRATION_ACTIVATED" temp;
          end;

          return;

    reactionUnitAction:
      - new: ROSIGMA_rUA_infiltration_no_reactions
        offset: 10 # Turn off reactions while stealthed
        code: |
          var int temp;

          action_unit.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE;
          if gt temp 0;
            #debug_log "reactionUnitAction | ROSIGMA_rUA_infiltration_no_reactions | offset: 10 | Acting unit has UNIT_STEALTH_IS_ACTIVE. Abort reaction." temp;
            return 0;
          end;

          reaction_unit.getTag temp Tag.UNIT_STEALTH_IS_ACTIVE;
          if gt temp 0;
            #` "reactionUnitAction | ROSIGMA_rUA_infiltration_no_reactions | offset: 10 | Reacting unit has UNIT_STEALTH_IS_ACTIVE. Abort reaction." temp;
            return 0;
          end;

          return reaction_chance;